[
    {
        "source": "Multiply the packed 16-bit integers in a and b, producing intermediate 32-bit integers, and store the low 16 bits of the intermediate integers in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的 16 位整数相乘，生成中间的 32 位整数，并使用写掩码 k 将中间整数的低 16 位存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply the packed 16-bit integers in a and b, producing intermediate 32-bit integers, and store the low 16 bits of the intermediate integers in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的 16 位整数相乘，生成中间的 32 位整数，并使用零掩码 k 将中间整数的低 16 位存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for less-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装后的无符号 16 位整数 (小于)，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for less-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数以得到小于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for less-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数以得到小于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for less-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否小于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for less-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数 (小于)，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for less-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数小于零，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for less-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数小于零，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for less-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数小于零，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for greater-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否大于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for greater-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否大于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for greater-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否大于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for greater-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否大于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for greater-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数是否大于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for greater-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数是否大于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for greater-than, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否大于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for greater-than, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否大于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for less-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否小于等于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for less-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否小于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for less-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数以得出小于或等于的结果，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for less-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否小于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for less-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数 (小于等于)，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for less-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数 (小于或等于)，然后使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for less-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数 (小于等于)，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for less-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否小于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否大于等于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否大于等于，然后使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否大于等于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否大于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数是否大于等于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数是否大于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否大于等于，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for greater-than-or-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否大于等于，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for equality, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for equality, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for equality, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for equality, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for equality, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数是否相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for equality, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数是否相等，然后使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for equality, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for equality, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for not-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否不相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b for not-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 16 位整数是否不相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for not-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b for not-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 8 位整数是否不相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for not-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号 16 位整数是否不相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b for not-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 16 位整数是否不相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for not-equal, and store the results in mask vector k.",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否不相等，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b for not-equal, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 8 位整数是否不相等，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k.",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中的包装无符号 16 位整数，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 16-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中包装的无符号 16 位整数，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k.",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中的包装无符号 8 位整数，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 8-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中的包装无符号 8 位整数，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k.",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中包装的带符号 16 位整数，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 16-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中包装的带符号 16 位整数，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k.",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中的包装带符号 8 位整数，并将结果存储在掩码 vector k 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 8-bit integers in a and b based on the comparison operand specified by imm8, and store the results in mask vector k using zeromask k1 (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "根据 imm8 指定的比较操作数比较 a 和 b 中包装的带符号的 8 位整数，并使用零掩码 k1 将结果存储在掩码 vector k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Load 512-bits (composed of 32 packed 16-bit integers) from memory into dst.",
        "suggest": "将 512 位 (由 32 个包装的 16 位整数组成) 从 dst 加载。",
        "translate": ""
    },
    {
        "source": "mem_addr does not need to be aligned on any particular boundary.",
        "suggest": "mem_addr 不需要在任何特定边界上对齐。",
        "translate": ""
    },
    {
        "source": "should be vmovdqu16",
        "suggest": "应该是 vmovdqu16",
        "translate": ""
    },
    {
        "source": "Load 512-bits (composed of 64 packed 8-bit integers) from memory into dst.",
        "suggest": "将 512 位 (由 64 个包装的 8 位整数组成) 从 dst 加载。",
        "translate": ""
    },
    {
        "source": "should be vmovdqu8",
        "suggest": "应该是 vmovdqu8",
        "translate": ""
    },
    {
        "source": "Store 512-bits (composed of 32 packed 16-bit integers) from a into memory.",
        "suggest": "将 a 中的 512 位 (由 32 个包装的 16 位整数组成) 存储到内存中。",
        "translate": ""
    },
    {
        "source": "should be vmovdqu32",
        "suggest": "应该是 vmovdqu32",
        "translate": ""
    },
    {
        "source": "Store 512-bits (composed of 64 packed 8-bit integers) from a into memory.",
        "suggest": "将 a 中的 512 位 (由 64 个包装的 8 位整数组成) 存储到内存中。",
        "translate": ""
    },
    {
        "source": "Vertically multiply each unsigned 8-bit integer from a with the corresponding signed 8-bit integer from b, producing intermediate signed 16-bit integers.",
        "suggest": "将 a 中的每个无符号 8 位整数与 b 中对应的有符号 8 位整数垂直相乘，生成中间有符号的 16 位整数。",
        "translate": ""
    },
    {
        "source": "Horizontally add adjacent pairs of intermediate signed 16-bit integers, and pack the saturated results in dst.",
        "suggest": "水平相加相邻的中间带符号的 16 位整数对，并将饱和结果包装到 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply packed unsigned 8-bit integers in a by packed signed 8-bit integers in b, producing intermediate signed 16-bit integers.",
        "suggest": "将 a 中的包装无符号 8 位整数与 b 中的包装有符号 8 位整数相乘，生成中间有符号的 16 位整数。",
        "translate": ""
    },
    {
        "source": "Horizontally add adjacent pairs of intermediate signed 16-bit integers, and pack the saturated results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "水平相加相邻的中间带符号的 16 位整数对，并使用写掩码 k 将饱和结果包装到 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using signed saturation, and store the results in dst.",
        "suggest": "使用带符号的饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用带符号的饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用带符号的饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using signed saturation, and store the results in dst.",
        "suggest": "使用带符号的饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用带符号的饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用带符号的饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using unsigned saturation, and store the results in dst.",
        "suggest": "使用无符号饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用无符号饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers from a and b to packed 16-bit integers using unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用无符号饱和度将包装的带符号的 32 位整数从 a 和 b 转换为包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using unsigned saturation, and store the results in dst.",
        "suggest": "使用无符号饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用无符号饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers from a and b to packed 8-bit integers using unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用无符号饱和度将包装的带符号的 16 位整数从 a 和 b 转换为包装的 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 16-bit integers in a and b, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装无符号 16 位整数进行平均，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 16-bit integers in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中包装的无符号 16 位整数进行平均，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 16-bit integers in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中包装的无符号 16 位整数进行平均，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 8-bit integers in a and b, and store the results in dst.",
        "suggest": "将 a 和 b 中包装的无符号 8 位整数平均，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 8-bit integers in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中包装的无符号 8 位整数平均，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Average packed unsigned 8-bit integers in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中包装的无符号 8 位整数进行平均，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by count while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数按计数左移，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数按计数左移，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数按计数左移，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数左移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数左移 imm8，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数左移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数按 count 中相应元素指定的数量向左移位，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数按 count 中相应元素指定的数量向左移位，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数左移由 count 中的相应元素指定的数量，同时移入零，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数按计数右移，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数右移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移 imm8，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "should be u32, it seems the document to verify is incorrect",
        "suggest": "应该是 u32，似乎要验证的文件不正确",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 16 位整数向右移位 (由 count 中相应元素指定的数量)，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数向右移位 (由 count 中相应元素指定的数量)，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数向右移位 (由 count 中相应元素指定的数量)，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in sign bits, and store the results in dst.",
        "suggest": "将包装的 16 位整数按计数右移，同时将符号位移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数按计数右移，同时将符号位移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数按计数右移，同时将符号位移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst.",
        "suggest": "将包装的 16 位整数右移 imm8，同时将符号位移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移 imm8，同时将符号位移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移 imm8，同时将符号位移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst.",
        "suggest": "将包装的 16 位整数右移 count 中相应元素指定的数量，同时移入符号位，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移 count 中相应元素指定的数量，同时将符号位移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 16-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 16 位整数右移由 count 中的相应元素指定的数量，同时将符号位移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst.",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中对 16 位整数进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vpermi2w or vpermt2w",
        "suggest": "vpermi2w 或 vpermt2w",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用相应的选择器和 idx 中的索引在通道中的 a 和 b 中对 16 位整数进行打乱，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 a 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用相应的选择器和 idx 中的索引在通道中的 a 和 b 中对 16 位整数进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from idx when the corresponding mask bit is not set).",
        "suggest": "使用相应的选择器和 idx 中的索引在通道中的 a 和 b 中对 16 位整数进行打乱，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，从 idx 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a across lanes using the corresponding index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应索引在跨通道中对 16 位整数进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对 16 位整数进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对 16 位整数进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Blend packed 16-bit integers from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合来自 a 和 b 的包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmw",
        "suggest": "应该是 vpblendmw",
        "translate": ""
    },
    {
        "source": "Blend packed 8-bit integers from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合 a 和 b 中的包装 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmb",
        "suggest": "应该是 vpblendmb",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 16-bit integer from a to all elements of dst.",
        "suggest": "将低包装的 16 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 16-bit integer from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将低包装的 16 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 16-bit integer from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低包装的 16 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 8-bit integer from a to all elements of dst.",
        "suggest": "将低包装的 8 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 8-bit integer from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 d 的低包装的 8 位整数广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 8-bit integer from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低包装的 8 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分拆包和交织 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包并交织 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包和交织 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 16-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包和交织 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包并交织 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包和交织 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 8-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分拆包和交织 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Move packed 16-bit integers from a into dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的 16 位整数从 a 移到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed 16-bit integers from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的 16 位整数从 a 移到 dst (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Move packed 8-bit integers from a into dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的 8 位整数从 a 移到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed 8-bit integers from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的 8 位整数从 a 移到 dst (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast 16-bit integer a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 向 dst 的所有元素广播 16 位整数 a (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast 8-bit integer a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 8 位整数 a 广播到 dst 的所有元素 (未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast 8-bit integer a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将 8 位整数 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of a using the control in imm8.",
        "suggest": "使用 imm8 中的控件在 a 的 128 位通道的低 64 位中对 16 位整数进行打乱。",
        "translate": ""
    },
    {
        "source": "Store the results in the low 64 bits of 128-bit lanes of dst, with the high 64 bits of 128-bit lanes being copied from from a to dst.",
        "suggest": "将结果存储在 dst 的 128 位通道的低 64 位中，并从 a 到 dst 复制 128 位的通道的高 64 位。",
        "translate": ""
    },
    {
        "source": "Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of a using the control in imm8.",
        "suggest": "使用 imm8 中的控件在 a 的 128 位通道的高 64 位中对 16 位整数进行打乱。",
        "translate": ""
    },
    {
        "source": "Store the results in the high 64 bits of 128-bit lanes of dst, with the low 64 bits of 128-bit lanes being copied from from a to dst.",
        "suggest": "将结果存储在 dst 的 128 位通道的高 64 位中，并从 a 到 dst 复制 128 位的通道的低 64 位。",
        "translate": ""
    },
    {
        "source": "Shuffle packed 8-bit integers in a according to shuffle control mask in the corresponding 8-bit element of b, and store the results in dst.",
        "suggest": "根据 b 的对应 8 位元素中的打乱控制掩码，将 a 中的包装 8 位整数进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle 8-bit integers in a within 128-bit lanes using the control in the corresponding 8-bit element of b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 b 中相应的 8 位元素中的控件在 128 位通道内对 a 中的 8 位整数进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle packed 8-bit integers in a according to shuffle control mask in the corresponding 8-bit element of b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "根据 b 的相应 8 位元素中的打乱控制掩码对 a 中的包装 8 位整数进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 16-bit integers in a and b, producing intermediate 16-bit values, and set the corresponding bit in result mask k if the intermediate value is non-zero.",
        "suggest": "计算 a 和 b 中包装的 16 位整数的按位与，生成中间的 16 位值，如果中间值不为零，则在结果掩码 k 中设置相应的位。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 16-bit integers in a and b, producing intermediate 16-bit values, and set the corresponding bit in result mask k (subject to writemask k) if the intermediate value is non-zero.",
        "suggest": "计算 a 和 b 中包装的 16 位整数的按位与，生成中间的 16 位值，如果中间值不为零，则在结果掩码 k 中设置相应的位 (服从写掩码 k)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 8-bit integers in a and b, producing intermediate 8-bit values, and set the corresponding bit in result mask k if the intermediate value is non-zero.",
        "suggest": "计算 a 和 b 中包装的 8 位整数的按位与，生成中间 8 位值，如果中间值不为零，则在结果掩码 k 中设置相应的位。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 8-bit integers in a and b, producing intermediate 8-bit values, and set the corresponding bit in result mask k (subject to writemask k) if the intermediate value is non-zero.",
        "suggest": "计算 a 和 b 中包装的 8 位整数的按位与，生成中间 8 位值，如果中间值不为零，则在结果掩码 k 中设置相应的位 (以写掩码 k 为准)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NAND of packed 16-bit integers in a and b, producing intermediate 16-bit values, and set the corresponding bit in result mask k if the intermediate value is zero.",
        "suggest": "计算 a 和 b 中包装的 16 位整数的按位 NAND，生成中间的 16 位值，如果中间值为零，则在结果掩码 k 中设置相应的位。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NAND of packed 16-bit integers in a and b, producing intermediate 16-bit values, and set the corresponding bit in result mask k (subject to writemask k) if the intermediate value is zero.",
        "suggest": "计算 a 和 b 中包装的 16 位整数的按位 NAND，生成中间的 16 位值，如果中间值为零，则在结果掩码 k 中设置相应的位 (服从写掩码 k)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NAND of packed 8-bit integers in a and b, producing intermediate 8-bit values, and set the corresponding bit in result mask k if the intermediate value is zero.",
        "suggest": "计算 a 和 b 中包装的 8 位整数的按位 NAND，生成中间的 8 位值，如果中间值为零，则在结果掩码 k 中设置相应的位。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NAND of packed 8-bit integers in a and b, producing intermediate 8-bit values, and set the corresponding bit in result mask k (subject to writemask k) if the intermediate value is zero.",
        "suggest": "计算 a 和 b 中包装的 8 位整数的按位 NAND，生成中间的 8 位值，如果中间值为零，则在结果掩码 k 中设置相应的位 (以写掩码 k 为准)。",
        "translate": ""
    },
    {
        "source": "Store 64-bit mask from a into memory.",
        "suggest": "将 64 位掩码从 a 存储到内存中。",
        "translate": ""
    },
    {
        "source": "should be kmovq",
        "suggest": "应该是 kmovq",
        "translate": ""
    },
    {
        "source": "Store 32-bit mask from a into memory.",
        "suggest": "将 32 位掩码从 a 存储到内存中。",
        "translate": ""
    },
    {
        "source": "should be kmovd",
        "suggest": "应该是 kmovd",
        "translate": ""
    },
    {
        "source": "Load 64-bit mask from memory into k.",
        "suggest": "将内存中的 64 位掩码加载到 k 中。",
        "translate": ""
    },
    {
        "source": "Load 32-bit mask from memory into k.",
        "suggest": "将内存中的 32 位掩码加载到 k 中。",
        "translate": ""
    },
    {
        "source": "Compute the absolute differences of packed unsigned 8-bit integers in a and b, then horizontally sum each consecutive 8 differences to produce eight unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of 64-bit elements in dst.",
        "suggest": "计算 a 和 b 中包装的无符号 8 位整数的绝对差，然后将每个连续的 8 个差水平地求和以生成八个无符号的 16 位整数，并将这些无符号的 16 位整数包装在 64 位元素的低 16 位中在 dst。",
        "translate": ""
    },
    {
        "source": "Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in a compared to those in b, and store the 16-bit results in dst.",
        "suggest": "计算 a 中与 b 中的无符号 8 位整数的四元组的绝对差之和 (SADs)，并将 16 位结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Four SADs are performed on four 8-bit quadruplets for each 64-bit lane.",
        "suggest": "对于每个 64 位通道，在四个 8 位四元组上执行四个 SAD。",
        "translate": ""
    },
    {
        "source": "The first two SADs use the lower 8-bit quadruplet of the lane from a, and the last two SADs use the uppper 8-bit quadruplet of the lane from a.",
        "suggest": "前两个 SAD 使用 a 中通道的低 8 位四元组，而后两个 SAD 使用 a 中通道的较高 8 位四元组。",
        "translate": ""
    },
    {
        "source": "Quadruplets from b are selected from within 128-bit lanes according to the control in imm8, and each SAD in each 64-bit lane uses the selected quadruplet at 8-bit offsets.",
        "suggest": "根据 imm8 中的控件，从 128 位通道中选择 b 中的四元组，并且每个 64 位通道中的每个 SAD 使用 8 位偏移量的选定四元组。",
        "translate": ""
    },
    {
        "source": "Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in a compared to those in b, and store the 16-bit results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中的无符号 8 位整数与 b 中的无符号 8 位整数的四元组的绝对差之和 (SADs)，并使用写掩码 k 将 16 位结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the sum of absolute differences (SADs) of quadruplets of unsigned 8-bit integers in a compared to those in b, and store the 16-bit results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中与 b 中的无符号 8 位整数的四元组的绝对差之和 (SADs) 的总和，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将 16 位结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Set each bit of mask register k based on the most significant bit of the corresponding packed 16-bit integer in a.",
        "suggest": "根据 a 中相应的包装的 16 位整数的最高有效位设置掩码寄存器 k 的每一位。",
        "translate": ""
    },
    {
        "source": "should be vpmovw2m but msvc does not generate it",
        "suggest": "应该是 vpmovw2m，但 msvc 不会生成它",
        "translate": ""
    },
    {
        "source": "Set each bit of mask register k based on the most significant bit of the corresponding packed 8-bit integer in a.",
        "suggest": "根据 a 中相应包装的 8 位整数的最高有效位设置掩码寄存器 k 的每个位。",
        "translate": ""
    },
    {
        "source": "should be vpmovb2m but msvc does not generate it",
        "suggest": "应该是 vpmovb2m，但 msvc 不会生成它",
        "translate": ""
    },
    {
        "source": "Set each packed 16-bit integer in dst to all ones or all zeros based on the value of the corresponding bit in k.",
        "suggest": "根据 k 中相应位的值，将 dst 中每个包装的 16 位整数设置为全 1 或全 0。",
        "translate": ""
    },
    {
        "source": "Set each packed 8-bit integer in dst to all ones or all zeros based on the value of the corresponding bit in k.",
        "suggest": "根据 k 中相应位的值，将 dst 中每个包装的 8 位整数设置为全 1 或全 0。",
        "translate": ""
    },
    {
        "source": "Add 32-bit masks in a and b, and store the result in k.",
        "suggest": "在 a 和 b 中添加 32 位掩码，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kaddd",
        "suggest": "生成 normal 和 code 而不是 kaddd",
        "translate": ""
    },
    {
        "source": "Add 64-bit masks in a and b, and store the result in k.",
        "suggest": "在 a 和 b 中添加 64 位掩码，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kaddq",
        "suggest": "生成 normal 和 code 而不是 kaddq",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of 32-bit masks a and b, and store the result in k.",
        "suggest": "计算 32 位掩码 a 和 b 的按位与，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kandd",
        "suggest": "生成 normal 和 code 而不是 kandd",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of 64-bit masks a and b, and store the result in k.",
        "suggest": "计算 64 位掩码 a 和 b 的按位与，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kandq",
        "suggest": "生成 normal 和 code 而不是 kandq",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NOT of 32-bit mask a, and store the result in k.",
        "suggest": "计算 32 位掩码 a 的按位非，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NOT of 64-bit mask a, and store the result in k.",
        "suggest": "计算 64 位掩码 a 的按位非，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NOT of 32-bit masks a and then AND with b, and store the result in k.",
        "suggest": "计算 32 位掩码 a 的按位非，然后与 b 计算 AND，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kandnd",
        "suggest": "生成 normal 和 code 而不是 kandnd",
        "translate": ""
    },
    {
        "source": "Compute the bitwise NOT of 64-bit masks a and then AND with b, and store the result in k.",
        "suggest": "计算 64 位掩码 a 的按位非，然后与 b 进行与运算，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kandnq",
        "suggest": "生成 normal 和 code 而不是 kandnq",
        "translate": ""
    },
    {
        "source": "Compute the bitwise OR of 32-bit masks a and b, and store the result in k.",
        "suggest": "计算 32 位掩码 a 和 b 的按位或，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kord",
        "suggest": "生成 normal 和 code 而不是 kord",
        "translate": ""
    },
    {
        "source": "Compute the bitwise OR of 64-bit masks a and b, and store the result in k.",
        "suggest": "计算 64 位掩码 a 和 b 的按位或，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of korq",
        "suggest": "生成 normal 和 code 而不是 korq",
        "translate": ""
    },
    {
        "source": "Compute the bitwise XOR of 32-bit masks a and b, and store the result in k.",
        "suggest": "计算 32 位掩码 a 和 b 的按位 XOR，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kxord",
        "suggest": "生成 normal 和 code 而不是 kxord",
        "translate": ""
    },
    {
        "source": "Compute the bitwise XOR of 64-bit masks a and b, and store the result in k.",
        "suggest": "计算 64 位掩码 a 和 b 的按位 XOR，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kxorq",
        "suggest": "生成 normal 和 code 而不是 kxorq",
        "translate": ""
    },
    {
        "source": "Compute the bitwise XNOR of 32-bit masks a and b, and store the result in k.",
        "suggest": "计算 32 位掩码 a 和 b 的按位 XNOR，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kxnord",
        "suggest": "生成 normal 和 code 而不是 kxnord",
        "translate": ""
    },
    {
        "source": "Compute the bitwise XNOR of 64-bit masks a and b, and store the result in k.",
        "suggest": "计算 64 位掩码 a 和 b 的按位 XNOR，并将结果存储在 k 中。",
        "translate": ""
    },
    {
        "source": "generate normal and code instead of kxnorq",
        "suggest": "生成 normal 和 code 而不是 kxnorq",
        "translate": ""
    },
    {
        "source": "Convert packed 16-bit integers in a to packed 8-bit integers with truncation, and store the results in dst.",
        "suggest": "将 a 中的包装的 16 位整数转换为带有截断的包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 16-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 16 位整数转换为带截断的 8 位包装的整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 16-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 16 位整数转换为带截断的 8 位包装的整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将 A 中的包装有符号 16 位整数转换为带符号饱和的包装 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 16 位整数转换为带符号饱和的包装 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 16-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 16 位整数转换为带符号饱和的包装 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 16-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 16 位整数转换为具有无符号饱和的包装无符号 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 16-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 16-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 16-bit integers, and store the results in dst.",
        "suggest": "使用符号将包装的 8 位整数从 a 扩展到包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 16-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 8 位整数从 a 扩展为包装的 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 16-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 8 位整数从 a 扩展为包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 16-bit integers, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 16-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装的 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 16-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shift 128-bit lanes in a left by imm8 bytes while shifting in zeros, and store the results in dst.",
        "suggest": "向左移动 128 位通道 imm8 字节，同时向零移动，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift 128-bit lanes in a right by imm8 bytes while shifting in zeros, and store the results in dst.",
        "suggest": "向右移动 128 位通道 imm8 字节，同时向零移动，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Concatenate pairs of 16-byte blocks in a and b into a 32-byte temporary result, shift the result right by imm8 bytes, and store the low 16 bytes in dst.",
        "suggest": "将 a 和 b 中的 16 字节块对连接成 32 字节的临时结果，将结果右移 imm8 字节，并将低 16 字节存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "If palignr is shifting the pair of vectors more than the size of two lanes, emit zero.",
        "suggest": "如果 palignr 对 vectors 的偏移量大于两个通道的大小，则发出零。",
        "translate": ""
    },
    {
        "source": "If palignr is shifting the pair of input vectors more than one lane, but less than two lanes, convert to shifting in zeroes.",
        "suggest": "如果 palignr 将一对输入 vectors 移位多于一个通道，但少于两个通道，则转换为移位为零。",
        "translate": ""
    },
    {
        "source": "Concatenate pairs of 16-byte blocks in a and b into a 32-byte temporary result, shift the result right by imm8 bytes, and store the low 16 bytes in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的 16 字节块对连接成 32 字节的临时结果，将结果右移 imm8 字节，并使用写掩码 k 将低 16 个字节存储在 dst 中 (当相应的掩码位为 1 时，元素从 src 复制没有设置)。",
        "translate": ""
    },
    {
        "source": "Concatenate pairs of 16-byte blocks in a and b into a 32-byte temporary result, shift the result right by imm8 bytes, and store the low 16 bytes in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的 16 字节块对连接成一个 32 字节的临时结果，将结果右移 imm8 字节，并使用零掩码 k 将低 16 字节存储在 dst 中 (当未使用相应的掩码位时元素清零) 放)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low 16-bits from input mask k to all 32-bit elements of dst.",
        "suggest": "将输入掩码 k 的低 16 位广播到 dst 的所有 32 位元素。",
        "translate": ""
    },
    {
        "source": "should be vpbroadcastmw2d",
        "suggest": "应该是 vpbroadcastmw2d",
        "translate": ""
    },
    {
        "source": "Broadcast the low 8-bits from input mask k to all 64-bit elements of dst.",
        "suggest": "将输入掩码 k 的低 8 位广播到 dst 的所有 64 位元素。",
        "translate": ""
    },
    {
        "source": "should be vpbroadcastmb2q",
        "suggest": "应该是 vpbroadcastmb2q",
        "translate": ""
    },
    {
        "source": "Test each 32-bit element of a for equality with all other elements in a closer to the least significant bit.",
        "suggest": "测试 a 的每个 32 位元素是否与所有其他元素在最接近最低有效位的相等性相等。",
        "translate": ""
    },
    {
        "source": "Each element's comparison forms a zero extended bit vector in dst.",
        "suggest": "每个元素的比较在 dst 中形成零扩展位 vector。",
        "translate": ""
    },
    {
        "source": "Test each 32-bit element of a for equality with all other elements in a closer to the least significant bit using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k (在未设置相应的掩码位时从 src 复制元素)，测试 a 的每个 32 位元素是否与所有其他元素在最接近最低有效位的相等性相等。",
        "translate": ""
    },
    {
        "source": "Test each 32-bit element of a for equality with all other elements in a closer to the least significant bit using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k (在未设置相应的掩码位时将元素清零)，测试 a 的每个 32 位元素是否与所有其他元素在最接近最低有效位的相等性相等。",
        "translate": ""
    },
    {
        "source": "Test each 64-bit element of a for equality with all other elements in a closer to the least significant bit.",
        "suggest": "测试 a 的每个 64 位元素是否与所有其他元素在最接近最低有效位的相等性相等。",
        "translate": ""
    },
    {
        "source": "Test each 64-bit element of a for equality with all other elements in a closer to the least significant bit using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 测试 a 的每个 64 位元素是否与所有其他元素相等 (更接近最低有效位) (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Test each 64-bit element of a for equality with all other elements in a closer to the least significant bit using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k (在未设置相应的掩码位时将元素清零)，测试 a 的每个 64 位元素是否与所有其他元素在最接近最低有效位的相等性相等。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 32-bit integer in a, and store the results in dst.",
        "suggest": "计算 a 中每个包装的 32 位整数中前导零位的数目，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 32-bit integer in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中每个包装的 32 位整数中前导零位的数目，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 32-bit integer in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中每个包装的 32 位整数中前导零位的数目，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 64-bit integer in a, and store the results in dst.",
        "suggest": "计算 a 中每个包装的 64 位整数中前导零位的数目，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 64-bit integer in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中每个包装的 64 位整数中前导零位的数目，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Counts the number of leading zero bits in each packed 64-bit integer in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中每个包装的 64 位整数中前导零位的数目，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "is a properly initialized i32x16",
        "suggest": "是正确初始化的 i32x16",
        "translate": ""
    },
    {
        "source": "Computes the absolute value of packed 32-bit integers in `a`, and store the unsigned results in `dst` using writemask `k` (elements are copied from `src` when the corresponding mask bit is not set).",
        "suggest": "计算 `a` 中包装的 32 位整数的绝对值，并使用写掩码 `k` 将无符号结果存储在 `dst` 中 (如果未设置相应的掩码位，则从 `src` 复制元素)。",
        "translate": ""
    },
    {
        "source": "Computes the absolute value of packed 32-bit integers in `a`, and store the unsigned results in `dst` using zeromask `k` (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 `a` 中包装的 32 位整数的绝对值，并使用零掩码 `k` 将无符号结果存储在 `dst` 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Compute the absolute value of packed signed 64-bit integers in a, and store the unsigned results in dst.",
        "suggest": "计算 a 中包装的带符号的 64 位整数的绝对值，并将无符号的结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "is a properly initialized i64x8",
        "suggest": "是正确初始化的 i64x8",
        "translate": ""
    },
    {
        "source": "Compute the absolute value of packed signed 64-bit integers in a, and store the unsigned results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的带符号的 64 位整数的绝对值，并使用写掩码 k 将无符号的结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compute the absolute value of packed signed 64-bit integers in a, and store the unsigned results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的带符号的 64 位整数的绝对值，并使用零掩码 k (将未设置相应掩码位的元素清零) 将无符号结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Finds the absolute value of each packed single-precision (32-bit) floating-point element in v2, storing the results in dst.",
        "suggest": "查找 v2 中每个包装的单精度 (32-bit) 浮点元素的绝对值，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "from LLVM code",
        "suggest": "来自于 LLVM 的代码",
        "translate": ""
    },
    {
        "source": "Finds the absolute value of each packed single-precision (32-bit) floating-point element in v2, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "查找 v2 中每个包装的单精度 (32-bit) 浮点元素的绝对值，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Finds the absolute value of each packed double-precision (64-bit) floating-point element in v2, storing the results in dst.",
        "suggest": "查找 v2 中每个包装的双精度 (64-bit) 浮点元素的绝对值，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Finds the absolute value of each packed double-precision (64-bit) floating-point element in v2, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "查找 v2 中每个包装的双精度 (64-bit) 浮点元素的绝对值，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed 32-bit integers from a to dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的 32 位整数从 a 移动到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed 32-bit integers from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的 32 位整数从 a 移至 dst (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Move packed 64-bit integers from a to dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的 64 位整数从 a 移动到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed 64-bit integers from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的 64 位整数从 a 移到 dst (未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Move packed single-precision (32-bit) floating-point elements from a to dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的单精度 (32-bit) 浮点元素从 a 移动到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed single-precision (32-bit) floating-point elements from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的单精度 (32-bit) 浮点元素从 a 移到 dst (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Move packed double-precision (64-bit) floating-point elements from a to dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将包装的双精度 (64-bit) 浮点元素从 a 移动到 dst (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Move packed double-precision (64-bit) floating-point elements from a into dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将包装的双精度 (64-bit) 浮点元素从 a 移到 dst (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Add packed 32-bit integers in a and b, and store the results in dst.",
        "suggest": "在 a 和 b 中添加包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Add packed 32-bit integers in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Add packed 32-bit integers in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数添加到 a 和 b 中，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Add packed 64-bit integers in a and b, and store the results in dst.",
        "suggest": "在 a 和 b 中添加包装的 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Add packed 64-bit integers in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Add packed 64-bit integers in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.",
        "suggest": "在 a 和 b 中添加包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的单精度 (32-bit) 浮点元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Add packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.",
        "suggest": "在 a 和 b 中添加包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的双精度 (64-bit) 浮点元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Add packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中添加包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Subtract packed 32-bit integers in b from packed 32-bit integers in a, and store the results in dst.",
        "suggest": "从 a 中的包装 32 位整数中减去 b 中的包装 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Subtract packed 32-bit integers in b from packed 32-bit integers in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装 32 位整数中减去 b 中的包装 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Subtract packed 32-bit integers in b from packed 32-bit integers in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装 32 位整数中减去 b 中的包装 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Subtract packed 64-bit integers in b from packed 64-bit integers in a, and store the results in dst.",
        "suggest": "从 a 中的包装 64 位整数中减去 b 中的包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Subtract packed 64-bit integers in b from packed 64-bit integers in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装 64 位整数中减去 b 中的包装 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Subtract packed 64-bit integers in b from packed 64-bit integers in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装 64 位整数中减去 b 中的包装 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Subtract packed single-precision (32-bit) floating-point elements in b from packed single-precision (32-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "从 a 中的包装的单精度 (32-bit) 浮点元素中减去 b 中的包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Subtract packed single-precision (32-bit) floating-point elements in b from packed single-precision (32-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 b 中的包装后的单精度 (32-bit) 浮点元素减去 a 中的包装后的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Subtract packed single-precision (32-bit) floating-point elements in b from packed single-precision (32-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 b 中的包装后的单精度 (32-bit) 浮点元素减去 a 中的包装后的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Subtract packed double-precision (64-bit) floating-point elements in b from packed double-precision (64-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "从 a 中的包装的双精度 (64-bit) 浮点元素中减去 b 中的包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Subtract packed double-precision (64-bit) floating-point elements in b from packed double-precision (64-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装的双精度 (64-bit) 浮点元素中减去 b 中的包装的双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Subtract packed double-precision (64-bit) floating-point elements in b from packed double-precision (64-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中的包装的双精度 (64-bit) 浮点元素中减去 b 中的包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply the low signed 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst.",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低符号 32 位整数相乘，并将带符号的 64 位结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply the low signed 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低符号 32 位整数相乘，并使用写掩码 k 将有符号的 64 位结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply the low signed 32-bit integers from each packed 64-bit element in a and b, and store the signed 64-bit results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低位有符号 32 位整数相乘，并使用零掩码 k 将有符号的 64 位结果存储在 dst 中 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Multiply the packed 32-bit integers in a and b, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in dst.",
        "suggest": "将 a 和 b 中的包装的 32 位整数相乘，生成中间 64 位整数，并将中间整数的低 32 位存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply the packed 32-bit integers in a and b, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的 32 位整数相乘，生成中间 64 位整数，并使用写掩码 k 将中间整数的低 32 位存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply the packed 32-bit integers in a and b, producing intermediate 64-bit integers, and store the low 32 bits of the intermediate integers in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的 32 位整数相乘，生成中间 64 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将中间整数的低 32 位存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiplies elements in packed 64-bit integer vectors a and b together, storing the lower 64 bits of the result in dst.",
        "suggest": "将包装的 64 位整数 vectors a 和 b 中的元素相乘，将结果的低 64 位存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "This intrinsic generates a sequence of instructions, which may perform worse than a native instruction.",
        "suggest": "此内联函数生成指令序列，其执行可能比原生指令差。",
        "translate": ""
    },
    {
        "source": "Consider the performance impact of this intrinsic.",
        "suggest": "考虑此内联函数对性能的影响。",
        "translate": ""
    },
    {
        "source": "Multiplies elements in packed 64-bit integer vectors a and b together, storing the lower 64 bits of the result in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数 vectors a 和 b 中的元素相乘，使用写掩码 k 将结果的低 64 位存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply the low unsigned 32-bit integers from each packed 64-bit element in a and b, and store the unsigned 64-bit results in dst.",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低无符号 32 位整数相乘，并将无符号 64 位结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply the low unsigned 32-bit integers from each packed 64-bit element in a and b, and store the unsigned 64-bit results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低无符号 32 位整数相乘，并使用写掩码 k 将无符号 64 位结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply the low unsigned 32-bit integers from each packed 64-bit element in a and b, and store the unsigned 64-bit results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中每个包装的 64 位元素的低无符号 32 位整数相乘，并使用零掩码 k 将无符号 64 位结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "RM.",
        "suggest": "R M。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Divide packed single-precision (32-bit) floating-point elements in a by packed elements in b, and store the results in dst.",
        "suggest": "将 b 中的包装的单精度 (32-bit) 浮点元素除以 b 中的包装的元素，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Divide packed single-precision (32-bit) floating-point elements in a by packed elements in b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素除以 b 中的包装的元素，然后使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Divide packed single-precision (32-bit) floating-point elements in a by packed elements in b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素除以 b 中的包装元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Divide packed double-precision (64-bit) floating-point elements in a by packed elements in b, and store the results in dst.",
        "suggest": "将 b 中的包装的双精度 (64-bit) 浮点元素除以 b 中的包装的元素，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Divide packed double-precision (64-bit) floating-point elements in a by packed elements in b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素除以 b 中的包装的元素，然后使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Divide packed double-precision (64-bit) floating-point elements in a by packed elements in b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素除以 b 中的包装的元素，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号 32 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 32 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 32 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并使用零掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的单精度 (32-bit) 浮点元素，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的单精度 (32-bit) 浮点元素，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装单精度 (32-bit) 浮点元素，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的双精度 (64-bit) 浮点元素，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装的双精度 (64-bit) 浮点元素，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装的双精度 (64-bit) 浮点元素，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed maximum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed maximum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并使用写掩码 k 将包装的最大值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed maximum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最大值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号 32 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 32 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 32-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号 32 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed signed 64-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的带符号的 64 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的单精度 (32-bit) 浮点元素，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的单精度 (32-bit) 浮点元素，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed single-precision (32-bit) floating-point elements in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装单精度 (32-bit) 浮点元素，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的双精度 (64-bit) 浮点元素，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装的双精度 (64-bit) 浮点元素，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed double-precision (64-bit) floating-point elements in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中的包装的双精度 (64-bit) 浮点元素，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 32-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 32 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed minimum values in dst.",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed minimum values in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并使用写掩码 k 将包装的最小值存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compare packed unsigned 64-bit integers in a and b, and store packed minimum values in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "比较 a 和 b 中包装的无符号 64 位整数，并使用零掩码 k (在未设置相应的掩码位时将元素清零) 将包装的最小值存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的平方根，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的平方根，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的平方根，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的平方根，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的平方根，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compute the square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的平方根，并使用零掩码 k (将结果置零，当未设置相应的掩码位时将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmadd132ps or vfmadd213ps or vfmadd231ps",
        "suggest": "vfmadd132ps 或 vfmadd213ps 或 vfmadd231ps",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmadd132pd or vfmadd213pd or vfmadd231pd",
        "suggest": "vfmadd132pd 或 vfmadd213pd 或 vfmadd231pd",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从中间结果中减去 c 中的包装元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmsub132ps or vfmsub213ps or vfmsub231ps, clang generate vfmadd, gcc generate vfmsub",
        "suggest": "vfmsub132ps 或 vfmsub213ps 或 vfmsub231ps，clang 生成 vfmadd，gcc 生成 vfmsub",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，从中间结果中减去 c 中的包装的元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从中间结果中减去 c 中的包装元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从中间结果中减去 c 中的包装元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，从中间结果中减去 c 中的包装的元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmsub132pd or vfmsub213pd or vfmsub231pd.",
        "suggest": "vfmsub132pd 或 vfmsub213pd 或 vfmsub231pd。",
        "translate": ""
    },
    {
        "source": "clang fmadd, gcc fmsub",
        "suggest": "clang fmadd，gcc fmsub",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，从中间结果中减去 c 中的包装的元素，并使用写掩码 k 将结果存储在 dst 中 (如果未设置相应的掩码位，则从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，从中间结果中减去 c 中的包装的元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，从中间结果中减去 c 中的包装的元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，或者将 c to/from 中的包装的元素相加或相减，得到中间结果，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmaddsub132ps or vfmaddsub213ps or vfmaddsub231ps",
        "suggest": "vfmaddsub132ps 或 vfmaddsub213ps 或 vfmaddsub231ps",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的单精度 (32-bit) 浮点元素相乘，或者将 C to/from 中的包装后的元素相加或相减，得到中间结果，并使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位则从 a 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的单精度 (32-bit) 浮点元素相乘，或者将 C to/from 中的包装后的元素相加或相减，得到中间结果，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中分别乘以包装的单精度 (32-bit) 浮点元素，或者在 to/from 中将中间结果乘以包装的元素加减乘以 x，然后使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 c 复制元素) 放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst.",
        "suggest": "在 a 和 b 中乘以包装的双精度 (64-bit) 浮点元素，或者在中间结果中乘以 c to/from 的包装的元素，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmaddsub132pd or vfmaddsub213pd or vfmaddsub231pd",
        "suggest": "vfmaddsub132pd 或 vfmaddsub213pd 或 vfmaddsub231pd",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的双精度 (64-bit) 浮点元素相乘，或者将 C to/from 中的包装后的元素相加或相减，得到中间结果，并使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 a 中复制元素放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively add and subtract packed elements in c to/from the intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的双精度 (64-bit) 浮点元素相乘，或者将 C to/from 中的包装后的元素相加或减去，得到中间结果，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的单精度 (32-bit) 浮点元素相乘，或者将 c from/to 中的包装的元素相减并相加，得到中间结果，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmsubadd132ps or vfmsubadd213ps or vfmsubadd231ps",
        "suggest": "vfmsubadd132ps 或 vfmsubadd213ps 或 vfmsubadd231ps",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的单精度 (32-bit) 浮点元素相乘，或者将中间结果中的包装后的元素 from/to 减去并相加，然后使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 a 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，或者将 C from/to 中的包装元素相减并相加，得到中间结果，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "在 a 和 b 中乘以包装的单精度 (32-bit) 浮点元素，或者在中间结果中减去并在 c from/to 中包装的元素相乘，然后使用 writemask k 将结果存储在 dst 中 (当未使用相应的 mask 位时从 c 复制元素) 放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装后的双精度 (64-bit) 浮点元素相乘，或者将 c from/to 中的包装后的元素相减并相加，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfmsubadd132pd or vfmsubadd213pd or vfmsubadd231pd",
        "suggest": "vfmsubadd132pd 或 vfmsubadd213pd 或 vfmsubadd231pd",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的双精度 (64-bit) 浮点元素相乘，或者将中间结果中的包装后的元素 from/to 减去并相加，并使用 writemask k 将结果存储在 dst 中 (当未使用相应的掩码位时，元素将从 a 复制放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, alternatively subtract and add packed elements in c from/to the intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装后的双精度 (64-bit) 浮点元素相乘，或者将中间结果中的包装后的元素 from/to 减去并相加，并使用 writemask k 将结果存储在 dst 中 (当未使用相应的 mask 位时从 c 复制元素) 放)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfnmadd132ps or vfnmadd213ps or vfnmadd231ps",
        "suggest": "vfnmadd132ps 或 vfnmadd213ps 或 vfnmadd231ps",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 c 复制)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfnmadd132pd or vfnmadd213pd or vfnmadd231pd",
        "suggest": "vfnmadd132pd 或 vfnmadd213pd 或 vfnmadd231pd",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, add the negated intermediate result to packed elements in c, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，将取反的中间结果添加到 c 中的包装元素中，并使用 writemask k 将结果存储在 dst 中 (未设置相应的 mask 位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfnmsub132ps or vfnmsub213ps or vfnmsub231ps",
        "suggest": "vfnmsub132ps 或 vfnmsub213ps 或 vfnmsub231ps",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用 writemask k 将结果存储在 dst 中 (未设置相应的 mask 位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst.",
        "suggest": "将 a 和 b 中的包装的双精度 (64-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装的元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vfnmsub132pd or vfnmsub213pd or vfnmsub231pd",
        "suggest": "vfnmsub132pd 或 vfnmsub213pd 或 vfnmsub231pd",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Multiply packed double-precision (64-bit) floating-point elements in a and b, subtract packed elements in c from the negated intermediate result, and store the results in dst using writemask k (elements are copied from c when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装双精度 (64-bit) 浮点元素相乘，从取反的中间结果中减去 c 中的包装元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 c 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "The maximum relative error for this approximation is less than 2^-14.",
        "suggest": "该近似值的最大相对误差小于 2^-14。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed double-precision (64-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的近似倒数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的近似倒数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的近似倒数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数平方根，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数平方根，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的单精度 (32-bit) 浮点元素的近似倒数平方根，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的近似倒数平方根，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 中包装的双精度 (64-bit) 浮点元素的近似倒数平方根，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the approximate reciprocal square root of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 中的包装的双精度 (64-bit) 浮点元素的近似倒数平方根，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed single-precision (32-bit) floating-point element in a to a single-precision (32-bit) floating-point number representing the integer exponent, and store the results in dst.",
        "suggest": "将 a 中每个包装的单精度 (32-bit) 浮点元素的指数转换为表示整数指数的单精度 (32-bit) 浮点数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "This intrinsic essentially calculates floor(log2(x)) for each element.",
        "suggest": "本质上，此内联函数为每个元素计算 floor(log2(x))。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed single-precision (32-bit) floating-point element in a to a single-precision (32-bit) floating-point number representing the integer exponent, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的单精度 (32-bit) 浮点元素的指数转换为表示整数指数的单精度 (32-bit) 浮点数，并使用 writemask k 将结果存储在 dst 中 (当相应的 mask 时，元素从 src 复制位未设置)。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed single-precision (32-bit) floating-point element in a to a single-precision (32-bit) floating-point number representing the integer exponent, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的单精度 (32-bit) 浮点元素的指数转换为代表整数指数的单精度 (32-bit) 浮点数，并使用 zeromask k 将结果存储在 dst 中 (当相应的 mask 位为零时，元素被清零未设置)。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed double-precision (64-bit) floating-point element in a to a double-precision (64-bit) floating-point number representing the integer exponent, and store the results in dst.",
        "suggest": "将 a 中每个包装的双精度 (64-bit) 浮点元素的指数转换为代表整数指数的双精度 (64-bit) 浮点数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed double-precision (64-bit) floating-point element in a to a double-precision (64-bit) floating-point number representing the integer exponent, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的双精度 (64-bit) 浮点元素的指数转换为代表整数指数的双精度 (64-bit) 浮点数，并使用 writemask k 将结果存储在 dst 中 (当相应的 mask 时，元素从 src 复制位未设置)。",
        "translate": ""
    },
    {
        "source": "Convert the exponent of each packed double-precision (64-bit) floating-point element in a to a double-precision (64-bit) floating-point number representing the integer exponent, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的双精度 (64-bit) 浮点元素的指数转换为代表整数指数的双精度 (64-bit) 浮点数，并使用 zeromask k 将结果存储在 dst 中 (当相应的 mask 位为零时，元素被清零未设置)。",
        "translate": ""
    },
    {
        "source": "Round packed single-precision (32-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst.",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素四舍五入到 imm8 指定的小数位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rounding is done according to the imm8\\[2:0\\] parameter, which can be one of:",
        "suggest": "根据 imm8\\[2: 0\\] 参数进行舍入，该参数可以是以下之一:",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_TO_NEAREST_INT // round to nearest",
        "suggest": "_MM_FROUND_TO_NEAREST_INT // 舍入到最接近的值",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_TO_NEG_INF     // round down",
        "suggest": "_MM_FROUND_TO_NEG_INF     // 向下取整",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_TO_POS_INF     // round up",
        "suggest": "_MM_FROUND_TO_POS_INF     // 向上舍入",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_TO_ZERO        // truncate",
        "suggest": "_MM_FROUND_TO_ZERO        // 截断",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_CUR_DIRECTION  // use MXCSR.RC;",
        "suggest": "_MM_FROUND_CUR_DIRECTION  // 使用 MXCSR.RC;",
        "translate": ""
    },
    {
        "source": "see _MM_SET_ROUNDING_MODE",
        "suggest": "请参见 _MM_SET_ROUNDING_MODE",
        "translate": ""
    },
    {
        "source": "Round packed single-precision (32-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素四舍五入到 imm8 指定的小数位数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Round packed single-precision (32-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素四舍五入到 imm8 指定的分数位数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Round packed double-precision (64-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst.",
        "suggest": "将 x 中的包装的双精度 (64-bit) 浮点元素四舍五入到 imm8 指定的分数位数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Round packed double-precision (64-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素四舍五入到 imm8 指定的分数位数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Round packed double-precision (64-bit) floating-point elements in a to the number of fraction bits specified by imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 x 中的包装双精度 (64-bit) 浮点元素四舍五入到 imm8 指定的分数位数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Scale the packed single-precision (32-bit) floating-point elements in a using values from b, and store the results in dst.",
        "suggest": "使用 b 中的值缩放 a 中包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Scale the packed single-precision (32-bit) floating-point elements in a using values from b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的值缩放 a 中包装的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Scale the packed single-precision (32-bit) floating-point elements in a using values from b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的值缩放 a 中包装的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Scale the packed double-precision (64-bit) floating-point elements in a using values from b, and store the results in dst.",
        "suggest": "使用 b 中的值缩放 a 中包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Scale the packed double-precision (64-bit) floating-point elements in a using values from b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的值缩放 a 中包装的双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Scale the packed double-precision (64-bit) floating-point elements in a using values from b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的值缩放 a 中包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Fix up packed single-precision (32-bit) floating-point elements in a and b using packed 32-bit integers in c, and store the results in dst.",
        "suggest": "使用 c 中的包装 32 位整数修复 a 和 b 中包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "imm8 is used to set the required flags reporting.",
        "suggest": "imm8 用于设置所需的标志报告。",
        "translate": ""
    },
    {
        "source": "Fix up packed single-precision (32-bit) floating-point elements in a and b using packed 32-bit integers in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用 c 中的包装 32 位整数修复 a 和 b 中的包装单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Fix up packed single-precision (32-bit) floating-point elements in a and b using packed 32-bit integers in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 c 中的包装 32 位整数修复 a 和 b 中的包装单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Fix up packed double-precision (64-bit) floating-point elements in a and b using packed 64-bit integers in c, and store the results in dst.",
        "suggest": "使用 c 中的包装的 64 位整数修复 a 和 b 中的包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Fix up packed double-precision (64-bit) floating-point elements in a and b using packed 64-bit integers in c, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用 c 中的包装 64 位整数修复 a 和 b 中的包装双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (未设置相应的 mask 位时从 a 复制元素)。",
        "translate": ""
    },
    {
        "source": "Fix up packed double-precision (64-bit) floating-point elements in a and b using packed 64-bit integers in c, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 c 中的包装 64 位整数修复 a 和 b 中的包装双精度 (64-bit) 浮点元素，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Bitwise ternary logic that provides the capability to implement any three-operand binary function;",
        "suggest": "提供执行任何三操作数二进制函数的功能的按位三元逻辑;",
        "translate": ""
    },
    {
        "source": "the specific binary function is specified by value in imm8.",
        "suggest": "特定的二进制函数由 imm8 中的值指定。",
        "translate": ""
    },
    {
        "source": "For each bit in each packed 32-bit integer, the corresponding bit from a, b, and c are used to form a 3 bit index into imm8, and the value at that bit in imm8 is written to the corresponding bit in dst.",
        "suggest": "对于每个包装的 32 位整数中的每个位，来自 a，b 和 c 的相应位用于形成到 imm8 的 3 位索引，并且将 imm8 中该位的值写入 dst 中的相应位。",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed single-precision (32-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素的尾数标准化，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "This intrinsic essentially calculates ±(2^k)*|x.significand|, where k depends on the interval range defined by interv and the sign depends on sc and the source sign.",
        "suggest": "此内联函数本质上计算 ± (2 ^ k) * | x.significand |，其中 k 取决于由 interv 定义的间隔范围，而符号取决于 sc 和源符号。",
        "translate": ""
    },
    {
        "source": "The mantissa is normalized to the interval specified by interv, which can take the following values:",
        "suggest": "尾数被标准化为由 interv 指定的间隔，该间隔可以采用以下值:",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "标准化 a 中包装的单精度 (32-bit) 浮点元素的尾数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "The sign is determined by sc which can take the following values:",
        "suggest": "该符号由 sc 确定，可以采用以下值:",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed single-precision (32-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素的尾数规格化，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed double-precision (64-bit) floating-point elements in a, and store the results in dst.",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素的尾数规格化，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素的尾数标准化，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Normalize the mantissas of packed double-precision (64-bit) floating-point elements in a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素的尾数标准化，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Rounding is done according to the rounding\\[3:0\\] parameter, which can be one of:",
        "suggest": "根据 rounding\\[3: 0\\] 参数进行舍入，该参数可以是以下之一:",
        "translate": ""
    },
    {
        "source": "(_MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) // round to nearest, and suppress exceptions",
        "suggest": "(_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) // 舍入到最接近的值，并抑制异常",
        "translate": ""
    },
    {
        "source": "(_MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)     // round down, and suppress exceptions",
        "suggest": "(_MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)     // 向下取整并抑制异常",
        "translate": ""
    },
    {
        "source": "(_MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)     // round up, and suppress exceptions",
        "suggest": "(_MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)     // 向上取整并抑制异常",
        "translate": ""
    },
    {
        "source": "(_MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)        // truncate, and suppress exceptions",
        "suggest": "(_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)        // 截断并抑制异常",
        "translate": ""
    },
    {
        "source": "_MM_FROUND_CUR_DIRECTION // use MXCSR.RC;",
        "suggest": "_MM_FROUND_CUR_DIRECTION // 使用 MXCSR.RC;",
        "translate": ""
    },
    {
        "source": "Divide packed double-precision (64-bit) floating-point elements in a by packed elements in b, =and store the results in dst.",
        "suggest": "将 b 中的包装的双精度 (64-bit) 浮点元素除以 b 中的包装的元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Multiply packed single-precision (32-bit) floating-point elements in a and b, add the intermediate result to packed elements in c, and store the results in a using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 中的包装单精度 (32-bit) 浮点元素相乘，将中间结果添加到 c 中的包装元素中，并将结果存储在使用零掩码 k 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "vfmsub132ps or vfmsub213ps or vfmsub231ps, clang generates vfmadd, gcc generates vfmsub",
        "suggest": "vfmsub132ps 或 vfmsub213ps 或 vfmsub231ps，clang 生成 vfmadd，gcc 生成 vfmsub",
        "translate": ""
    },
    {
        "source": "Exceptions can be suppressed by passing _MM_FROUND_NO_EXC in the sae parameter.",
        "suggest": "可以通过在 sae 参数中传递 _MM_FROUND_NO_EXC 来抑制异常。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "将包装的单精度 (32-bit) 浮点元素转换为包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素转换为包装的 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素转换为包装的 32 位整数，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst.",
        "suggest": "将包装的单精度 (32-bit) 浮点元素转换为包装的无符号 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素转换为包装的无符号 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素转换为包装的无符号 32 位整数，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装的单精度 (32-bit) 浮点元素转换为包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为包装的双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of packed single-precision (32-bit) floating-point elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst.",
        "suggest": "对 v2 中包装的单精度 (32-bit) 浮点元素的下半部分到包装的双精度 (64-bit) 浮点元素的下半部分进行逐元素转换，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of packed single-precision (32-bit) floating-point elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 v2 中包装的单精度 (32-bit) 浮点元素的下半部分转换为包装的双精度 (64-bit) 浮点元素的下半部分进行逐元素转换，并使用写掩码 k 将结果存储在 dst 中 (当相应的屏蔽位未设置)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装的双精度 (64-bit) 浮点元素转换为包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为包装的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为包装的单精度 (32-bit) 浮点元素，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Performs an element-by-element conversion of packed double-precision (64-bit) floating-point elements in v2 to single-precision (32-bit) floating-point elements and stores them in dst.",
        "suggest": "将 v2 中的包装的双精度 (64-bit) 浮点元素执行逐元素转换为单精度 (32-bit) 浮点元素并将其存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "The elements are stored in the lower half of the results vector, while the remaining upper half locations are set to 0.",
        "suggest": "元素存储在结果 vector 的下半部分中，而其余的上半部分位置设置为 0。",
        "translate": ""
    },
    {
        "source": "Performs an element-by-element conversion of packed double-precision (64-bit) floating-point elements in v2 to single-precision (32-bit) floating-point elements and stores them in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 v2 中的包装的双精度 (64-bit) 浮点元素转换为单精度 (32-bit) 浮点元素，将其逐个元素转换，并使用 writemask k 将它们存储在 dst 中 (如果没有相应的 mask 位，则从 src 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "使用符号将包装的 8 位整数从 a 扩展到包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "符号将包装的 8 位整数从 a 扩展为包装的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 8 位整数从 a 扩展为包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in the low 8 bytes of a to packed 64-bit integers, and store the results in dst.",
        "suggest": "符号将 a 的低 8 个字节中的包装 8 位整数扩展为包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in the low 8 bytes of a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "符号将 a 的低 8 个字节中的包装 8 位整数扩展为包装 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 8-bit integers in the low 8 bytes of a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "符号将 a 的低 8 个字节中的包装 8 位整数扩展为包装 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 8 位整数零扩展为包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in the low 8 byte sof a to packed 64-bit integers, and store the results in dst.",
        "suggest": "将低 8 字节 sof 中的包装无符号 8 位整数零扩展到包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in the low 8 bytes of a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 的低 8 个字节中的包装无符号 8 位整数零扩展为包装 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 8-bit integers in the low 8 bytes of a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 的低 8 个字节中的包装无符号 8 位整数零扩展为包装 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "符号将包装的 16 位整数从 a 扩展为包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "符号将包装后的 16 位整数从 a 扩展为包装后的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "符号将包装的 16 位整数从 a 扩展为包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 64-bit integers, and store the results in dst.",
        "suggest": "使用符号将包装的 16 位整数从 a 扩展到包装的 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 16 位整数从 a 扩展为包装的 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 16-bit integers in a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 16 位整数从 a 扩展为包装的 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 64-bit integers, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 16-bit integers in a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 16 位整数零扩展为包装 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 32-bit integers in a to packed 64-bit integers, and store the results in dst.",
        "suggest": "使用符号将包装的 32 位整数从 a 扩展到包装的 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 32-bit integers in a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 32 位整数从 a 扩展为包装的 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Sign extend packed 32-bit integers in a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用符号将包装的 32 位整数从 a 扩展为包装的 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 32-bit integers in a to packed 64-bit integers, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 32 位整数零扩展为包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 32-bit integers in a to packed 64-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数零扩展为包装 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Zero extend packed unsigned 32-bit integers in a to packed 64-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数零扩展为包装 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装后的带符号的 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并使用零掩码 k (未设置相应的掩码位时将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装后的带符号的 32 位整数转换为包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为包装的双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为包装的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst.",
        "suggest": "将 A 中的包装的无符号 32 位整数转换为包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为包装双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed double-precision (64-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为包装的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of packed 32-bit integer elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst.",
        "suggest": "将 v2 中包装的 32 位整数整数元素的下半部分转换为包装的双精度 (64-bit) 浮点元素，将元素进行逐元素转换，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of packed 32-bit integer elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 v2 中包装的 32 位整数整数元素的下半部分转换为包装的双精度 (64-bit) 浮点元素，进行逐元素转换，并使用 writemask k 将结果存储在 dst 中 (当相应的 mask 位为 src 时，会复制这些元素未设置)。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of packed 32-bit unsigned integer elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst.",
        "suggest": "将 v2 中包装的 32 位无符号整数整数元素的下半部分转换为包装的双精度 (64-bit) 浮点元素，将每个元素进行逐元素转换，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Performs element-by-element conversion of the lower half of 32-bit unsigned integer elements in v2 to packed double-precision (64-bit) floating-point elements, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 v2 中 32 位无符号整数元素的下半部分转换为包装的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中，使用 writemask k (当相应的 mask 位为 src 时，复制这些元素) 未设置)。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 16-bit integers with truncation, and store the results in dst.",
        "suggest": "将带有 a 的包装的 32 位整数转换为带截断的包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 16-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 32 位整数转换为带截断的包装的 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 16-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 32 位整数转换为带截断的包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 8-bit integers with truncation, and store the results in dst.",
        "suggest": "将带有 a 的包装的 32 位整数转换为带有截断的包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 32 位整数转换为带截断的包装的 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 32-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 32 位整数转换为带有截断的包装的 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 32-bit integers with truncation, and store the results in dst.",
        "suggest": "将带有 a 的包装的 64 位整数转换为带有截断的包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的 64 位整数转换为带截断的 32 位包装的整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的 64 位整数转换为带截断的 32 位包装的整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 16-bit integers with truncation, and store the results in dst.",
        "suggest": "将带有 a 的包装的 64 位整数转换为带有截断的包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 16-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的 64 位整数转换为带截断的 16 位包装的整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 16-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 64 位整数转换为带截断的 16 位包装的整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 8-bit integers with truncation, and store the results in dst.",
        "suggest": "将带有 a 的包装的 64 位整数转换为带有截断的包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的 64 位整数转换为带有截断的包装的 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed 64-bit integers in a to packed 8-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的 64 位整数转换为带截断的 8 位包装的整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed 16-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将 A 中的包装有符号 32 位整数转换为带符号饱和的包装 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed 16-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 A 中的包装有符号 32 位整数转换为带符号饱和的包装 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将 A 中的包装有符号 32 位整数转换为带符号饱和的包装 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为带符号饱和的包装 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 32-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 32 位整数转换为带符号饱和的包装 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 32-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将包装的带符号的 64 位整数转换为带符号饱和的包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 32-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 64 位整数转换为带符号饱和的包装的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 32-bit integers with signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 64 位整数转换为带符号饱和的包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 16-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将包装的带符号的 64 位整数转换为带符号饱和的包装的 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 16-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 64 位整数转换为带符号饱和的包装 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 16-bit integers with signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 64 位整数转换为带符号饱和的包装的 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst.",
        "suggest": "将包装的带符号的 64 位整数转换为带符号饱和的包装的 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装带符号的 64 位整数转换为带符号饱和的包装 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed signed 64-bit integers in a to packed 8-bit integers with signed saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装有符号 64 位整数转换为带符号饱和的包装 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 A 中的包装无符号 32 位整数转换为具有无符号饱和度的包装无符号 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为具有无符号饱和的包装无符号 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为具有无符号饱和的包装无符号 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 32 位整数转换为具有无符号饱和的包装无符号 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 32-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 32 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 32-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 A 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 32-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 32-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 16 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 16 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 16-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 16 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst.",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 8 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed unsigned 64-bit integers in a to packed unsigned 8-bit integers with unsigned saturation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装无符号 64 位整数转换为具有无符号饱和的包装无符号 8 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst.",
        "suggest": "将包装的双精度 (64-bit) 浮点元素转换为包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装双精度 (64-bit) 浮点元素转换为包装的 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装双精度 (64-bit) 浮点元素转换为包装的 32 位整数，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst.",
        "suggest": "将包装的双精度 (64-bit) 浮点元素转换为包装的无符号 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装双精度 (64-bit) 浮点元素转换为包装的无符号 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装双精度 (64-bit) 浮点元素转换为包装的无符号 32 位整数，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed half-precision (16-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装的单精度 (32-bit) 浮点元素转换为包装的半精度 (16-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed half-precision (16-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为包装的半精度 (16-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed half-precision (16-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为包装的半精度 (16-bit) 浮点元素，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed half-precision (16-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst.",
        "suggest": "将包装的半精度 (16-bit) 浮点元素转换为包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed half-precision (16-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装后的半精度 (16-bit) 浮点元素转换为包装后的单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed half-precision (16-bit) floating-point elements in a to packed single-precision (32-bit) floating-point elements, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装后的半精度 (16-bit) 浮点元素转换为包装后的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst.",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为带截断的包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为带截断的包装的 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将带有 a 的包装的单精度 (32-bit) 浮点元素转换为带有截断的包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst.",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的单精度 (32-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed single-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装单精度 (32-bit) 浮点元素转换为带有截断的包装无符号 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst.",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的 32 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst.",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (32-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (32-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (32-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed unsigned 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的无符号 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Convert packed double-precision (64-bit) floating-point elements in a to packed 32-bit integers with truncation, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中的包装的双精度 (64-bit) 浮点元素转换为带截断的包装的 32 位整数，并使用 zeromask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Returns vector of type `__m512d` with all elements set to zero.",
        "suggest": "返回 `__m512d` 类型的 vector，所有元素均设置为零。",
        "translate": ""
    },
    {
        "source": "is a properly initialized __m512d",
        "suggest": "是正确初始化的 __m512d",
        "translate": ""
    },
    {
        "source": "is a properly initialized __m512",
        "suggest": "是正确初始化的 __m512",
        "translate": ""
    },
    {
        "source": "Return vector of type __m512 with all elements set to zero.",
        "suggest": "返回 __m512 类型的 vector，所有元素均设置为零。",
        "translate": ""
    },
    {
        "source": "Returns vector of type `__m512i` with all elements set to zero.",
        "suggest": "返回 `__m512i` 类型的 vector，所有元素均设置为零。",
        "translate": ""
    },
    {
        "source": "is a properly initialized __m512i",
        "suggest": "是正确初始化的 __m512i",
        "translate": ""
    },
    {
        "source": "Return vector of type __m512i with all elements set to zero.",
        "suggest": "返回类型为 __m512i 的 vector，所有元素均设置为零。",
        "translate": ""
    },
    {
        "source": "Sets packed 32-bit integers in `dst` with the supplied values in reverse order.",
        "suggest": "在 `dst` 中设置包装的 32 位整数，并以相反的顺序提供所提供的值。",
        "translate": ""
    },
    {
        "source": "Set packed 8-bit integers in dst with the supplied values.",
        "suggest": "使用提供的值在 dst 中设置包装的 8 位整数。",
        "translate": ""
    },
    {
        "source": "Set packed 16-bit integers in dst with the supplied values.",
        "suggest": "使用提供的值在 dst 中设置包装的 16 位整数。",
        "translate": ""
    },
    {
        "source": "Set packed 32-bit integers in dst with the repeated 4 element sequence.",
        "suggest": "使用重复的 4 个元素序列在 dst 中设置包装的 32 位整数。",
        "translate": ""
    },
    {
        "source": "Set packed single-precision (32-bit) floating-point elements in dst with the repeated 4 element sequence.",
        "suggest": "使用重复的 4 个元素序列在 dst 中设置包装的单精度 (32-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "Set packed double-precision (64-bit) floating-point elements in dst with the repeated 4 element sequence.",
        "suggest": "使用重复的 4 个元素序列在 dst 中设置包装的双精度 (64-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "Set packed 32-bit integers in dst with the repeated 4 element sequence in reverse order.",
        "suggest": "在 dst 中设置包装的 32 位整数，并以相反的顺序重复 4 个元素序列。",
        "translate": ""
    },
    {
        "source": "Set packed single-precision (32-bit) floating-point elements in dst with the repeated 4 element sequence in reverse order.",
        "suggest": "在 dst 中设置包装的单精度 (32-bit) 浮点元素，并以相反的顺序重复 4 个元素。",
        "translate": ""
    },
    {
        "source": "Set packed double-precision (64-bit) floating-point elements in dst with the repeated 4 element sequence in reverse order.",
        "suggest": "在 dst 中设置包装的双精度 (64-bit) 浮点元素，并以相反的顺序重复 4 个元素序列。",
        "translate": ""
    },
    {
        "source": "Set packed 64-bit integers in dst with the supplied values.",
        "suggest": "使用提供的值在 dst 中设置包装的 64 位整数。",
        "translate": ""
    },
    {
        "source": "Set packed 64-bit integers in dst with the supplied values in reverse order.",
        "suggest": "在 dst 中设置包装的 64 位整数，并以相反的顺序提供所提供的值。",
        "translate": ""
    },
    {
        "source": "Gather double-precision (64-bit) floating-point elements from memory using 32-bit indices.",
        "suggest": "使用 32 位索引从内存中收集双精度 (64-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "64-bit elements are loaded from addresses starting at base_addr and offset by each 32-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "从 base_addr 开始的地址加载 64 位元素，并由 vindex 中的每个 32 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Gathered elements are merged into dst.",
        "suggest": "收集的元素将合并到 dst 中。",
        "translate": ""
    },
    {
        "source": "scale should be 1, 2, 4 or 8.",
        "suggest": "小数位数应为 1、2、4 或 8。",
        "translate": ""
    },
    {
        "source": "Gather double-precision (64-bit) floating-point elements from memory using 64-bit indices.",
        "suggest": "使用 64 位索引从内存中收集双精度 (64-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "64-bit elements are loaded from addresses starting at base_addr and offset by each 64-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "从 base_addr 开始的地址加载 64 位元素，并由 vindex 中的每个 64 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Gather single-precision (32-bit) floating-point elements from memory using 64-bit indices.",
        "suggest": "使用 64 位索引从内存中收集单精度 (32-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "32-bit elements are loaded from addresses starting at base_addr and offset by each 64-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "从 base_addr 开始的地址加载 32 位元素，并由 vindex 中的每个 64 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Gather single-precision (32-bit) floating-point elements from memory using 32-bit indices.",
        "suggest": "使用 32 位索引从内存中收集单精度 (32-bit) 浮点元素。",
        "translate": ""
    },
    {
        "source": "32-bit elements are loaded from addresses starting at base_addr and offset by each 32-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "从 base_addr 开始的地址加载 32 位元素，并由 vindex 中的每个 32 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Gather 32-bit integers from memory using 32-bit indices.",
        "suggest": "使用 32 位索引从内存中收集 32 位整数。",
        "translate": ""
    },
    {
        "source": "Gather 64-bit integers from memory using 32-bit indices.",
        "suggest": "使用 32 位索引从内存中收集 64 位整数。",
        "translate": ""
    },
    {
        "source": "Gather 64-bit integers from memory using 64-bit indices.",
        "suggest": "使用 64 位索引从内存中收集 64 位整数。",
        "translate": ""
    },
    {
        "source": "Gather 32-bit integers from memory using 64-bit indices.",
        "suggest": "使用 64 位索引从内存中收集 32 位整数。",
        "translate": ""
    },
    {
        "source": "Scatter double-precision (64-bit) floating-point elements from a into memory using 32-bit indices.",
        "suggest": "使用 32 位索引将双精度 (64-bit) 浮点元素从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "64-bit elements are stored at addresses starting at base_addr and offset by each 32-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "64 位元素存储在从 base_addr 开始的地址处，并由 vindex 中的每个 32 位元素偏移 (每个索引都按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Scatter double-precision (64-bit) floating-point elements from a into memory using 64-bit indices.",
        "suggest": "使用 64 位索引将双精度 (64-bit) 浮点元素从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "64-bit elements are stored at addresses starting at base_addr and offset by each 64-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "64 位元素存储在从 base_addr 开始的地址处，并由 vindex 中的每个 64 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Scatter single-precision (32-bit) floating-point elements from a into memory using 32-bit indices.",
        "suggest": "使用 32 位索引将单精度 (32-bit) 浮点元素从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "32-bit elements are stored at addresses starting at base_addr and offset by each 32-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "32 位元素存储在从 base_addr 开始的地址处，并由 vindex 中的每个 32 位元素偏移 (每个索引都按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Scatter single-precision (32-bit) floating-point elements from a into memory using 64-bit indices.",
        "suggest": "使用 64 位索引将单精度 (32-bit) 浮点元素从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "32-bit elements are stored at addresses starting at base_addr and offset by each 64-bit element in vindex (each index is scaled by the factor in scale) subject to mask k (elements are not stored when the corresponding mask bit is not set).",
        "suggest": "32 位元素存储在从 base_addr 开始的地址处，并由 vindex 中的每个 64 位元素偏移 (每个索引均按比例因子进行缩放)，且受掩码 k 限制 (未设置相应的掩码位时不存储元素)。",
        "translate": ""
    },
    {
        "source": "Scatter 64-bit integers from a into memory using 32-bit indices.",
        "suggest": "使用 32 位索引将 64 位整数从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "Scatter 64-bit integers from a into memory using 64-bit indices.",
        "suggest": "使用 64 位索引将 64 位整数从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "Scatter 32-bit integers from a into memory using 32-bit indices.",
        "suggest": "使用 32 位索引将 32 位整数从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "Scatter 32-bit integers from a into memory using 64-bit indices.",
        "suggest": "使用 64 位索引将 32 位整数从 a 分散到内存中。",
        "translate": ""
    },
    {
        "source": "32-bit elements are stored at addresses starting at base_addr and offset by each 64-bit element in vindex (each index is scaled by the factor in scale).",
        "suggest": "32 位元素存储在从 base_addr 开始的地址处，并由 vindex 中的每个 64 位元素偏移 (每个索引均按比例因子进行缩放)。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active 32-bit integers in a (those with their respective bit set in writemask k) to dst, and pass through the remaining elements from src.",
        "suggest": "将活动的 32 位整数连续存储在 dst 中 (它们各自的位在写掩码 k 中设置的整数) 到 dst，并通过 src 中的其余元素。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active 32-bit integers in a (those with their respective bit set in zeromask k) to dst, and set the remaining elements to zero.",
        "suggest": "将活动的 32 位整数连续存储在 dst 中 (它们各自的位设置在零掩码 k 中的整数) 为 dst，并将其余元素设置为零。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active 64-bit integers in a (those with their respective bit set in writemask k) to dst, and pass through the remaining elements from src.",
        "suggest": "将活动的 64 位整数连续存储在 dst 中 (它们各自的位在写掩码 k 中设置的整数) 到 dst，并通过 src 中的其余元素。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active 64-bit integers in a (those with their respective bit set in zeromask k) to dst, and set the remaining elements to zero.",
        "suggest": "将活动的 64 位整数连续存储在 dst 中 (它们各自的位设置在零掩码 k 中的整数) 为 dst，并将其余元素设置为零。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active single-precision (32-bit) floating-point elements in a (those with their respective bit set in writemask k) to dst, and pass through the remaining elements from src.",
        "suggest": "将活动的单精度 (32-bit) 浮点元素连续存储在 dst 中 (将其各自的位设置在写掩码 k 中的那些元素中) 存储到 dst，并通过 src 中的其余元素。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active single-precision (32-bit) floating-point elements in a (those with their respective bit set in zeromask k) to dst, and set the remaining elements to zero.",
        "suggest": "将活动的单精度 (32-bit) 浮点元素连续存储在 dst 中 (它们各自的位设置在零掩码 k 中的那些元素) 为 dst，并将其余元素设置为零。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active double-precision (64-bit) floating-point elements in a (those with their respective bit set in writemask k) to dst, and pass through the remaining elements from src.",
        "suggest": "将活动的双精度 (64-bit) 浮点元素连续存储在 dst 中 (它们各自的位在写掩码 k 中设置) 到 dst，并通过 src 中的其余元素。",
        "translate": ""
    },
    {
        "source": "Contiguously store the active double-precision (64-bit) floating-point elements in a (those with their respective bit set in zeromask k) to dst, and set the remaining elements to zero.",
        "suggest": "将活动的双精度 (64-bit) 浮点元素连续存储在 dst 中 (它们各自的位设置在零掩码 k 中的那些元素) 为 dst，并将其余元素设置为零。",
        "translate": ""
    },
    {
        "source": "Load contiguous active 32-bit integers from a (those with their respective bit set in mask k), and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 加载连续的有效 32 位整数 (它们各自的位在掩码 k 中设置)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active 32-bit integers from a (those with their respective bit set in mask k), and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中加载连续的有效 32 位整数 (它们各自的位在掩码 k 中设置)，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active 64-bit integers from a (those with their respective bit set in mask k), and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 加载连续的有效 64 位整数 (它们各自的位在掩码 k 中设置)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active 64-bit integers from a (those with their respective bit set in mask k), and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中加载连续的有效 64 位整数 (它们各自的位在掩码 k 中设置)，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active single-precision (32-bit) floating-point elements from a (those with their respective bit set in mask k), and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 中加载连续的活动单精度 (32-bit) 浮点元素 (其各自的位在掩码 k 中设置)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active single-precision (32-bit) floating-point elements from a (those with their respective bit set in mask k), and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中加载连续的活动单精度 (32-bit) 浮点元素 (其各自的位在掩码 k 中设置)，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active double-precision (64-bit) floating-point elements from a (those with their respective bit set in mask k), and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 加载连续的活动双精度 (64-bit) 浮点元素 (其各自的位在掩码 k 中设置)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Load contiguous active double-precision (64-bit) floating-point elements from a (those with their respective bit set in mask k), and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 中加载连续的活动双精度 (64-bit) 浮点元素 (其各自的位在掩码 k 中设置)，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst.",
        "suggest": "将 X 中每个包装的 32 位整数中的位向左旋转 imm8 中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将每个包装的 32 位整数中的位向左旋转 imm8 中指定的位数，然后使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将每个包装的 32 位整数中的位向左旋转 imm8 中指定的位数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst.",
        "suggest": "将 X 中每个包装的 32 位整数中的位向右旋转 imm8 中指定的位数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 X 中每个包装的 32 位整数中的位向右旋转 imm8 中指定的位数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 X 中每个包装的 32 位整数中的位向右旋转 imm8 中指定的位数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst.",
        "suggest": "将 X 中每个包装的 64 位整数中的位向左旋转 imm8 中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将每个包装的 64 位整数中的位向左旋转 imm8 中指定的位数，然后使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将每个包装的 64 位整数中的位向左旋转 imm8 中指定的位数，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst.",
        "suggest": "将 X 中每个包装的 64 位整数中的位向右旋转 imm8 中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 X 中每个包装的 64 位整数中的位向右旋转 imm8 中指定的位数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 X 中每个包装的 64 位整数中的位向右旋转 imm8 中指定的位数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 32 位整数左移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数左移 imm8，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数左移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 32 位整数右移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数右移 imm8，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数右移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 64 位整数左移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数向左移动 imm8，同时向零移动，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数左移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 64 位整数右移 imm8，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数右移 imm8，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数右移 imm8，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by count while shifting in zeros, and store the results in dst.",
        "suggest": "将包装的 32 位整数左移计数，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数左移计数，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数左移计数，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in zeros, and store the results in dst.",
        "suggest": "将计数包装的 32 位整数右移，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数右移，同时移零，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将移位的 32 位整数右移，同时移零，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by count while shifting in zeros, and store the results in dst.",
        "suggest": "将填充的 64 位整数左移计数，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数左移计数，同时将零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将填充的 64 位整数左移计数，同时将零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by count while shifting in zeros, and store the results in dst.",
        "suggest": "按计数右移包装的 64 位整数，同时将零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数右移，同时移零，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in sign bits, and store the results in dst.",
        "suggest": "在移入符号位的同时按计数右移包装的 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在移动符号位的同时右移计数包装的 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在移动符号位的同时右移计数包装的 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by count while shifting in sign bits, and store the results in dst.",
        "suggest": "在移动符号位的同时按计数右移包装的 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在移动符号位的同时右移计数包装的 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在移动符号位的同时右移计数包装的 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst.",
        "suggest": "将包装的 32 位整数右移 imm8，同时将符号位移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数右移 imm8，同时将符号位移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 32 位整数右移 imm8，同时将符号位移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst.",
        "suggest": "将包装的 64 位整数右移 imm8，同时将符号位移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数右移 imm8，同时将符号位移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by imm8 while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将包装的 64 位整数右移 imm8，同时将符号位移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst.",
        "suggest": "在将符号位移位的同时，将已包装的 32 位整数右移由 count 中相应元素指定的数量，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在将符号位移位的同时，将已包装的 32 位整数向右移动计数中相应元素指定的数量，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在将符号位移位的同时，将已包装的 32 位整数向右移动计数中相应元素指定的数量，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst.",
        "suggest": "将移位的 64 位整数向右移动计数中相应元素指定的数量，同时移入符号位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在移入符号位的同时，将包装的 64 位整数向右移动计数中相应元素指定的数量，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in sign bits, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在移入符号位的同时，将包装的 64 位整数右移由 count 中相应元素指定的数量，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst.",
        "suggest": "将 a 中每个包装的 32 位整数中的位向左旋转 b 的相应元素中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 32 位整数中的位向左旋转 b 对应元素 b 中指定的位数，并使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 src 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 32 位整数中的位向左旋转 b 的相应元素中指定的位数，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst.",
        "suggest": "将 a 中每个包装的 32 位整数中的位向右旋转 b 的相应元素中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 32 位整数中的位向右旋转 b 的对应元素中指定的位数，然后使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 src 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 32-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 32 位整数中的位向右旋转 b 的相应元素中指定的位数，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst.",
        "suggest": "将 a 中每个包装的 64 位整数中的位向左旋转 b 的相应元素中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 64 位整数中的位向左旋转 b 的对应元素中指定的位数，并使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 src 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the left by the number of bits specified in the corresponding element of b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 64 位整数中的位向左旋转 b 的相应元素中指定的位数，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst.",
        "suggest": "将 a 中每个包装的 64 位整数中的位向右旋转 b 的相应元素中指定的位数，然后将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 64 位整数中的位向右旋转 b 的相应元素中指定的位数，并使用 writemask k 将结果存储在 dst 中 (如果没有使用相应的 mask 位，则从 src 复制元素放)。",
        "translate": ""
    },
    {
        "source": "Rotate the bits in each packed 64-bit integer in a to the right by the number of bits specified in the corresponding element of b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 中每个包装的 64 位整数中的位向右旋转 b 的相应元素中指定的位数，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零) )。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "将填充的 32 位整数向左移动 count 中相应元素指定的数量，同时向零移动，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将填充的 32 位整数向左移动计数中相应元素指定的数量，同时将其移位为零，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在将移位的 32 位整数左移零时，将其对应计数指定的数量左移，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "向右移动已包装的 32 位整数，偏移量为计数中相应元素指定的数量，同时向零移动，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "向右移动包装的 32 位整数整数 (由 count 中相应元素指定的数量)，同时向零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 32-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "向右移动已包装的 32 位整数，偏移量为相应元素在计数中指定的数量，同时向零移位，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "将填充的 64 位整数向左移动由 count 中相应元素指定的数量，同时向零移动，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将填充的 64 位整数向左移动 count 中相应元素指定的数量，同时将其移位为零，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a left by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "在将移位的 64 位整数左移零时，将其对应计数指定的数量左移，然后使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst.",
        "suggest": "向右移位包装的 64 位整数 (由 count 中相应元素指定的数量)，同时向零移位，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "向右移位包装的 64 位整数，其数量为计数中相应元素指定的数量，同时向零移位，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shift packed 64-bit integers in a right by the amount specified by the corresponding element in count while shifting in zeros, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "向右移位包装的 64 位整数，其数量为计数中相应元素指定的数量，同时移位为零，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.",
        "suggest": "使用 imm8 中的控件在 128 位通道内对单精度 (32-bit) 浮点元素进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 128 位通道内对单精度 (32-bit) 浮点元素进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 128 位通道内对单精度 (32-bit) 浮点元素进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst.",
        "suggest": "使用 imm8 中的控件在 128 位通道内对双精度 (64-bit) 浮点元素进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 128 位通道内对双精度 (64-bit) 浮点元素进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 128 位通道内对双精度 (64-bit) 浮点元素进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a within 256-bit lanes using the control in imm8, and store the results in dst.",
        "suggest": "使用 imm8 中的控件在 256 位通道中的 a 内随机排列 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "shoud be vpermq, but generate vpermpd.",
        "suggest": "应该是 vpermq，但要生成 vpermpd。",
        "translate": ""
    },
    {
        "source": "It generates vpermq with mask.",
        "suggest": "它生成带掩码的 vpermq。",
        "translate": ""
    },
    {
        "source": "change to vbroadcast becaise CI Windows",
        "suggest": "更改为 vbroadcast，因为 CI Windows",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a within 256-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 256 位通道内将 64 位整数进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "shoud be vpermq.",
        "suggest": "应该是 vpermq。",
        "translate": ""
    },
    {
        "source": "change to vpbroadcast becaise CI Windows",
        "suggest": "因为 CI Windows 更改为 vpbroadcast",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a within 256-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 256 位通道内将 64 位整数进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 256-bit lanes using the control in imm8, and store the results in dst.",
        "suggest": "使用 imm8 中的控件在 256 位通道内对双精度 (64-bit) 浮点元素进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "shoud be vpermpd.",
        "suggest": "应该是 vpermpd。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 256-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 256 位通道内对双精度 (64-bit) 浮点元素进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 256-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 256 位通道内将双精度 (64-bit) 浮点元素打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a across lanes using the corresponding index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应索引在跨通道中随机排列 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Note that this intrinsic shuffles across 128-bit lanes, unlike past intrinsics that use the permutevar name.",
        "suggest": "请注意，与使用 permutevar 名称的过去内联函数不同，该内联函数在 128 位通道上进行了重排。",
        "translate": ""
    },
    {
        "source": "This intrinsic is identical to _mm512_permutexvar_epi32, and it is recommended that you use that intrinsic name.",
        "suggest": "此内部函数与 _mm512_permutexvar_epi32 相同，建议您使用该内部函数名称。",
        "translate": ""
    },
    {
        "source": "should be vpermd, but generate vpermps.",
        "suggest": "应该是 vpermd，但会生成 vpermps。",
        "translate": ""
    },
    {
        "source": "It generates vpermd with mask",
        "suggest": "它生成带有掩码的 vpermd",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对 32 位整数进行打乱，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst.",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 单精度 (32-bit) 浮点元素进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 的单精度 (32-bit) 浮点元素打乱，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 的单精度 (32-bit) 浮点元素打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst.",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 双精度 (64-bit) 浮点元素进行打乱，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 的双精度 (64-bit) 浮点元素进行打乱，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a within 128-bit lanes using the control in b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 b 中的控件在 128 位通道内将 a 中的双精度 (64-bit) 浮点元素进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对 32 位整数进行打乱，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a across lanes using the corresponding index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应索引在跨通道中随机排列 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpermq, but generate vpermpd.",
        "suggest": "应该是 vpermq，但会生成 vpermpd。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中随机排列 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a across lanes using the corresponding index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对 64 位整数进行打乱，并使用零掩码 k (未设置相应的掩码位时将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a across lanes using the corresponding index in idx.",
        "suggest": "使用 idx 中的相应索引对跨通道中的单精度 (32-bit) 浮点元素进行打乱。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a across lanes using the corresponding index in idx, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引对跨通道中的单精度 (32-bit) 浮点元素进行打乱，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a across lanes using the corresponding index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对单精度 (32-bit) 浮点元素进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a across lanes using the corresponding index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应索引在跨通道中对双精度 (64-bit) 浮点元素进行混洗，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a across lanes using the corresponding index in idx, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引对跨通道中的双精度 (64-bit) 浮点元素进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a across lanes using the corresponding index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应索引在跨通道中对双精度 (64-bit) 浮点元素进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst.",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中随机排列 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vpermi2d or vpermt2d",
        "suggest": "vpermi2d 或 vpermt2d",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中对 32 位整数进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 a 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中对 32 位整数进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from idx when the corresponding mask bit is not set).",
        "suggest": "使用相应的选择器和 idx 中的索引在通道中的 a 和 b 中对 32 位整数进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，从 idx 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中随机排列 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vpermi2q or vpermt2q",
        "suggest": "vpermi2q 或 vpermt2q",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中随机排列 64 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 a 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中对 64 位整数进行混洗，并使用 zeromask k (未设置相应的 mask 位时将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle 64-bit integers in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from idx when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的 a 和 b 中随机排列 64 位整数，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，从 idx 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中对单精度 (32-bit) 浮点元素进行混洗，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vpermi2ps or vpermt2ps",
        "suggest": "vpermi2ps 或 vpermt2ps",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在 a 和 b 中的通道上对 a 和 b 中的单精度 (32-bit) 浮点元素进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 a 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中对单精度 (32-bit) 浮点元素进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle single-precision (32-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from idx when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的对应选择器和索引在 a 和 b 中的通道中对 a 和 b 中的单精度 (32-bit) 浮点元素进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，从 idx 复制元素)。",
        "translate": ""
    },
    {
        "source": "should be vpermi2ps, but it shows vpermt2ps",
        "suggest": "应该是 vpermi2ps，但显示为 vpermt2ps",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst.",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中对双精度 (64-bit) 浮点元素进行混洗，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "vpermi2pd or vpermt2pd",
        "suggest": "vpermi2pd 或 vpermt2pd",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from a when the corresponding mask bit is not set).",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中对双精度 (64-bit) 浮点元素进行混洗，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时，元素将从 a 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用对应的选择器和 idx 中的索引在通道中的通道 a 和 b 中对双精度 (64-bit) 浮点元素进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements in a and b across lanes using the corresponding selector and index in idx, and store the results in dst using writemask k (elements are copied from idx when the corresponding mask bit is not set)",
        "suggest": "使用 idx 中的相应选择器和索引在通道中的 a 和 b 中对双精度 (64-bit) 浮点元素进行混洗，并使用 writemask k 将结果存储在 dst 中 (未设置相应的 mask 位时从 idx 复制元素)",
        "translate": ""
    },
    {
        "source": "should be vpermi2pd, but it shows vpermt2pd",
        "suggest": "应该是 vpermi2pd，但显示为 vpermt2pd",
        "translate": ""
    },
    {
        "source": "should be vpshufd, but generate vpermilps",
        "suggest": "应该是 vpshufd，但会生成 vpermilps",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a within 128-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件将 128 位通道中的 32 位整数随机排列，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 32-bit integers in a within 128-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件在 128 位通道中的 32 位整数中混洗 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in imm8, and store the results in dst.",
        "suggest": "使用 imm8 中的控件对 128 位通道中的双精度 (64-bit) 浮点元素进行混洗，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件对 128 位通道中的双精度 (64-bit) 浮点元素进行混洗，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle double-precision (64-bit) floating-point elements within 128-bit lanes using the control in imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 中的控件对 128 位通道内的双精度 (64-bit) 浮点元素进行混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 32-bit integers) selected by imm8 from a and b, and store the results in dst.",
        "suggest": "随机排列 imm8 从 a 和 b 中选择的 128 位 (由 4 个 32 位整数组成)，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vshufi32x4, but generate vshufi64x2",
        "suggest": "应该是 vshufi32x4，但生成 vshufi64x2",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 32-bit integers) selected by imm8 from a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 4 个 32 位整数组成) 重排，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 32-bit integers) selected by imm8 from a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 4 个 32 位整数组成) 混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 64-bit integers) selected by imm8 from a and b, and store the results in dst.",
        "suggest": "随机排列 imm8 从 a 和 b 中选择的 128 位 (由 2 个 64 位整数组成)，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 64-bit integers) selected by imm8 from a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 2 个 64 位整数组成) 进行混洗，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 64-bit integers) selected by imm8 from a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 2 个 64 位整数组成) 混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 single-precision (32-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst.",
        "suggest": "imm8 从 a 和 b 中随机选择 128 位 (由 4 个单精度 (32-bit) 浮点元素组成)，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vshuff32x4, but generate vshuff64x2",
        "suggest": "应该是 vshuff32x4，但生成 vshuff64x2",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 single-precision (32-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 4 个单精度 (32-bit) 浮点元素组成) 混洗，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 4 single-precision (32-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 4 个单精度 (32-bit) 浮点元素组成) 混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 double-precision (64-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst.",
        "suggest": "随机排列 imm8 从 a 和 b 中选择的 128 位 (由 2 个双精度 (64-bit) 浮点元素组成)，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 double-precision (64-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 2 个双精度 (64-bit) 浮点元素组成) 混洗，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Shuffle 128-bits (composed of 2 double-precision (64-bit) floating-point elements) selected by imm8 from a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 imm8 从 a 和 b 中选择的 128 位 (由 2 个双精度 (64-bit) 浮点元素组成) 混洗，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from a, selected with imm8, and store the result in dst.",
        "suggest": "从 a 提取 128 位 (由 4 个包装的单精度 (32-bit) 浮点元素组成)，并用 imm8 进行选择，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from a, selected with imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 提取 128 位 (由 4 个包装的单精度 (32-bit) 浮点元素组成)，并用 imm8 进行选择，并使用写掩码 k 将结果存储在 dst 中 (如果未设置相应的掩码位，则从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from a, selected with imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 提取 128 位 (由 4 个包装的单精度 (32-bit) 浮点元素组成)，并用 imm8 进行选择，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed 64-bit integers) from a, selected with imm8, and store the result in dst.",
        "suggest": "从 a 提取 256 位 (由 4 个包装的 64 位整数组成)，并用 imm8 进行选择，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vextracti64x4",
        "suggest": "应该是 vextracti64x4",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed 64-bit integers) from a, selected with imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 从 a 中提取 256 位 (由 4 个包装的 64 位整数组成)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed 64-bit integers) from a, selected with imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 从 a 中提取 256 位 (由 4 个包装的 64 位整数组成)，并使用零掩码 k (未设置相应的掩码位将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a, selected with imm8, and store the result in dst.",
        "suggest": "从 a 提取 256 位 (由 4 个包装的双精度 (64-bit) 浮点元素组成)，并用 imm8 进行选择，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a, selected with imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 提取 256 位 (由 4 个包装的双精度 (64-bit) 浮点元素组成)，并用 imm8 进行选择，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Extract 256 bits (composed of 4 packed double-precision (64-bit) floating-point elements) from a, selected with imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 提取 256 位 (由 4 个包装的双精度 (64-bit) 浮点元素组成)，并用 imm8 进行选择，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed 32-bit integers) from a, selected with imm8, and store the result in dst.",
        "suggest": "从 a 提取 128 位 (由 4 个包装的 32 位整数组成)，并用 imm8 进行选择，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vextracti32x4",
        "suggest": "应该是 vextracti32x4",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed 32-bit integers) from a, selected with imm8, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 从 a 中提取 128 位 (由 4 个包装的 32 位整数组成)，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Extract 128 bits (composed of 4 packed 32-bit integers) from a, selected with imm8, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用 imm8 从 a 中提取 128 位 (由 4 个包装的 32 位整数组成)，并使用零掩码 k (未设置相应的掩码位时将元素清零) 将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst.",
        "suggest": "从 a 复制偶数索引的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 复制偶数索引的单精度 (32-bit) 浮点元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 复制偶数索引的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Duplicate odd-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst.",
        "suggest": "从 a 复制奇数索引的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Duplicate odd-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 复制奇数索引的单精度 (32-bit) 浮点元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Duplicate odd-indexed single-precision (32-bit) floating-point elements from a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 复制奇数索引的单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed double-precision (64-bit) floating-point elements from a, and store the results in dst.",
        "suggest": "从 a 复制偶数索引的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed double-precision (64-bit) floating-point elements from a, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 复制偶数索引的双精度 (64-bit) 浮点元素，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Duplicate even-indexed double-precision (64-bit) floating-point elements from a, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 复制偶数索引的双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Copy a to dst, then insert 128 bits (composed of 4 packed 32-bit integers) from b into dst at the location specified by imm8.",
        "suggest": "将 a 复制到 dst，然后在 x00X 指定的位置将 d 的 128 位 (由 4 个包装的 32 位整数组成) 插入 dst。",
        "translate": ""
    },
    {
        "source": "should be vinserti32x4",
        "suggest": "应该是 vinserti32x4",
        "translate": ""
    },
    {
        "source": "Copy a to tmp, then insert 128 bits (composed of 4 packed 32-bit integers) from b into tmp at the location specified by imm8.",
        "suggest": "将 a 复制到 tmp，然后在 imm8 指定的位置，将 b 中的 128 位 (由 4 个包装的 32 位整数组成) 插入 tmp。",
        "translate": ""
    },
    {
        "source": "Store tmp to dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 tmp 存储到 dst (当未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Copy a to dst, then insert 256 bits (composed of 4 packed 64-bit integers) from b into dst at the location specified by imm8.",
        "suggest": "将 a 复制到 dst，然后在 imm8 指定的位置将 256 位 (由 4 个包装的 64 位整数组成) 插入 dst。",
        "translate": ""
    },
    {
        "source": "should be vinserti64x4",
        "suggest": "应该是 vinserti64x4",
        "translate": ""
    },
    {
        "source": "Copy a to tmp, then insert 256 bits (composed of 4 packed 64-bit integers) from b into tmp at the location specified by imm8.",
        "suggest": "将 a 复制到 tmp，然后在 imm8 指定的位置将 b 的 256 位 (由 4 个包装的 64 位整数组成) 插入 tmp。",
        "translate": ""
    },
    {
        "source": "Copy a to dst, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from b into dst at the location specified by imm8.",
        "suggest": "将 a 复制到 dst，然后在 x00X 指定的位置将 d 的 128 位 (由 4 个包装的单精度 (32-bit) 浮点元素组成) 插入 dst。",
        "translate": ""
    },
    {
        "source": "Copy a to tmp, then insert 128 bits (composed of 4 packed single-precision (32-bit) floating-point elements) from b into tmp at the location specified by imm8.",
        "suggest": "将 a 复制到 tmp，然后在 x00X 指定的位置将 128 位 (由 4 个包装的单精度 (32-bit) 浮点元素组成) 插入 tmp。",
        "translate": ""
    },
    {
        "source": "Copy a to dst, then insert 256 bits (composed of 4 packed double-precision (64-bit) floating-point elements) from b into dst at the location specified by imm8.",
        "suggest": "将 a 复制到 dst，然后在 x00X 指定的位置将 256 位 (由 4 个包装的双精度 (64-bit) 浮点元素组成) 插入 dst。",
        "translate": ""
    },
    {
        "source": "Copy a to tmp, then insert 256 bits (composed of 4 packed double-precision (64-bit) floating-point elements) from b into tmp at the location specified by imm8.",
        "suggest": "将 a 复制到 tmp，然后在 x00X 指定的位置将 256 位 (由 4 个包装的双精度 (64-bit) 浮点元素组成) 插入 tmp。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpunpckhdq",
        "suggest": "应该是 vpunpckhdq",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpunpckhqdq",
        "suggest": "应该是 vpunpckhqdq",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包并交织双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the high half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的高半部分解包和交织双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpunpckldq",
        "suggest": "应该是 vpunpckldq",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织 32 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 32-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织 32 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包并交织 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpunpcklqdq",
        "suggest": "应该是 vpunpcklqdq",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织 64 位整数，并使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave 64-bit integers from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织 64 位整数，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解压包并交织单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包并交织单精度 (32-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave single-precision (32-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织单精度 (32-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst.",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解解包并交织双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包并交织双精度 (64-bit) 浮点元素，并使用 writemask k 将结果存储在 dst 中 (当未设置相应的 mask 位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Unpack and interleave double-precision (64-bit) floating-point elements from the low half of each 128-bit lane in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "从 a 和 b 中每个 128 位通道的下半部分解包和交织双精度 (64-bit) 浮点元素，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m128 to type __m512;",
        "suggest": "将类型 __m128 的 vector 转换为 __m512 类型;",
        "translate": ""
    },
    {
        "source": "the upper 384 bits of the result are undefined.",
        "suggest": "结果的高 384 位未定义。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m256 to type __m512;",
        "suggest": "将类型为 __m256 的 vector 强制转换为类型 __m512;",
        "translate": ""
    },
    {
        "source": "the upper 256 bits of the result are undefined.",
        "suggest": "结果的高 256 位未定义。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512 to type __m128.",
        "suggest": "将类型为 __m512 的 vector 强制转换为类型为 __m128 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512 to type __m256.",
        "suggest": "将类型为 __m512 的 vector 强制转换为类型 __m256。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512 to type __m512d.",
        "suggest": "将类型为 __m512 的 vector 强制转换为类型为 __m512d 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512 to type __m512i.",
        "suggest": "将类型为 __m512 的 vector 强制转换为类型 __m512i。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m128d to type __m512d;",
        "suggest": "将类型 __m128d 的 vector 强制转换为 __m512d 类型;",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m256d to type __m512d;",
        "suggest": "将类型 __m256d 的 vector 强制转换为 __m512d 类型;",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512d to type __m128d.",
        "suggest": "将类型为 __m512d 的 vector 强制转换为类型为 __m128d 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512d to type __m256d.",
        "suggest": "将类型为 __m512d 的 vector 强制转换为类型为 __m256d 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512d to type __m512.",
        "suggest": "将类型为 __m512d 的 vector 强制转换为类型 __m512。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512d to type __m512i.",
        "suggest": "将类型为 __m512d 的 vector 强制转换为类型为 __m512i 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m128i to type __m512i;",
        "suggest": "将类型为 __m128i 的 vector 强制转换为类型 __m512i;",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m256i to type __m512i;",
        "suggest": "将类型为 __m256i 的 vector 强制转换为类型 __m512i;",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512i to type __m128i.",
        "suggest": "将类型为 __m512i 的 vector 强制转换为类型为 __m128i 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512i to type __m256i.",
        "suggest": "将类型为 __m512i 的 vector 强制转换为类型为 __m256i 的 vector。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512i to type __m512.",
        "suggest": "将类型为 __m512i 的 vector 强制转换为类型 __m512。",
        "translate": ""
    },
    {
        "source": "Cast vector of type __m512i to type __m512d.",
        "suggest": "将类型为 __m512i 的 vector 强制转换为类型为 __m512d 的 vector。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 32-bit integer from a to all elements of dst.",
        "suggest": "将低包装的 32 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "should be vpbroadcastd",
        "suggest": "应该是 vpbroadcastd",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 32-bit integer from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将低包装的 32 位整数从 a 广播到 dst 的所有元素 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 32-bit integer from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低包装的 32 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 64-bit integer from a to all elements of dst.",
        "suggest": "将低包装的 64 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "should be vpbroadcastq",
        "suggest": "应该是 vpbroadcastq",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 64-bit integer from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将低包装的 64 位整数从 a 广播到 dst 的所有元素 (当未设置相应的掩码位时，元素将从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low packed 64-bit integer from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低包装的 64 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low single-precision (32-bit) floating-point element from a to all elements of dst.",
        "suggest": "将低单精度 (32-bit) 浮点元素从 A 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the low single-precision (32-bit) floating-point element from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将低单精度 (32-bit) 浮点型元素从 a 广播到 dst 的所有元素 (当未设置相应的掩码位时，将元素从 src 复制)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low single-precision (32-bit) floating-point element from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低单精度 (32-bit) 浮点元素从 a 广播到 dst 的所有元素 (当未设置相应的掩码位时，元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low double-precision (64-bit) floating-point element from a to all elements of dst.",
        "suggest": "从 a 广播低双精度 (64-bit) 浮点元素到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the low double-precision (64-bit) floating-point element from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将低双精度 (64-bit) 浮点型元素从 a 广播到 dst 的所有元素 (当未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the low double-precision (64-bit) floating-point element from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将低双精度 (64-bit) 浮点元素从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 32-bit integers from a to all elements of dst.",
        "suggest": "将 4 个包装的 32 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "msvc: vbroadcasti32x4, linux: vshuf",
        "suggest": "msvc: vbroadcasti32x4，linux: vshuf",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 32-bit integers from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 a 的 4 个包装的 32 位整数广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 32-bit integers from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将 4 的包装的 32 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 64-bit integers from a to all elements of dst.",
        "suggest": "将 4 个包装的 64 位整数从 a 广播到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 64-bit integers from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 a 的 4 个包装的 64 位整数广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed 64-bit integers from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将 4 个包装的 64 位整数从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed single-precision (32-bit) floating-point elements from a to all elements of dst.",
        "suggest": "从 a 广播 4 个包装的单精度 (32-bit) 浮点元素到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed single-precision (32-bit) floating-point elements from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 4 个包装的单精度 (32-bit) 浮点元素从 a 广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed single-precision (32-bit) floating-point elements from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将 4 个包装的单精度 (32-bit) 浮点元素从 a 广播到 dst 的所有元素 (未设置相应的掩码位时，元素将被清零)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed double-precision (64-bit) floating-point elements from a to all elements of dst.",
        "suggest": "从 a 广播 4 个包装的双精度 (64-bit) 浮点元素到 dst 的所有元素。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed double-precision (64-bit) floating-point elements from a to all elements of dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "使用写掩码 k 将 4 个包装的双精度 (64-bit) 浮点元素从 a 广播到 dst 的所有元素 (未设置相应的掩码位时，将从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Broadcast the 4 packed double-precision (64-bit) floating-point elements from a to all elements of dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "使用零掩码 k 将 4 个包装的双精度 (64-bit) 浮点元素从 a 广播到 dst 的所有元素 (未设置相应的掩码位时将元素清零)。",
        "translate": ""
    },
    {
        "source": "Blend packed 32-bit integers from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合 a 和 b 中的包装 32 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmd",
        "suggest": "应该是 vpblendmd",
        "translate": ""
    },
    {
        "source": "Blend packed 64-bit integers from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合 a 和 b 中的包装 64 位整数，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmq",
        "suggest": "应该是 vpblendmq",
        "translate": ""
    },
    {
        "source": "Blend packed single-precision (32-bit) floating-point elements from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合来自 a 和 b 的包装的单精度 (32-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmps",
        "suggest": "应该是 vpblendmps",
        "translate": ""
    },
    {
        "source": "Blend packed double-precision (64-bit) floating-point elements from a and b using control mask k, and store the results in dst.",
        "suggest": "使用控制掩码 k 混合来自 a 和 b 的包装后的双精度 (64-bit) 浮点元素，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpblendmpd",
        "suggest": "应该是 vpblendmpd",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 32-bit elements, and store the low 64 bytes (16 elements) in dst.",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 32 位元素，并将低 64 字节 (16 个元素) 存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 32-bit elements, and store the low 64 bytes (16 elements) in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 32 位元素，并使用写掩码 k 将低 64 字节 (16 个元素) 存储在 dst 中 (当相应的掩码位为 1 时，元素从 src 复制) 没有设置)。",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 32-bit elements, and stores the low 64 bytes (16 elements) in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 32 位元素，并使用零掩码 k 将低 64 字节 (16 个元素) 存储在 dst 中 (当未使用相应的掩码位时元素清零) 放)。",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 64-bit elements, and store the low 64 bytes (8 elements) in dst.",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 64 位元素，并将低 64 字节 (8 个元素) 存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 64-bit elements, and store the low 64 bytes (8 elements) in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 64 位元素，并使用写掩码 k 将低 64 字节 (8 个元素) 存储在 dst 中 (当相应的掩码位为 1 时，元素从 src 复制) 没有设置)。",
        "translate": ""
    },
    {
        "source": "Concatenate a and b into a 128-byte immediate result, shift the result right by imm8 64-bit elements, and stores the low 64 bytes (8 elements) in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "将 a 和 b 连接成一个 128 字节的立即结果，将结果右移 imm8 64 位元素，并使用零掩码 k 将低 64 字节 (8 个元素) 存储在 dst 中 (当未使用相应的掩码位时元素清零) 放)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 32-bit integers in a and b, and store the results in dst.",
        "suggest": "计算 a 和 b 中包装的 32 位整数的按位与，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "should be vpandd, but generate vpandq",
        "suggest": "应该是 vpandd，但生成 vpandq",
        "translate": ""
    },
    {
        "source": "Performs element-by-element bitwise AND between packed 32-bit integer elements of v2 and v3, storing the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "在包装的 v2 和 v3 的 32 位整数元素之间按元素逐位执行 AND，使用写掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 32-bit integers in a and b, and store the results in dst using zeromask k (elements are zeroed out when the corresponding mask bit is not set).",
        "suggest": "计算 a 和 b 中包装的 32 位整数的按位与，并使用零掩码 k 将结果存储在 dst 中 (当未设置相应的掩码位时元素清零)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of 512 bits (composed of packed 64-bit integers) in a and b, and store the results in dst.",
        "suggest": "计算 a 和 b 中 512 位 (由包装的 64 位整数组成) 的按位与，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of packed 64-bit integers in a and b, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).",
        "suggest": "计算 a 和 b 中包装的 64 位整数的按位与，并使用写掩码 k 将结果存储在 dst 中 (如果未设置相应的掩码位，则从 src 复制元素)。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise AND of 512 bits (representing integer data) in a and b, and store the result in dst.",
        "suggest": "计算 a 和 b 中 512 位 (代表整数数据) 的按位与，并将结果存储在 dst 中。",
        "translate": ""
    },
    {
        "source": "Compute the bitwise OR of packed 32-bit integers in a and b, and store the results in dst.",
        "suggest": "计算 a 和 b 中包装的 32 位整数的按位或，并将结果存储在 dst 中。",
        "translate": ""
    }
]
