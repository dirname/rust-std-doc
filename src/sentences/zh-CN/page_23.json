[
    {
        "source": "C Language Extensions (ACLE)",
        "suggest": "C 语言扩展 (ACLE)",
        "translate": ""
    },
    {
        "source": "Developer notes",
        "suggest": "开发人员注意事项",
        "translate": ""
    },
    {
        "source": "Below is a list of built-in targets that are representative of the different ARM architectures;",
        "suggest": "以下是代表不同 ARM 体系结构的内置目标的列表;",
        "translate": ""
    },
    {
        "source": "the list includes the `target_feature`s they possess.",
        "suggest": "该列表包括他们拥有的 `target_feature`。",
        "translate": ""
    },
    {
        "source": "Section 10.1 of ACLE says:",
        "suggest": "ACLE 的 10.1 部分说:",
        "translate": ""
    },
    {
        "source": "From that info and from looking at how LLVM features work (using custom targets) we can identify features that are subsets of others:",
        "suggest": "通过该信息并查看 LLVM 功能的工作方式 (使用自定义目标)，我们可以确定属于其他功能的子集的功能:",
        "translate": ""
    },
    {
        "source": "Legend: `a < b` reads as \"`a` is a subset of `b`\";",
        "suggest": "图例: `a < b` 读为 \"`a` 是 `b` 的子集\";",
        "translate": ""
    },
    {
        "source": "this means that if `b` is enabled then `a` is enabled as well.",
        "suggest": "这意味着如果启用了 `b`，那么还将启用 `a`。",
        "translate": ""
    },
    {
        "source": "Section 5.4.7 of ACLE says:",
        "suggest": "ACLE 的 5.4.7 部分说:",
        "translate": ""
    },
    {
        "source": "This does *not* match how LLVM uses the '+dsp' feature;",
        "suggest": "这与 LLVM 如何使用 '+dsp' 功能不匹配。",
        "translate": ""
    },
    {
        "source": "this feature is not set for v5te targets so we have to work around this difference.",
        "suggest": "未为 v5te 目标设置此功能，因此我们必须解决这一差异。",
        "translate": ""
    },
    {
        "source": "8, 7 and 6-M are supported via dedicated instructions like DMB.",
        "suggest": "通过专用指令 (如 DMB) 支持 8、7 和 6-M。",
        "translate": ""
    },
    {
        "source": "All other arches are supported via CP15 instructions.",
        "suggest": "通过 CP15 指令支持所有其他 arches。",
        "translate": ""
    },
    {
        "source": "See Section 10.1 of ACLE",
        "suggest": "参见 ACLE 的 10.1 部分",
        "translate": ""
    },
    {
        "source": "Supported arches: 5TE, 7E-M.",
        "suggest": "支持的 arches: 5TE，7E-M。",
        "translate": ""
    },
    {
        "source": "See Section 10.1 of ACLE (e.g.",
        "suggest": "参见 ACLE 的 10.1 部分 (例如",
        "translate": ""
    },
    {
        "source": "QADD) We also include the A profile even though DSP is deprecated on that profile as of ACLE 2.0 (see section 5.4.7) Here we workaround the difference between LLVM's +dsp and ACLE's __ARM_FEATURE_DSP by gating on '+v5te' rather than on '+dsp'",
        "suggest": "QADD) 即使从 ACLE 2.0 开始不赞成使用 DSP，我们也包括 A 配置文件 (请参见 5.4.7 部分)。在这里，我们通过在 '+v5te' 而非 '+dsp' 上进行选通来解决 LLVM 的 + dsp 和 ACLE 的 __ARM_FEATURE_DSP 之间的差异",
        "translate": ""
    },
    {
        "source": "v5TE but excludes v7-M",
        "suggest": "v5TE，但不包括 v7-M",
        "translate": ""
    },
    {
        "source": "Supported arches: 6, 7-M.",
        "suggest": "支持的 arches: 6、7-M。",
        "translate": ""
    },
    {
        "source": "See Section 10.1 of ACLE (e.g. SSAT)",
        "suggest": "请参见 ACLE 的 10.1 部分 (例如 SSAT)",
        "translate": ""
    },
    {
        "source": "Deprecated in ACLE 2.0 for the A profile but fully supported on the M and R profiles, says Section 5.4.9 of ACLE.",
        "suggest": "ACLE 的 5.4.9 部分说，在 ACLE 2.0 中已不赞成 A 配置文件，但在 M 和 R 配置文件中完全支持。",
        "translate": ""
    },
    {
        "source": "We'll expose these for the A profile even if deprecated",
        "suggest": "即使不推荐使用，我们也会在 A 个人资料中公开这些内容",
        "translate": ""
    },
    {
        "source": "Application Program Status Register",
        "suggest": "应用程序状态寄存器",
        "translate": ""
    },
    {
        "source": "Note (@Lokathor): Because this breaks the use of Rust on the Game Boy Advance, this change must be reverted until Rust learns to handle cpu state",
        "suggest": "注意 (@Lokathor): 因为这破坏了 Game Boy Advance 上对 Rust 的使用，所以必须还原此更改，直到 Rust 学会处理 cpu 状态为止",
        "translate": ""
    },
    {
        "source": "properly. See also:",
        "suggest": "适当地。也可以看看:",
        "translate": ""
    },
    {
        "source": "Reads a 32-bit system register",
        "suggest": "读取 32 位系统寄存器",
        "translate": ""
    },
    {
        "source": "Reads a 64-bit system register",
        "suggest": "读取 64 位系统寄存器",
        "translate": ""
    },
    {
        "source": "Reads a system register containing an address",
        "suggest": "读取包含地址的系统寄存器",
        "translate": ""
    },
    {
        "source": "Writes a 32-bit system register",
        "suggest": "写入 32 位系统寄存器",
        "translate": ""
    },
    {
        "source": "Writes a 64-bit system register",
        "suggest": "写入 64 位系统寄存器",
        "translate": ""
    },
    {
        "source": "Writes a system register containing an address",
        "suggest": "写入包含地址的系统寄存器",
        "translate": ""
    },
    {
        "source": "CONTROL register",
        "suggest": "控制寄存器",
        "translate": ""
    },
    {
        "source": "Execution Program Status Register",
        "suggest": "执行程序状态寄存器",
        "translate": ""
    },
    {
        "source": "Interrupt Program Status Register",
        "suggest": "中断程序状态寄存器",
        "translate": ""
    },
    {
        "source": "Main Stack Pointer",
        "suggest": "主栈指针",
        "translate": ""
    },
    {
        "source": "Priority Mask Register",
        "suggest": "优先级掩码寄存器",
        "translate": ""
    },
    {
        "source": "Process Stack Pointer",
        "suggest": "进程栈指针",
        "translate": ""
    },
    {
        "source": "Program Status Register",
        "suggest": "程序状态寄存器",
        "translate": ""
    },
    {
        "source": "Base Priority Mask Register",
        "suggest": "基本优先级掩码寄存器",
        "translate": ""
    },
    {
        "source": "Base Priority Mask Register (conditional write)",
        "suggest": "基本优先级掩码寄存器 (有条件写入)",
        "translate": ""
    },
    {
        "source": "Fault Mask Register",
        "suggest": "故障屏蔽寄存器",
        "translate": ""
    },
    {
        "source": "Section 8.4 \"Saturating intrinsics\"",
        "suggest": "8.4 \"饱和内联函数\" 部分",
        "translate": ""
    },
    {
        "source": "Section 8.5 \"32-bit SIMD intrinsics\" of ACLE",
        "suggest": "ACLE 的 8.5 \"32 位 SIMD 内联函数\" 部分",
        "translate": ""
    },
    {
        "source": "Intrinsics that could live here",
        "suggest": "可以在这里生存的内联函数",
        "translate": ""
    },
    {
        "source": "ARM-specific 32-bit wide vector of four packed `i8`.",
        "suggest": "四个包装的 `i8` 的特定于分区的 32 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 32-bit wide vector of four packed `u8`.",
        "suggest": "四个包装的 `u8` 的特定于分区的 32 位宽 vector。",
        "translate": ""
    },
    {
        "source": "Saturating four 8-bit integer additions",
        "suggest": "饱和四个 8 位整数加法",
        "translate": ""
    },
    {
        "source": "Returns the 8-bit signed equivalent of",
        "suggest": "返回与之等效的 8 位有符号",
        "translate": ""
    },
    {
        "source": "Saturating two 8-bit integer subtraction",
        "suggest": "饱和两个 8 位整数减法",
        "translate": ""
    },
    {
        "source": "Saturating two 16-bit integer subtraction",
        "suggest": "饱和两个 16 位整数减法",
        "translate": ""
    },
    {
        "source": "Returns the 16-bit signed equivalent of",
        "suggest": "返回与之等效的 16 位带符号",
        "translate": ""
    },
    {
        "source": "Saturating two 16-bit integer additions",
        "suggest": "饱和两个 16 位整数加法",
        "translate": ""
    },
    {
        "source": "Returns the 16-bit signed saturated equivalent of",
        "suggest": "返回 16 位带符号的饱和等效项",
        "translate": ""
    },
    {
        "source": "and the GE bits of the APSR are set.",
        "suggest": "APSR 的 GE 位置位。",
        "translate": ""
    },
    {
        "source": "Returns the 8-bit signed saturated equivalent of",
        "suggest": "返回 8 位有符号的饱和等效项",
        "translate": ""
    },
    {
        "source": "Dual 16-bit Signed Multiply with Addition of products and 32-bit accumulation.",
        "suggest": "双 16 位有符号乘法，加乘积和 32 位累加。",
        "translate": ""
    },
    {
        "source": "Returns the 16-bit signed equivalent of res = a\\[0\\] * b\\[0\\] + a\\[1\\] * b\\[1\\] + c",
        "suggest": "返回 16 位有符号等效项 res = a\\[0\\] * b\\[0\\] + a\\[1\\] * b\\[1\\] + c",
        "translate": ""
    },
    {
        "source": "Dual 16-bit Signed Multiply with Subtraction  of products and 32-bit accumulation and overflow detection.",
        "suggest": "双 16 位带符号乘积与乘积相减以及 32 位累加和溢出检测。",
        "translate": ""
    },
    {
        "source": "Returns the 16-bit signed equivalent of res = a\\[0\\] * b\\[0\\] - a\\[1\\] * b\\[1\\] + c",
        "suggest": "返回 16 位有符号等效项 res = a\\[0\\] * b\\[0\\] - a\\[1\\] * b\\[1\\] + c",
        "translate": ""
    },
    {
        "source": "Select bytes from each operand according to APSR GE flags",
        "suggest": "根据 APSR GE 标志从每个操作数中选择字节",
        "translate": ""
    },
    {
        "source": "Returns the equivalent of",
        "suggest": "返回等价于",
        "translate": ""
    },
    {
        "source": "where GE are bits of APSR",
        "suggest": "GE 是 APSR 的位",
        "translate": ""
    },
    {
        "source": "Signed halving parallel byte-wise addition.",
        "suggest": "带符号的并行字节加法减半。",
        "translate": ""
    },
    {
        "source": "Signed halving parallel halfword-wise addition.",
        "suggest": "有符号的减半平行半字加法。",
        "translate": ""
    },
    {
        "source": "Signed halving parallel byte-wise subtraction.",
        "suggest": "有符号的减半平行字节的减法。",
        "translate": ""
    },
    {
        "source": "Inserts a `USUB8` instruction.",
        "suggest": "插入 `USUB8` 指令。",
        "translate": ""
    },
    {
        "source": "Returns the 8-bit unsigned equivalent of",
        "suggest": "返回与之等效的 8 位无符号",
        "translate": ""
    },
    {
        "source": "where \\[0\\] is the lower 8 bits and \\[3\\] is the upper 8 bits.",
        "suggest": "其中 \\[0\\] 是低 8 位，\\[3\\] 是高 8 位。",
        "translate": ""
    },
    {
        "source": "The GE bits of the APSR are set.",
        "suggest": "APSR 的 GE 位置 1。",
        "translate": ""
    },
    {
        "source": "Inserts a `SSUB8` instruction.",
        "suggest": "插入 `SSUB8` 指令。",
        "translate": ""
    },
    {
        "source": "Signed halving parallel halfword-wise subtraction.",
        "suggest": "有符号的减去平行半字的减法。",
        "translate": ""
    },
    {
        "source": "Signed Dual Multiply Add.",
        "suggest": "带符号的双乘加法。",
        "translate": ""
    },
    {
        "source": "and sets the Q flag if overflow occurs on the addition.",
        "suggest": "并在加法发生溢出时设置 Q 标志。",
        "translate": ""
    },
    {
        "source": "Signed Dual Multiply Add Reversed.",
        "suggest": "有符号的双数乘法加法反转。",
        "translate": ""
    },
    {
        "source": "Signed Dual Multiply Subtract.",
        "suggest": "有符号的双数乘法减法。",
        "translate": ""
    },
    {
        "source": "Signed Dual Multiply Subtract Reversed.",
        "suggest": "有符号的双数乘法减法反转。",
        "translate": ""
    },
    {
        "source": "Sum of 8-bit absolute differences.",
        "suggest": "8 位绝对差之和。",
        "translate": ""
    },
    {
        "source": "Sum of 8-bit absolute differences and constant.",
        "suggest": "8 位绝对差和常量之和。",
        "translate": ""
    },
    {
        "source": "call sadd8() to set GE bits",
        "suggest": "调用 sadd8() 设置 GE 位",
        "translate": ""
    },
    {
        "source": "compiler specific intrinsics",
        "suggest": "编译器特定的内联函数",
        "translate": ""
    },
    {
        "source": "Inserts a breakpoint instruction.",
        "suggest": "插入断点指令。",
        "translate": ""
    },
    {
        "source": "is a compile-time constant integer in range `[0, 255]`.",
        "suggest": "是范围 `[0, 255]` 中的编译时常量整数。",
        "translate": ""
    },
    {
        "source": "The breakpoint instruction inserted is:",
        "suggest": "插入的断点指令为:",
        "translate": ""
    },
    {
        "source": "when compiling as T32,",
        "suggest": "当编译为 T32 时，",
        "translate": ""
    },
    {
        "source": "when compiling as A32 or A64.",
        "suggest": "当编译为 A32 或 A64 时。",
        "translate": ""
    },
    {
        "source": "If `val` is out-of-range the behavior is **undefined**.",
        "suggest": "如果 `val` 越界，则行为是 `undefined`。",
        "translate": ""
    },
    {
        "source": "defines that `__breakpoint` accepts the following values for `val`:",
        "suggest": "定义 `__breakpoint` 接受 `val` 的以下值:",
        "translate": ""
    },
    {
        "source": "when compiling as A32 or A64,",
        "suggest": "当编译为 A32 或 A64 时，",
        "translate": ""
    },
    {
        "source": "when compiling as T32.",
        "suggest": "当编译为 T32 时。",
        "translate": ""
    },
    {
        "source": "The current implementation only accepts values in range `[0, 255]` - if the value is out-of-range the behavior is **undefined**.",
        "suggest": "当前实现仅接受 `[0, 255]` 范围内的值 - 如果该值越界，则行为是未定义的。",
        "translate": ""
    },
    {
        "source": "Ensure that this compiles correctly on non-arm architectures, so libstd doc builds work.",
        "suggest": "确保这在非分支体系结构上正确编译，因此 libstd doc 可以正常工作。",
        "translate": ""
    },
    {
        "source": "The proper macro will shadow this definition below.",
        "suggest": "适当的宏将在下面隐藏此定义。",
        "translate": ""
    },
    {
        "source": "We can't `panic!` inside this intrinsic, so we can't really validate the arguments here.",
        "suggest": "我们无法在此内联函数内进行 `panic!` 运算，因此我们无法在此处真正验证参数。",
        "translate": ""
    },
    {
        "source": "If `val` is out-of-range this macro uses `val == 255`:",
        "suggest": "如果 `val` 越界，则此宏使用 `val == 255`:",
        "translate": ""
    },
    {
        "source": "single round checksum for bytes (8 bits).",
        "suggest": "字节 (8 位) 的单次校验和。",
        "translate": ""
    },
    {
        "source": "single round checksum for half words (16 bits).",
        "suggest": "半字 (16 位) 的单轮校验和。",
        "translate": ""
    },
    {
        "source": "single round checksum for words (32 bits).",
        "suggest": "单词的单次校验和 (32 位)。",
        "translate": ""
    },
    {
        "source": "CRC32-C single round checksum for bytes (8 bits).",
        "suggest": "字节 (8 位) 的 CRC32-C 单回合校验和。",
        "translate": ""
    },
    {
        "source": "CRC32-C single round checksum for half words (16 bits).",
        "suggest": "半字 (16 位) 的 CRC32-C 单回合校验和。",
        "translate": ""
    },
    {
        "source": "CRC32-C single round checksum for words (32 bits).",
        "suggest": "字 (32 位) 的 CRC32-C 单次校验和。",
        "translate": ""
    },
    {
        "source": "AES single round encryption.",
        "suggest": "AES 单轮加密。",
        "translate": ""
    },
    {
        "source": "AES single round decryption.",
        "suggest": "AES 单轮解密。",
        "translate": ""
    },
    {
        "source": "AES mix columns.",
        "suggest": "AES 混合列。",
        "translate": ""
    },
    {
        "source": "AES inverse mix columns.",
        "suggest": "AES 反混合列。",
        "translate": ""
    },
    {
        "source": "fixed rotate.",
        "suggest": "固定旋转。",
        "translate": ""
    },
    {
        "source": "hash update accelerator, choose.",
        "suggest": "哈希更新加速器，选择。",
        "translate": ""
    },
    {
        "source": "hash update accelerator, majority.",
        "suggest": "哈希更新加速器，多数。",
        "translate": ""
    },
    {
        "source": "hash update accelerator, parity.",
        "suggest": "哈希更新加速器，奇偶校验。",
        "translate": ""
    },
    {
        "source": "schedule update accelerator, first part.",
        "suggest": "计划更新加速器，第一部分。",
        "translate": ""
    },
    {
        "source": "schedule update accelerator, second part.",
        "suggest": "计划更新加速器，第二部分。",
        "translate": ""
    },
    {
        "source": "SHA256 hash update accelerator.",
        "suggest": "SHA256 哈希更新加速器。",
        "translate": ""
    },
    {
        "source": "SHA256 hash update accelerator, upper part.",
        "suggest": "SHA256 哈希更新加速器，上部。",
        "translate": ""
    },
    {
        "source": "SHA256 schedule update accelerator, first part.",
        "suggest": "SHA256 计划更新加速器，第一部分。",
        "translate": ""
    },
    {
        "source": "SHA256 schedule update accelerator, second part.",
        "suggest": "SHA256 计划更新加速器，第二部分。",
        "translate": ""
    },
    {
        "source": "Generates the trap instruction `UDF`",
        "suggest": "生成陷阱指令 `UDF`",
        "translate": ""
    },
    {
        "source": "Vector bitwise and",
        "suggest": "Vector 按位和",
        "translate": ""
    },
    {
        "source": "Vector bitwise or (immediate, inclusive)",
        "suggest": "Vector 按位或 ( immediate ，包括)",
        "translate": ""
    },
    {
        "source": "Vector bitwise exclusive or (vector)",
        "suggest": "Vector 按位互斥或 (vector)",
        "translate": ""
    },
    {
        "source": "Saturating subtract",
        "suggest": "饱和减",
        "translate": ""
    },
    {
        "source": "Halving add",
        "suggest": "减半",
        "translate": ""
    },
    {
        "source": "Rounding halving add",
        "suggest": "四舍五入加法",
        "translate": ""
    },
    {
        "source": "Saturating add",
        "suggest": "饱和添加",
        "translate": ""
    },
    {
        "source": "Signed halving subtract",
        "suggest": "有符号减半",
        "translate": ""
    },
    {
        "source": "Tests for ARM+v7+neon load (vld1) intrinsics.",
        "suggest": "测试分区 + v7 + 氖气负载 (vld1) 内联函数。",
        "translate": ""
    },
    {
        "source": "These are included in `{arm, aarch64}::neon`.",
        "suggest": "这些包含在 `{arm, aarch64}::neon` 中。",
        "translate": ""
    },
    {
        "source": "NEON intrinsics",
        "suggest": "NEON 内联函数",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of eight packed `i8`.",
        "suggest": "八个包装的 `i8` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of eight packed `u8`.",
        "suggest": "八个包装的 `u8` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide polynomial vector of eight packed `p8`.",
        "suggest": "八个包装的 `p8` 的特定于分区的 64 位宽多项式 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of four packed `i16`.",
        "suggest": "四个包装的 `i16` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of four packed `u16`.",
        "suggest": "四个包装的 `u16` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of four packed `f16`.",
        "suggest": "四个包装的 `f16` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of four packed `p16`.",
        "suggest": "四个包装的 `p16` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of two packed `i32`.",
        "suggest": "两个包装的 `i32` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of two packed `u32`.",
        "suggest": "两个包装的 `u32` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of two packed `f32`.",
        "suggest": "两个包装的 `f32` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of one packed `i64`.",
        "suggest": "一个包装的 `i64` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of one packed `u64`.",
        "suggest": "一个包装的 `u64` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 64-bit wide vector of one packed `p64`.",
        "suggest": "一个包装的 `p64` 的特定于分区的 64 位宽 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of sixteen packed `i8`.",
        "suggest": "十六个包装的 `i8` 的特定于分支的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of sixteen packed `u8`.",
        "suggest": "十六个包装的 `u8` 的特定于分支的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of sixteen packed `p8`.",
        "suggest": "十六个包装的 `p8` 的特定于分支的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of eight packed `i16`.",
        "suggest": "八个包装的 `i16` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of eight packed `u16`.",
        "suggest": "八个包装的 `u16` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of eight packed `f16`.",
        "suggest": "八个包装的 `f16` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "pub struct float16x8_t(f16, f16, f16, f16, f16, f16, f16);",
        "suggest": "pub 结构体 float16x8_t(f16, f16, f16, f16, f16, f16, f16);",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of eight packed `p16`.",
        "suggest": "八个包装的 `p16` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of four packed `i32`.",
        "suggest": "四个包装的 `i32` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of four packed `u32`.",
        "suggest": "四个包装的 `u32` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of four packed `f32`.",
        "suggest": "四个包装的 `f32` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of two packed `i64`.",
        "suggest": "两个包装的 `i64` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of two packed `u64`.",
        "suggest": "两个包装的 `u64` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific 128-bit wide vector of two packed `p64`.",
        "suggest": "两个包装的 `p64` 的特定于分区的 128 位宽的 vector。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing two `int8x8_t` vectors.",
        "suggest": "包含两个 `int8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing three `int8x8_t` vectors.",
        "suggest": "包含三个 `int8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing four `int8x8_t` vectors.",
        "suggest": "包含四个 `int8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing two `uint8x8_t` vectors.",
        "suggest": "包含两个 `uint8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing three `uint8x8_t` vectors.",
        "suggest": "包含三个 `uint8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing four `uint8x8_t` vectors.",
        "suggest": "包含四个 `uint8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing two `poly8x8_t` vectors.",
        "suggest": "包含两个 `poly8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing three `poly8x8_t` vectors.",
        "suggest": "包含三个 `poly8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "ARM-specific type containing four `poly8x8_t` vectors.",
        "suggest": "包含四个 `poly8x8_t` vectors 的特定于分区的类型。",
        "translate": ""
    },
    {
        "source": "absolute value (64-bit)",
        "suggest": "绝对值 (64-bit)",
        "translate": ""
    },
    {
        "source": "absolute value (128-bit)",
        "suggest": "绝对值 (128-bit)",
        "translate": ""
    },
    {
        "source": "Load one single-element structure to one lane of one register.",
        "suggest": "将一个单一元素结构体加载到一个寄存器的一个通道中。",
        "translate": ""
    },
    {
        "source": "Load one single-element structure and Replicate to all lanes (of one register).",
        "suggest": "加载一个单一元素结构体，然后复制到所有通道 (一个寄存器)。",
        "translate": ""
    },
    {
        "source": "Absolute value (wrapping).",
        "suggest": "绝对值 (wrapping)。",
        "translate": ""
    },
    {
        "source": "Add pairwise.",
        "suggest": "成对添加。",
        "translate": ""
    },
    {
        "source": "Unsigned saturating extract narrow.",
        "suggest": "无符号饱和提取 narrow。",
        "translate": ""
    },
    {
        "source": "Signed Add Long (vector).",
        "suggest": "有符号添加长度 (vector)。",
        "translate": ""
    },
    {
        "source": "Unsigned Add Long (vector).",
        "suggest": "无符号添加长度 (vector)。",
        "translate": ""
    },
    {
        "source": "Signed Add Long (vector, high half).",
        "suggest": "有符号添加长度 (vector，高一半)。",
        "translate": ""
    },
    {
        "source": "Unsigned Add Long (vector, high half).",
        "suggest": "无符号添加长度 (vector，高一半)。",
        "translate": ""
    },
    {
        "source": "Signed Add Wide.",
        "suggest": "有符号添加宽。",
        "translate": ""
    },
    {
        "source": "Unsigned Add Wide.",
        "suggest": "无符号添加宽。",
        "translate": ""
    },
    {
        "source": "Signed Add Wide (high half).",
        "suggest": "有符号添加宽 (高一半)。",
        "translate": ""
    },
    {
        "source": "Unsigned Add Wide (high half).",
        "suggest": "无符号添加宽 (高一半)。",
        "translate": ""
    },
    {
        "source": "Add returning High Narrow.",
        "suggest": "添加返回的 High Narrow。",
        "translate": ""
    },
    {
        "source": "Add returning High Narrow (high half).",
        "suggest": "添加返回的 High Narrow (高半)。",
        "translate": ""
    },
    {
        "source": "Rounding Add returning High Narrow.",
        "suggest": "舍入添加返回 High Narrow。",
        "translate": ""
    },
    {
        "source": "Rounding Add returning High Narrow (high half).",
        "suggest": "舍入添加返回的 High Narrow (高半)。",
        "translate": ""
    },
    {
        "source": "Signed Add Long Pairwise.",
        "suggest": "有符号成对加长。",
        "translate": ""
    },
    {
        "source": "Unsigned Add Long Pairwise.",
        "suggest": "无符号成对加长。",
        "translate": ""
    },
    {
        "source": "Signed Add and Accumulate Long Pairwise.",
        "suggest": "有符号加和成对累积长。",
        "translate": ""
    },
    {
        "source": "Unsigned Add and Accumulate Long Pairwise.",
        "suggest": "无符号加和成对累积长。",
        "translate": ""
    },
    {
        "source": "Vector narrow integer.",
        "suggest": "Vector narrow 整数。",
        "translate": ""
    },
    {
        "source": "Vector long move.",
        "suggest": "Vector 长移动。",
        "translate": ""
    },
    {
        "source": "Reciprocal square-root estimate.",
        "suggest": "平方根倒数估算。",
        "translate": ""
    },
    {
        "source": "Vector bitwise not.",
        "suggest": "Vector 不是按位的。",
        "translate": ""
    },
    {
        "source": "Move vector element to general-purpose register",
        "suggest": "将 vector 元素移至通用寄存器",
        "translate": ""
    },
    {
        "source": "seems to be an acceptable intrinsic to compile to",
        "suggest": "似乎是可以接受编译的内联函数",
        "translate": ""
    },
    {
        "source": "no 32bit this seems to be turned into two vmov.32 instructions validate correctness",
        "suggest": "没有 32 位，这似乎变成了两个 vmov.32 指令，验证正确性",
        "translate": ""
    },
    {
        "source": "Duplicate vector element to vector or scalar",
        "suggest": "将 vector 元素复制到 vector 或标量",
        "translate": ""
    },
    {
        "source": "Vector reinterpret cast operation",
        "suggest": "Vector 重新解释强制转换操作",
        "translate": ""
    },
    {
        "source": "Unsigned shift right",
        "suggest": "无符号右移",
        "translate": ""
    },
    {
        "source": "Shift right",
        "suggest": "右移",
        "translate": ""
    },
    {
        "source": "Extract vector from pair of vectors",
        "suggest": "从 vectors 对中提取 vector",
        "translate": ""
    },
    {
        "source": "These float-to-int implementations have undefined behaviour when `a` overflows",
        "suggest": "当 `a` 溢出时，这些浮点到整数实现具有未定义的行为",
        "translate": ""
    },
    {
        "source": "the destination type.",
        "suggest": "目标类型。",
        "translate": ""
    },
    {
        "source": "Clang has the same problem:",
        "suggest": "Clang 具有相同的问题:",
        "translate": ""
    },
    {
        "source": "Floating-point Convert to Signed fixed-point, rounding toward Zero (vector)",
        "suggest": "浮点转换为有符号固定点，四舍五入为 (vector)",
        "translate": ""
    },
    {
        "source": "Population count per byte.",
        "suggest": "每个字节的填充计数。",
        "translate": ""
    },
    {
        "source": "Reversing vector elements (swap endianness)",
        "suggest": "反转 vector 元素 (交换字节顺序)",
        "translate": ""
    },
    {
        "source": "Tests for ARM+v7+neon shift and insert (vsli[q]_n, vsri[q]_n) intrinsics.",
        "suggest": "测试 ARM+v7+neon 移位并插入 (vsli[q]_n，vsri[q]_n) 内联函数。",
        "translate": ""
    },
    {
        "source": "Tests for ARM+v7+neon table lookup (vtbl, vtbx) intrinsics.",
        "suggest": "测试 ARM+v7+neon 表查找 (vtbl，vtbx) 内联函数。",
        "translate": ""
    },
    {
        "source": "create table as array, and transmute it to arm's table type",
        "suggest": "将表创建为数组，并将其转换为分支的表类型",
        "translate": ""
    },
    {
        "source": "For each control vector, perform a table lookup and verify the result:",
        "suggest": "对于每个控件 vector，执行表查找并验证结果:",
        "translate": ""
    },
    {
        "source": "ARM+v7+neon and AArch64+neon tests",
        "suggest": "ARM+v7+neon 和 AArch64+neon 测试",
        "translate": ""
    },
    {
        "source": "The reference is [ARMv6-M Architecture Reference Manual][armv6m].",
        "suggest": "引用的是 [ARMv6-M 架构参考手册][armv6m]。",
        "translate": ""
    },
    {
        "source": "The reference is [ARMv7-M Architecture Reference Manual (Issue E.b)][armv7m].",
        "suggest": "引用的是 [ARMv7-M 架构参考手册 (Issue E.b)][armv7m]。",
        "translate": ""
    },
    {
        "source": "FIXME need to add `v7` upstream in rustc",
        "suggest": "FIXME 需要在 rustc 的上游添加 `v7`",
        "translate": ""
    },
    {
        "source": "Note that this `unsafe` block is safe because we're testing that the `avx2` feature is indeed available on our CPU.",
        "suggest": "请注意，此 `unsafe` 块是安全的，因为我们正在测试 `avx2` 功能确实在我们的 CPU 上可用。",
        "translate": ""
    },
    {
        "source": "the function below is inlined here",
        "suggest": "下面的函数内联在这里",
        "translate": ""
    },
    {
        "source": "SIMD and vendor intrinsics module.",
        "suggest": "SIMD 和供应商内部功能模块。",
        "translate": ""
    },
    {
        "source": "This module is intended to be the gateway to architecture-specific intrinsic functions, typically related to SIMD (but not always!).",
        "suggest": "此模块旨在用作特定于体系结构的固有函数的门户，该固有函数通常与 SIMD 相关 (但并非总是如此! )。",
        "translate": ""
    },
    {
        "source": "Each architecture that Rust compiles to may contain a submodule here, which means that this is not a portable module!",
        "suggest": "Rust 编译到的每个体系结构都可能在此处包含一个子模块，这意味着这不是便携式模块!",
        "translate": ""
    },
    {
        "source": "If you're writing a portable library take care when using these APIs!",
        "suggest": "如果您要编写可移植的库，请在使用这些 API 时多加注意!",
        "translate": ""
    },
    {
        "source": "Under this module you'll find an architecture-named module, such as `x86_64`.",
        "suggest": "在此模块下，您将找到一个以架构命名的模块，例如 `x86_64`。",
        "translate": ""
    },
    {
        "source": "Each `#[cfg(target_arch)]` that Rust can compile to may have a module entry here, only present on that particular target.",
        "suggest": "Rust 可以编译的每个 `#[cfg(target_arch)]` 此处可能都有一个模块条目，仅存在于该特定目标上。",
        "translate": ""
    },
    {
        "source": "For example the `i686-pc-windows-msvc` target will have an `x86` module here, whereas `x86_64-pc-windows-msvc` has `x86_64`.",
        "suggest": "例如，`i686-pc-windows-msvc` 目标在此处将具有 `x86` 模块，而 `x86_64-pc-windows-msvc` 具有 `x86_64`。",
        "translate": ""
    },
    {
        "source": "This module exposes vendor-specific intrinsics that typically correspond to a single machine instruction.",
        "suggest": "该模块公开了特定于供应商的内联函数，这些内联函数通常对应于一条机器指令。",
        "translate": ""
    },
    {
        "source": "These intrinsics are not portable: their availability is architecture-dependent, and not all machines of that architecture might provide the intrinsic.",
        "suggest": "这些内联函数不是可移植的: 它们的可用性取决于体系结构，并且并非该体系结构的所有机器都可以提供该内联函数。",
        "translate": ""
    },
    {
        "source": "The `arch` module is intended to be a low-level implementation detail for higher-level APIs.",
        "suggest": "`arch` 模块旨在作为高级 API 的实现细节。",
        "translate": ""
    },
    {
        "source": "Using it correctly can be quite tricky as you need to ensure at least a few guarantees are upheld:",
        "suggest": "正确使用它可能会非常棘手，因为您需要确保至少遵守以下几点保证:",
        "translate": ""
    },
    {
        "source": "The correct architecture's module is used.",
        "suggest": "使用了正确的体系结构模块。",
        "translate": ""
    },
    {
        "source": "For example the `arm` module isn't available on the `x86_64-unknown-linux-gnu` target.",
        "suggest": "例如，`arm` 模块在 `x86_64-unknown-linux-gnu` 目标上不可用。",
        "translate": ""
    },
    {
        "source": "This is typically done by ensuring that `#[cfg]` is used appropriately when using this module.",
        "suggest": "通常，通过在使用此模块时确保正确使用 `#[cfg]` 来完成此操作。",
        "translate": ""
    },
    {
        "source": "The CPU the program is currently running on supports the function being called.",
        "suggest": "程序当前正在运行的 CPU 支持被调用的函数。",
        "translate": ""
    },
    {
        "source": "For example it is unsafe to call an AVX2 function on a CPU that doesn't actually support AVX2.",
        "suggest": "例如，在实际上不支持 AVX2 的 CPU 上调用 AVX2 函数是不安全的。",
        "translate": ""
    },
    {
        "source": "As a result of the latter of these guarantees all intrinsics in this module are `unsafe` and extra care needs to be taken when calling them!",
        "suggest": "由于后者的保证，该模块中的所有内联函数都是 `unsafe`，因此在调用它们时要格外小心!",
        "translate": ""
    },
    {
        "source": "CPU Feature Detection",
        "suggest": "CPU 特性检测",
        "translate": ""
    },
    {
        "source": "In order to call these APIs in a safe fashion there's a number of mechanisms available to ensure that the correct CPU feature is available to call an intrinsic.",
        "suggest": "为了以一种安全的方式调用这些 API，有许多机制可用来确保正确的 CPU 功能可用于调用内联函数。",
        "translate": ""
    },
    {
        "source": "Let's consider, for example, the `_mm256_add_epi64` intrinsics on the `x86` and `x86_64` architectures.",
        "suggest": "例如，让我们考虑 `x86` 和 `x86_64` 体系结构上的 `_mm256_add_epi64` 内联函数。",
        "translate": ""
    },
    {
        "source": "This function requires the AVX2 feature as [documented by Intel][intel-dox] so to correctly call this function we need to (a) guarantee we only call it on `x86`/`x86_64` and (b) ensure that the CPU feature is available",
        "suggest": "此函数需要 AVX2 功能作为 [documented by Intel][intel-dox]，因此要正确调用此函数，我们需要 (a) 保证我们仅在 `x86`/`x86_64` 和 (b) 上调用它，以确保 CPU 功能可用",
        "translate": ""
    },
    {
        "source": "Static CPU Feature Detection",
        "suggest": "静态 CPU 特性检测",
        "translate": ""
    },
    {
        "source": "The first option available to us is to conditionally compile code via the `#[cfg]` attribute.",
        "suggest": "我们可以使用的第一个选项是通过 `#[cfg]` 属性有条件地编译代码。",
        "translate": ""
    },
    {
        "source": "CPU features correspond to the `target_feature` cfg available, and can be used like so:",
        "suggest": "CPU 功能对应于可用的 `target_feature` cfg，可以这样使用:",
        "translate": ""
    },
    {
        "source": "Here we're using `#[cfg(target_feature = \"avx2\")]` to conditionally compile this function into our module.",
        "suggest": "在这里，我们使用 `#[cfg(target_feature = \"avx2\")]` 有条件地将此函数编译到我们的模块中。",
        "translate": ""
    },
    {
        "source": "This means that if the `avx2` feature is *enabled statically* then we'll use the `_mm256_add_epi64` function at runtime.",
        "suggest": "这意味着，如果 `avx2` 功能静态地是 *enabled*，那么我们将在运行时使用 `_mm256_add_epi64` 函数。",
        "translate": ""
    },
    {
        "source": "The `unsafe` block here can be justified through the usage of `#[cfg]` to only compile the code in situations where the safety guarantees are upheld.",
        "suggest": "可以通过使用 `#[cfg]` 来证明此处的 `unsafe` 块合理，仅在维护安全保证的情况下才编译代码。",
        "translate": ""
    },
    {
        "source": "Statically enabling a feature is typically done with the `-C target-feature` or `-C target-cpu` flags to the compiler.",
        "suggest": "通常使用编译器的 `-C target-feature` 或 `-C target-cpu` 标志来静态启用功能。",
        "translate": ""
    },
    {
        "source": "For example if your local CPU supports AVX2 then you can compile the above function with:",
        "suggest": "例如，如果您的本地 CPU 支持 AVX2，则可以使用以下命令编译上述函数:",
        "translate": ""
    },
    {
        "source": "Or otherwise you can specifically enable just the AVX2 feature:",
        "suggest": "否则，您可以专门启用 AVX2 功能:",
        "translate": ""
    },
    {
        "source": "Note that when you compile a binary with a particular feature enabled it's important to ensure that you only run the binary on systems which satisfy the required feature set.",
        "suggest": "请注意，在编译启用了特定功能的二进制文件时，确保仅在满足所需功能集的系统上运行二进制文件非常重要。",
        "translate": ""
    },
    {
        "source": "Dynamic CPU Feature Detection",
        "suggest": "动态 CPU 功能检测",
        "translate": ""
    },
    {
        "source": "Sometimes statically dispatching isn't quite what you want.",
        "suggest": "有时静态分派并不是您想要的。",
        "translate": ""
    },
    {
        "source": "Instead you might want to build a portable binary that runs across a variety of CPUs, but at runtime it selects the most optimized implementation available.",
        "suggest": "相反，您可能想构建一个可在各种 CPU 上运行的可移植二进制文件，但是在运行时它将选择可用的最优化的实现。",
        "translate": ""
    },
    {
        "source": "This allows you to build a \"least common denominator\" binary which has certain sections more optimized for different CPUs.",
        "suggest": "这使您可以构建 \"最小公分母\" 二进制文件，其中的某些部分针对不同的 CPU 进行了优化。",
        "translate": ""
    },
    {
        "source": "Taking our previous example from before, we're going to compile our binary *without* AVX2 support, but we'd like to enable it for just one function.",
        "suggest": "以之前的示例为例，我们将编译我们的二进制文件，而没有 AVX2 支持，但是我们只想为一个函数启用它。",
        "translate": ""
    },
    {
        "source": "We can do that in a manner like:",
        "suggest": "我们可以按照以下方式进行操作:",
        "translate": ""
    },
    {
        "source": "There's a couple of components in play here, so let's go through them in detail!",
        "suggest": "这里有几个组件在起作用，所以让我们详细研究它们!",
        "translate": ""
    },
    {
        "source": "First up we notice the `is_x86_feature_detected!` macro.",
        "suggest": "首先，我们注意到 `is_x86_feature_detected!` 宏。",
        "translate": ""
    },
    {
        "source": "Provided by the standard library, this macro will perform necessary runtime detection to determine whether the CPU the program is running on supports the specified feature.",
        "suggest": "由标准库提供，此宏将执行必要的运行时检测，以确定程序所运行的 CPU 是否支持指定的功能。",
        "translate": ""
    },
    {
        "source": "In this case the macro will expand to a boolean expression evaluating to whether the local CPU has the AVX2 feature or not.",
        "suggest": "在这种情况下，宏将扩展为一个布尔表达式，以评估本地 CPU 是否具有 AVX2 功能。",
        "translate": ""
    },
    {
        "source": "Note that this macro, like the `arch` module, is platform-specific.",
        "suggest": "请注意，与 `arch` 模块一样，此宏是特定于平台的。",
        "translate": ""
    },
    {
        "source": "For example calling `is_x86_feature_detected!(\"avx2\")` on ARM will be a compile time error.",
        "suggest": "例如，在 ARM 上调用 `is_x86_feature_detected!(\"avx2\")` 将是编译时错误。",
        "translate": ""
    },
    {
        "source": "To ensure we don't hit this error a statement level `#[cfg]` is used to only compile usage of the macro on `x86`/`x86_64`.",
        "suggest": "为了确保我们不会遇到此错误，语句级别 `#[cfg]` 仅用于编译 `x86`/`x86_64` 上的宏用法。",
        "translate": ""
    },
    {
        "source": "Next up we see our AVX2-enabled function, `foo_avx2`.",
        "suggest": "接下来，我们看到启用了 AVX2 的函数 `foo_avx2`。",
        "translate": ""
    },
    {
        "source": "This function is decorated with the `#[target_feature]` attribute which enables a CPU feature for just this one function.",
        "suggest": "此函数用 `#[target_feature]` 属性修饰，该属性仅为此一个函数启用 CPU 功能。",
        "translate": ""
    },
    {
        "source": "Using a compiler flag like `-C target-feature=+avx2` will enable AVX2 for the entire program, but using an attribute will only enable it for the one function.",
        "suggest": "使用 `-C target-feature=+avx2` 之类的编译器标志将为整个程序启用 AVX2，但使用属性将仅为一个函数启用它。",
        "translate": ""
    },
    {
        "source": "Usage of the `#[target_feature]` attribute currently requires the function to also be `unsafe`, as we see here.",
        "suggest": "如此处所示，当前使用 `#[target_feature]` 属性要求函数也必须为 `unsafe`。",
        "translate": ""
    },
    {
        "source": "This is because the function can only be correctly called on systems which have the AVX2 (like the intrinsics themselves).",
        "suggest": "这是因为只能在具有 AVX2 的系统上正确调用该函数 (例如内联函数本身)。",
        "translate": ""
    },
    {
        "source": "And with all that we should have a working program!",
        "suggest": "有了所有这些，我们应该有一个有效的程序!",
        "translate": ""
    },
    {
        "source": "This program will run across all machines and it'll use the optimized AVX2 implementation on machines where support is detected.",
        "suggest": "该程序将在所有计算机上运行，并且将在检测到支持的计算机上使用优化的 AVX2 实现。",
        "translate": ""
    },
    {
        "source": "It's important to note that using the `arch` module is not the easiest thing in the world, so if you're curious to try it out you may want to brace yourself for some wordiness!",
        "suggest": "重要的是要注意，使用 `arch` 模块并不是世界上最简单的事情，因此，如果您想尝试一下，您可能会想方设法为自己做好准备!",
        "translate": ""
    },
    {
        "source": "The primary purpose of this module is to enable stable crates on crates.io to build up much more ergonomic abstractions which end up using SIMD under the hood.",
        "suggest": "该模块的主要目的是使 crates.io 上的稳定 crates 能够构建更多的人体工程学抽象，最终在引擎盖下使用 SIMD。",
        "translate": ""
    },
    {
        "source": "Over time these abstractions may also move into the standard library itself, but for now this module is tasked with providing the bare minimum necessary to use vendor intrinsics on stable Rust.",
        "suggest": "随着时间的流逝，这些抽象也可能会移入标准库本身，但是目前，此模块的任务是提供在稳定的 Rust 上使用供应商内联函数所需的最低限度的最低要求。",
        "translate": ""
    },
    {
        "source": "Other architectures",
        "suggest": "其他架构",
        "translate": ""
    },
    {
        "source": "This documentation is only for one particular architecture, you can find others at:",
        "suggest": "本文档仅适用于一种特定的体系结构，您可以在以下位置找到其他文档:",
        "translate": ""
    },
    {
        "source": "First let's take a look at not actually using any intrinsics but instead using LLVM's auto-vectorization to produce optimized vectorized code for AVX2 and also for the default platform.",
        "suggest": "首先，让我们看一下实际上不使用任何内联函数，而是使用 LLVM 的自动矢量化为 AVX2 和默认平台生成优化的矢量化代码。",
        "translate": ""
    },
    {
        "source": "Next up let's take a look at an example of manually using intrinsics.",
        "suggest": "接下来，让我们来看一个手动使用内联函数的示例。",
        "translate": ""
    },
    {
        "source": "Here we'll be using SSE4.1 features to implement hex encoding.",
        "suggest": "在这里，我们将使用 SSE4.1 功能来实现十六进制编码。",
        "translate": ""
    },
    {
        "source": "Utility macros.",
        "suggest": "实用程序宏。",
        "translate": ""
    },
    {
        "source": "immediate value: 0:31",
        "suggest": "immediate 值: 0:31",
        "translate": ""
    },
    {
        "source": "immediate value: -16:15",
        "suggest": "immediate 值: -16:15",
        "translate": ""
    },
    {
        "source": "immediate value: 0:16",
        "suggest": "immediate 值: 0:16",
        "translate": ""
    },
    {
        "source": "immediate value: 0:7",
        "suggest": "immediate 值: 0:7",
        "translate": ""
    },
    {
        "source": "Building this module (even if unused) for non-fp64 targets fails with an LLVM error.",
        "suggest": "为非 fp64 目标构建此模块 (即使未使用) 也失败，并显示 LLVM 错误。",
        "translate": ""
    },
    {
        "source": "Generates the trap instruction `BREAK`",
        "suggest": "生成陷阱指令 `BREAK`",
        "translate": ""
    },
    {
        "source": "immediate value: -4096:4088",
        "suggest": "immediate 值: -4096:4088",
        "translate": ""
    },
    {
        "source": "immediate value: -2048:2044",
        "suggest": "immediate 值: -2048:2044",
        "translate": ""
    },
    {
        "source": "immediate value: -1024:1022",
        "suggest": "immediate 值: -1024:1022",
        "translate": ""
    },
    {
        "source": "immediate value: -512:511",
        "suggest": "immediate 值: -512:511",
        "translate": ""
    },
    {
        "source": "immediate value: 0:63",
        "suggest": "immediate 值: 0:63",
        "translate": ""
    },
    {
        "source": "immediate value: 0:15",
        "suggest": "immediate 值: 0:15",
        "translate": ""
    },
    {
        "source": "immediate value: 0:3",
        "suggest": "immediate 值: 0:3",
        "translate": ""
    },
    {
        "source": "immediate value: 0:1",
        "suggest": "immediate 值: 0:1",
        "translate": ""
    },
    {
        "source": "SIMD Architecture intrinsics",
        "suggest": "SIMD 体系结构内联函数",
        "translate": ""
    },
    {
        "source": "The reference is [MIPS Architecture for Programmers Volume IV-j: The MIPS32 SIMD Architecture Module Revision 1.12][msa_ref].",
        "suggest": "引用的是 [面向程序员的 MIPS 架构第 IV-j 卷：MIPS32 SIMD 架构模块修订版 1.12][msa_ref]。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 16 packed `i8`.",
        "suggest": "MIPS 专用的 16 个包装 `i8` 的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 8 packed `i16`.",
        "suggest": "MIPS 特定的 8 位包装 `i16` 的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 4 packed `i32`.",
        "suggest": "MIPS 特定的 128 位宽的 vector (4 个包装的 `i32`)。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 2 packed `i64`.",
        "suggest": "2 个包装的 `i64` 的 MIPS 特定的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 16 packed `u8`.",
        "suggest": "MIPS 专用的 16 个包装 `u8` 的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 8 packed `u16`.",
        "suggest": "MIPS 特定的 8 位包装 `u16` 的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 4 packed `u32`.",
        "suggest": "MIPS 特定的 128 位宽的 vector (4 个包装的 `u32`)。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 2 packed `u64`.",
        "suggest": "2 个包装的 `u64` 的 MIPS 特定的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 4 packed `f32`.",
        "suggest": "MIPS 特定的 128 位宽的 vector (4 个包装的 `f32`)。",
        "translate": ""
    },
    {
        "source": "MIPS-specific 128-bit wide vector of 2 packed `f64`.",
        "suggest": "2 个包装的 `f64` 的 MIPS 特定的 128 位宽 vector。",
        "translate": ""
    },
    {
        "source": "16-bit floats",
        "suggest": "16 位浮点数",
        "translate": ""
    },
    {
        "source": "16-bit floats fn msa_fexupl_w(a: f16x8) -> v4f32;",
        "suggest": "16 位浮点数 fn msa_fexupl_w(a: f16x8) -> v4f32;",
        "translate": ""
    },
    {
        "source": "Vector Add Absolute Values.",
        "suggest": "Vector 添加绝对值。",
        "translate": ""
    },
    {
        "source": "The absolute values of the elements in vector in `a` (sixteen signed 8-bit integer numbers) are added to the absolute values of the elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素的绝对值 (十六个带符号的 8 位整数) 与 vector `b` 中的元素绝对值 (十六个带符号的 8 位整数) 相加。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "结果写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Add Absolute Values",
        "suggest": "Vector 添加绝对值",
        "translate": ""
    },
    {
        "source": "The absolute values of the elements in vector in `a` (eight signed 16-bit integer numbers) are added to the absolute values of the elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素的绝对值 (八个带符号的 16 位整数) 与 vector `b` 中的元素的绝对值 (八个带符号的 16 位整数) 相加。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "结果写入 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The absolute values of the elements in vector in `a` (four signed 32-bit integer numbers) are added to the absolute values of the elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素的绝对值 (四个有符号的 32 位整数) 与 vector `b` 中的元素绝对值 (四个有符号的 32 位整数) 相加。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (four signed 32-bit integer numbers).",
        "suggest": "结果写入 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The absolute values of the elements in vector in `a` (two signed 64-bit integer numbers) are added to the absolute values of the elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素的绝对值 (两个有符号的 64 位整数) 与 vector `b` 中的元素绝对值 (两个有符号的 64 位整数) 相加。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (two signed 64-bit integer numbers).",
        "suggest": "结果写入 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed Saturated Vector Saturated Add of Absolute Values",
        "suggest": "带符号的饱和 Vector 饱和的绝对值相加",
        "translate": ""
    },
    {
        "source": "The saturated signed result is written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "饱和的带符号结果被写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Saturated Add of Absolute Values",
        "suggest": "Vector 绝对值的饱和加法",
        "translate": ""
    },
    {
        "source": "The saturated signed result is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "饱和的有符号结果被写入 vector (八个有符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The saturated signed result is written to vector (four signed 32-bit integer numbers).",
        "suggest": "饱和的有符号结果被写入 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The saturated signed result is written to vector (two signed 64-bit integer numbers).",
        "suggest": "饱和的有符号结果被写入 vector (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Signed Saturated Add of Signed Values",
        "suggest": "Vector 带符号的饱和值的加法",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (sixteen signed 8-bit integer numbers) are added to the elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (十六个带符号的 8 位整数) 被添加到 vector `b` 中的元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "在将结果写入 vector (十六个带符号的 8 位整数) 之前，将执行带符号的算术运算并将溢出钳位到最大或者最小的可表示符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (eight signed 16-bit integer numbers) are added to the elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "将 `a` 中的 vector 中的元素 (八个带符号的 16 位整数) 添加到 vector `b` 中的元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (eight signed 16-bit integer numbers).",
        "suggest": "在将结果写入 vector (八个有符号的 16 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (four signed 32-bit integer numbers) are added to the elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (四个有符号的 32 位整数) 被添加到 vector `b` 中的元素 (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (four signed 32-bit integer numbers).",
        "suggest": "在将结果写入 vector (四个有符号的 32 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (two signed 64-bit integer numbers) are added to the elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (两个有符号的 64 位整数) 被添加到 vector `b` 中的元素 (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (two signed 64-bit integer numbers).",
        "suggest": "在将结果写入 vector (两个有符号的 64 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Saturated Add of Unsigned Values",
        "suggest": "Vector 无符号饱和值的无符号相加",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (sixteen unsigned 8-bit integer numbers) are added to the elements in vector `b` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (十六个无符号的 8 位整数) 被添加到 vector `b` 中的元素 (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "在将结果写入 vector (十六个无符号的 8 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (eight unsigned 16-bit integer numbers) are added to the elements in vector `b` (eight unsigned 16-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (八个无符号 16 位整数) 被添加到 vector `b` 中的元素 (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "在将结果写入 vector (八个无符号的 16 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (four unsigned 32-bit integer numbers) are added to the elements in vector `b` (four unsigned 32-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (四个无符号 32 位整数) 被添加到 vector `b` 中的元素 (四个无符号 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (four unsigned 32-bit integer numbers).",
        "suggest": "在将结果写入 vector (四个无符号的 32 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "The elements in vector in `a` (two unsigned 64-bit integer numbers) are added to the elements in vector `b` (two unsigned 64-bit integer numbers).",
        "suggest": "`a` 中的 vector 中的元素 (两个无符号的 64 位整数) 被添加到 vector `b` 中的元素 (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Signed arithmetic is performed and overflows clamp to the largest and/or smallest representable signed values before writing the result to vector (two unsigned 64-bit integer numbers).",
        "suggest": "在将结果写入 vector (两个无符号的 64 位整数) 之前，将执行有符号算术，并且溢出将钳位到最大或者最小可表示的有符号值。",
        "translate": ""
    },
    {
        "source": "Vector Add",
        "suggest": "Vector 添加",
        "translate": ""
    },
    {
        "source": "Immediate Add",
        "suggest": "Immediate 添加",
        "translate": ""
    },
    {
        "source": "The 5-bit immediate unsigned value `imm5` is added to the elements vector in `a` (sixteen signed 8-bit integer numbers).",
        "suggest": "5 位 immediate 数无符号值 `imm5` 被添加到 `a` 中的元素 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The 5-bit immediate unsigned value `imm5` is added to the elements vector in `a` (eight signed 16-bit integer numbers).",
        "suggest": "5 位 immediate 数无符号值 `imm5` 被添加到 `a` 中的元素 vector (八个有符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The 5-bit immediate unsigned value `imm5` is added to the elements vector in `a` (four signed 32-bit integer numbers).",
        "suggest": "5 位 immediate 数无符号值 `imm5` 被添加到 `a` 中的元素 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The 5-bit immediate unsigned value `imm5` is added to the elements vector in `a` (two signed 64-bit integer numbers).",
        "suggest": "5 位 immediate 数无符号值 `imm5` 被添加到 `a` 中的元素 vector (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Logical And",
        "suggest": "Vector 逻辑与",
        "translate": ""
    },
    {
        "source": "Each bit of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the corresponding bit of vector `b` (sixteen unsigned 8-bit integer numbers) in a bitwise logical AND operation.",
        "suggest": "vector `a` 的每个位 (十六个无符号的 8 位整数) 与 vector `b` 的对应位 (十六个无符号的 8 位整数) 按位逻辑与运算进行组合。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "结果写入 vector (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Logical And",
        "suggest": "Immediate 逻辑与",
        "translate": ""
    },
    {
        "source": "Each byte element of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the 8-bit immediate i8 (signed 8-bit integer number) in a bitwise logical AND operation.",
        "suggest": "vector `a` 的每个字节元素 (十六个无符号的 8 位整数) 与 8 位 immediate 数 i8 (有符号的 8 位整数) 通过按位逻辑 AND 运算进行组合。",
        "translate": ""
    },
    {
        "source": "Vector Absolute Values of Signed Subtract",
        "suggest": "Vector 有符号减法的绝对值",
        "translate": ""
    },
    {
        "source": "The signed elements in vector `a` (sixteen signed 8-bit integer numbers) are subtracted from the signed elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "从 vector `b` (十六个带符号的 8 位整数) 中减去有符号元素 vector `a` (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The absolute value of the signed result is written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "有符号结果的绝对值写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed elements in vector `a` (eight signed 16-bit integer numbers) are subtracted from the signed elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "从 vector `b` (八个带符号的 16 位整数) 中减去有符号元素 vector `a` (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The absolute value of the signed result is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "有符号结果的绝对值写入 vector (八个有符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed elements in vector `a` (four signed 32-bit integer numbers) are subtracted from the signed elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个有符号的 32 位整数) 中的有符号元素被从 vector `b` (四个有符号的 32 位整数) 中的有符号元素中减去。",
        "translate": ""
    },
    {
        "source": "The absolute value of the signed result is written to vector (four signed 32-bit integer numbers).",
        "suggest": "有符号结果的绝对值写入 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed elements in vector `a` (two signed 64-bit integer numbers) are subtracted from the signed elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "从 vector `b` (两个带符号的 64 位整数) 中的有符号元素减去 vector `a` (两个带符号的 64 位整数) 中的有符号元素。",
        "translate": ""
    },
    {
        "source": "The absolute value of the signed result is written to vector (two signed 64-bit integer numbers).",
        "suggest": "有符号结果的绝对值写入 vector (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Absolute Values of Unsigned Subtract",
        "suggest": "Vector 无符号减法的绝对值",
        "translate": ""
    },
    {
        "source": "The unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) are subtracted from the unsigned elements in vector `b` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "从 vector `b` (十六个无符号 8 位整数) 中减去 vector `a` 中的无符号元素 (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The absolute value of the unsigned result is written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "无符号结果的绝对值写入 vector (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) are subtracted from the unsigned elements in vector `b` (eight unsigned 16-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素 (八个无符号 16 位整数) 从 vector `b` 中的无符号元素 (八个无符号 16 位整数) 中减去。",
        "translate": ""
    },
    {
        "source": "The absolute value of the unsigned result is written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "无符号结果的绝对值写入 vector (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned elements in vector `a` (four unsigned 32-bit integer numbers) are subtracted from the unsigned elements in vector `b` (four unsigned 32-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素 (四个无符号 32 位整数) 从 vector `b` 中的无符号元素 (四个无符号 32 位整数) 中减去。",
        "translate": ""
    },
    {
        "source": "The absolute value of the unsigned result is written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "无符号结果的绝对值写入 vector (四个无符号 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned elements in vector `a` (two unsigned 64-bit integer numbers) are subtracted from the unsigned elements in vector `b` (two unsigned 64-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素 (两个无符号 64 位整数) 从 vector `b` 中的无符号元素 (两个无符号 64 位整数) 中减去。",
        "translate": ""
    },
    {
        "source": "The absolute value of the unsigned result is written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "无符号结果的绝对值写入 vector (两个无符号 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Signed Average",
        "suggest": "Vector 有符号平均值",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen signed 8-bit integer numbers) are added to the elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` 中的元素 (十六个带符号的 8 位整数) 被添加到 vector `b` 中的元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The addition is done signed with full precision, i.e. the result has one extra bit.",
        "suggest": "加法以完全精确的符号完成，即结果有一个额外的位。",
        "translate": ""
    },
    {
        "source": "Signed division by 2 (or arithmetic shift right by one bit) is performed before writing the result to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "在将结果写入 vector (十六个带符号的 8 位整数) 之前，先执行有符号除以 2 (或算术右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight signed 16-bit integer numbers) are added to the elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的元素添加到 vector `b` (八个带符号的 16 位整数中)。",
        "translate": ""
    },
    {
        "source": "Signed division by 2 (or arithmetic shift right by one bit) is performed before writing the result to vector (eight signed 16-bit integer numbers).",
        "suggest": "在将结果写入 vector (八个带符号的 16 位整数) 之前，先执行有符号除以 2 (或算术右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four signed 32-bit integer numbers) are added to the elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的元素被添加到 vector `b` (四个带符号的 32 位整数中) 的元素。",
        "translate": ""
    },
    {
        "source": "Signed division by 2 (or arithmetic shift right by one bit) is performed before writing the result to vector (four signed 32-bit integer numbers).",
        "suggest": "在将结果写入 vector (四个有符号的 32 位整数) 之前，先执行有符号除以 2 (或算术右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two signed 64-bit integer numbers) are added to the elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "vector `a` (两个带符号的 64 位整数) 中的元素被添加到 vector `b` (两个带符号的 64 位整数中) 的元素。",
        "translate": ""
    },
    {
        "source": "Signed division by 2 (or arithmetic shift right by one bit) is performed before writing the result to vector (two signed 64-bit integer numbers).",
        "suggest": "在将结果写入 vector (两个带符号的 64 位整数) 之前，先执行有符号除以 2 (或算术右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Average",
        "suggest": "Vector 无符号平均值",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen unsigned 8-bit integer numbers) are added to the elements in vector `b` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "vector `a` 中的元素 (十六个无符号的 8 位整数) 被添加到 vector `b` 中的元素 (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The addition is done unsigned with full precision, i.e. the result has one extra bit.",
        "suggest": "加法是完全无符号的，即结果有一个额外的位。",
        "translate": ""
    },
    {
        "source": "Unsigned division by 2 (or logical shift right by one bit) is performed before writing the result to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "在将结果写入 vector (十六个无符号的 8 位整数) 之前，将执行无符号除以 2 (或逻辑右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight unsigned 16-bit integer numbers) are added to the elements in vector `b` (eight unsigned 16-bit integer numbers).",
        "suggest": "vector `a` (八个无符号 16 位整数) 中的元素被添加到 vector `b` (八个无符号 16 位整数中) 的元素。",
        "translate": ""
    },
    {
        "source": "Unsigned division by 2 (or logical shift right by one bit) is performed before writing the result to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "在将结果写入 vector (八个无符号的 16 位整数) 之前，将执行无符号除以 2 (或逻辑右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four unsigned 32-bit integer numbers) are added to the elements in vector `b` (four unsigned 32-bit integer numbers).",
        "suggest": "vector `a` (四个无符号的 32 位整数) 中的元素被添加到 vector `b` (四个无符号的 32 位整数) 中的元素。",
        "translate": ""
    },
    {
        "source": "Unsigned division by 2 (or logical shift right by one bit) is performed before writing the result to vector (four unsigned 32-bit integer numbers).",
        "suggest": "在将结果写入 vector (四个无符号的 32 位整数) 之前，将执行无符号除以 2 (或逻辑右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two unsigned 64-bit integer numbers) are added to the elements in vector `b` (two unsigned 64-bit integer numbers).",
        "suggest": "vector `a` (两个无符号的 64 位整数) 中的元素被添加到 vector `b` (两个无符号的 64 位整数) 中的元素。",
        "translate": ""
    },
    {
        "source": "Unsigned division by 2 (or logical shift right by one bit) is performed before writing the result to vector (two unsigned 64-bit integer numbers).",
        "suggest": "在将结果写入 vector (两个无符号的 64 位整数) 之前，将执行无符号除以 2 (或逻辑右移一位) 的操作。",
        "translate": ""
    },
    {
        "source": "Vector Signed Average Rounded",
        "suggest": "Vector 有符号平均四舍五入",
        "translate": ""
    },
    {
        "source": "The addition of the elements plus 1 (for rounding) is done signed with full precision, i.e. the result has one extra bit.",
        "suggest": "元素加 1 (用于四舍五入) 的加法以完全精确的符号进行，即结果有一个额外的位。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Average Rounded",
        "suggest": "Vector 无符号平均四舍五入",
        "translate": ""
    },
    {
        "source": "The addition of the elements plus 1 (for rounding) is done unsigned with full precision, i.e. the result has one extra bit.",
        "suggest": "元素加 1 (用于四舍五入) 的加法是完全无符号的，即结果有一个额外的位。",
        "translate": ""
    },
    {
        "source": "Vector Bit Clear",
        "suggest": "Vector 位清除",
        "translate": ""
    },
    {
        "source": "Clear (set to 0) one bit in each element of vector `a` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "将 vector `a` 的每个元素中的一位清零 (设置为 0) (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in `b` (sixteen unsigned 8-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位的位置由 `b` 中的元素 (十六个无符号的 8 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "Clear (set to 0) one bit in each element of vector `a` (eight unsigned 16-bit integer numbers).",
        "suggest": "将 vector `a` 的每个元素中的一位清零 (设置为 0) (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in `b` (eight unsigned 16-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位的位置由 `b` 中的元素 (八个无符号的 16 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "结果写入 vector (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Clear (set to 0) one bit in each element of vector `a` (four unsigned 32-bit integer numbers).",
        "suggest": "将 vector `a` 的每个元素中的一位清零 (设置为 0) (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in `b` (four unsigned 32-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位的位置由 `b` 中的元素 (四个无符号的 32 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "结果写入 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Clear (set to 0) one bit in each element of vector `a` (two unsigned 64-bit integer numbers).",
        "suggest": "将 vector `a` 的每个元素中的一位清零 (设置为 0) (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in `b` (two unsigned 64-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位位置由 `b` 中的元素 (两个无符号的 64 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "结果写入 vector (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Clear",
        "suggest": "Immediate 清除",
        "translate": ""
    },
    {
        "source": "The bit position is given by the immediate `m` modulo the size of the element in bits.",
        "suggest": "位的位置由 immediate 数 `m` 给出以位为单位的元素大小的模。",
        "translate": ""
    },
    {
        "source": "Vector Bit Insert Left",
        "suggest": "Vector 位向左插入",
        "translate": ""
    },
    {
        "source": "Copy most significant (left) bits in each element of vector `b` (sixteen unsigned 8-bit integer numbers) to elements in vector `a` (sixteen unsigned 8-bit integer numbers) while preserving the least significant (right) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (left) 位 (十六个无符号的 8 位整数) 复制到 vector `a` 中的元素 (十六个无符号 8 位整数)，同时保留最低有效的 (right) 位。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the elements in vector `c` (sixteen unsigned 8-bit integer numbers) modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数由 vector `c` 中的元素给出 (十六个无符号的 8 位整数)，以元素的大小为模加位加 1。",
        "translate": ""
    },
    {
        "source": "Copy most significant (left) bits in each element of vector `b` (eight unsigned 16-bit integer numbers) to elements in vector `a` (eight unsigned 16-bit integer numbers) while preserving the least significant (right) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (left) 位 (八个无符号 16 位整数) 复制到 vector `a` 中的元素 (八个无符号 16 位整数)，同时保留最低有效 (right) 位。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the elements in vector `c` (eight unsigned 16-bit integer numbers) modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数由 vector `c` 中的元素 (八个无符号 16 位整数) 组成，以元素的大小为模加位加 1。",
        "translate": ""
    },
    {
        "source": "Copy most significant (left) bits in each element of vector `b` (four unsigned 32-bit integer numbers) to elements in vector `a` (four unsigned 32-bit integer numbers) while preserving the least significant (right) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (left) 位 (四个无符号 32 位整数) 复制到 vector `a` 中的元素 (四个无符号 32 位整数)，同时保留最低有效 (right) 位。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the elements in vector `c` (four unsigned 32-bit integer numbers) modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数由 vector `c` 中的元素给出 (四个无符号的 32 位整数)，以元素的大小为模加位加 1。",
        "translate": ""
    },
    {
        "source": "Copy most significant (left) bits in each element of vector `b` (two unsigned 64-bit integer numbers) to elements in vector `a` (two unsigned 64-bit integer numbers) while preserving the least significant (right) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (left) 位 (两个无符号 64 位整数) 复制到 vector `a` 中的元素 (两个无符号 64 位整数)，同时保留最低有效 (right) 位。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the elements in vector `c` (two unsigned 64-bit integer numbers) modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数由 vector `c` 中的元素 (两个无符号的 64 位整数) 给定，以元素的大小为模加位加 1。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Insert Left",
        "suggest": "Immediate 向左插入位",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the immediate `imm3` modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数是由 immediate 数 `imm3` 给出的，以元素的大小为模，以位数加 1 为模。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the immediate `imm4` modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数是由 immediate 数 `imm4` 给出的，以元素的大小为模，以位数加 1 为模。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the immediate `imm5` modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数是由 immediate 数 `imm5` 给出的，以元素的大小为模，以位数加 1 为模。",
        "translate": ""
    },
    {
        "source": "The number of bits to copy is given by the immediate `imm6` modulo the size of the element in bits plus 1.",
        "suggest": "要复制的位数是由 immediate 数 `imm6` 给出的，以元素的大小为模，以位数加 1 为模。",
        "translate": ""
    },
    {
        "source": "Vector Bit Insert Right",
        "suggest": "Vector 位右插入",
        "translate": ""
    },
    {
        "source": "Copy most significant (right) bits in each element of vector `b` (sixteen unsigned 8-bit integer numbers) to elements in vector `a` (sixteen unsigned 8-bit integer numbers) while preserving the least significant (left) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (right) 位 (十六个无符号的 8 位整数) 复制到 vector `a` 中的元素 (十六个无符号 8 位整数)，同时保留最低有效的 (left) 位。",
        "translate": ""
    },
    {
        "source": "Copy most significant (right) bits in each element of vector `b` (eight unsigned 16-bit integer numbers) to elements in vector `a` (eight unsigned 16-bit integer numbers) while preserving the least significant (left) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (right) 位 (八个无符号 16 位整数) 复制到 vector `a` 中的元素 (八个无符号 16 位整数)，同时保留最低有效 (left) 位。",
        "translate": ""
    },
    {
        "source": "Copy most significant (right) bits in each element of vector `b` (four unsigned 32-bit integer numbers) to elements in vector `a` (four unsigned 32-bit integer numbers) while preserving the least significant (left) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (right) 位 (四个无符号 32 位整数) 复制到 vector `a` 中的元素 (四个无符号 32 位整数)，同时保留最低有效 (left) 位。",
        "translate": ""
    },
    {
        "source": "Copy most significant (right) bits in each element of vector `b` (two unsigned 64-bit integer numbers) to elements in vector `a` (two unsigned 64-bit integer numbers) while preserving the least significant (left) bits.",
        "suggest": "将 vector `b` 的每个元素中的最高有效 (right) 位 (两个无符号 64 位整数) 复制到 vector `a` 中的元素 (两个无符号 64 位整数)，同时保留最低有效 (left) 位。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Insert Right",
        "suggest": "Immediate 向右插入位",
        "translate": ""
    },
    {
        "source": "Vector Bit Move If Not Zero",
        "suggest": "Vector 不为零的位移动",
        "translate": ""
    },
    {
        "source": "Copy to destination vector `a` (sixteen unsigned 8-bit integer numbers) all bits from source vector `b` (sixteen unsigned 8-bit integer numbers) for which the corresponding bits from target vector `c` (sixteen unsigned 8-bit integer numbers) are 1 and leaves unchanged all destination bits for which the corresponding target bits are 0.",
        "suggest": "将来自源 vector `b` (十六个无符号 8 位整数) 的所有位复制到目标 vector `a` (十六个无符号 8 位整数)，目标 vector `c` (十六个无符号 8 位整数) 的所有位分别为 1 和保留目标位为 0 的所有目标位不变。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Move If Not Zero",
        "suggest": "Immediate 位移动 (如果不为零)",
        "translate": ""
    },
    {
        "source": "Copy to destination vector `a` (sixteen unsigned 8-bit integer numbers) all bits from source vector `b` (sixteen unsigned 8-bit integer numbers) for which the corresponding bits from from immediate `imm8` are 1 and leaves unchanged all destination bits for which the corresponding target bits are 0.",
        "suggest": "将来自源 vector `b` 的所有位 (来自 immediate  `imm8` 的对应位为 1) 复制到目标 vector `a` (十六个无符号的 8 位整数)，并将所有源目标位保持不变目标位为 0。",
        "translate": ""
    },
    {
        "source": "Vector Bit Move If Zero",
        "suggest": "Vector 如果为零则移动",
        "translate": ""
    },
    {
        "source": "Copy to destination vector `a` (sixteen unsigned 8-bit integer numbers) all bits from source vector `b` (sixteen unsigned 8-bit integer numbers) for which the corresponding bits from target vector `c` (sixteen unsigned 8-bit integer numbers) are 0 and leaves unchanged all destination bits for which the corresponding target bits are 1.",
        "suggest": "将源 vector `b` (十六个无符号 8 位整数) 中的所有位复制到目标 vector `a` (十六个无符号 8 位整数)，目标 vector `c` (十六个无符号 8 位整数) 的所有位分别为 0 和保留目标位为 1 的所有目标位不变。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Move If Zero",
        "suggest": "如果为零，则 immediate 移位",
        "translate": ""
    },
    {
        "source": "Copy to destination vector `a` (sixteen unsigned 8-bit integer numbers) all bits from source vector `b` (sixteen unsigned 8-bit integer numbers) for which the corresponding bits from from immediate `imm8` are 0 and leaves unchanged all destination bits for which the corresponding immediate bits are 1.",
        "suggest": "将来自源 vector `b` 的所有位 (来自 immediate  `imm8` 的对应位为 0) 复制到目标 vector `a` (十六个无符号的 8 位整数)，并将所有源目标位保持不变 immediate 数为 1。",
        "translate": ""
    },
    {
        "source": "Vector Bit Negate",
        "suggest": "Vector 位取反",
        "translate": ""
    },
    {
        "source": "Negate (complement) one bit in each element of vector `a` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "对 X0vector0Z `a` 的每个元素中的 (complement) 取反 (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in vector `b` (sixteen unsigned 8-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位位置由 vector `b` 中的元素 (十六个无符号的 8 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "Negate (complement) one bit in each element of vector `a` (eight unsigned 16-bit integer numbers).",
        "suggest": "对 X0vector0Z `a` 的每个元素中的 (complement) 取反 (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in vector `b` (eight unsigned 16-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位位置由 vector `b` 中的元素 (八个无符号 16 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "Negate (complement) one bit in each element of vector `a` (four unsigned 32-bit integer numbers).",
        "suggest": "对 X0vector0Z `a` 的每个元素中的 (complement) 取反 (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in vector `b` (four unsigned 32-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位的位置由 vector `b` 中的元素 (四个无符号的 32 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "Negate (complement) one bit in each element of vector `a` (two unsigned 64-bit integer numbers).",
        "suggest": "对 X0vector0Z `a` 的每个元素中的 (complement) 取反 (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by the elements in vector `b` (two unsigned 64-bit integer numbers) modulo the size of the element in bits.",
        "suggest": "位位置由 vector `b` 中的元素 (两个无符号的 64 位整数) 给定，以元素的大小为模。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Negate",
        "suggest": "Immediate 位求反",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm3` modulo the size of the element in bits.",
        "suggest": "`imm3` 以位为单位，以模数表示元素的大小，以位的形式给出位的位置。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm4` modulo the size of the element in bits.",
        "suggest": "`imm4` 以位为单位，以模数表示元素的大小，以位的形式给出位的位置。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm5` modulo the size of the element in bits.",
        "suggest": "`imm5` 以位为单位，以模数表示元素的大小，以位的形式给出位的位置。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm6` modulo the size of the element in bits.",
        "suggest": "`imm6` 以位为单位，以模数表示元素的大小，以位的形式给出位的位置。",
        "translate": ""
    },
    {
        "source": "Immediate Branch If All Elements Are Not Zero",
        "suggest": "如果所有元素都不为零，则 immediate 分支",
        "translate": ""
    },
    {
        "source": "PC-relative branch if all elements in `a` (sixteen unsigned 8-bit integer numbers) are not zero.",
        "suggest": "如果 `a` 中的所有元素 (十六个无符号的 8 位整数) 都不为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if all elements in `a` (eight unsigned 16-bit integer numbers) are not zero.",
        "suggest": "如果 `a` 中的所有元素 (八个无符号的 16 位整数) 都不为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if all elements in `a` (four unsigned 32-bit integer numbers) are not zero.",
        "suggest": "如果 `a` 中的所有元素 (四个无符号的 32 位整数) 都不为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if all elements in `a` (two unsigned 64-bit integer numbers) are not zero.",
        "suggest": "如果 `a` 中的所有元素 (两个无符号的 64 位整数) 都不为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "Immediate Branch If Not Zero (At Least One Element of Any Format Is Not Zero)",
        "suggest": "Immediate 分支，如果不为零 (任何格式的至少一个元素不为零)",
        "translate": ""
    },
    {
        "source": "PC-relative branch if at least one bit in `a` (four unsigned 32-bit integer numbers) are not zero.",
        "suggest": "如果 `a` 中的至少一位 (四个无符号 32 位整数) 不为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "at least one element is not zero regardless of the data format.",
        "suggest": "无论数据格式如何，至少一个元素都不为零。",
        "translate": ""
    },
    {
        "source": "Vector Bit Select",
        "suggest": "Vector 位选择",
        "translate": ""
    },
    {
        "source": "Selectively copy bits from the source vectors `b` (eight unsigned 16-bit integer numbers) and `c` (eight unsigned 16-bit integer numbers) into destination vector `a` (eight unsigned 16-bit integer numbers) based on the corresponding bit in `a`:",
        "suggest": "根据 `a` 中的相应位，将源 vectors `b` (八个无符号 16 位整数) 和 `c` (八个无符号 16 位整数) 中的位选择性复制到目标 vector `a` (八个无符号 16 位整数) 中:",
        "translate": ""
    },
    {
        "source": "if 0 copies the bit from `b`, if 1 copies the bit from `c`.",
        "suggest": "如果为 0，则从 `b` 复制该位; 如果为 1，则从 `c` 复制该位。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Select",
        "suggest": "Immediate 位选择",
        "translate": ""
    },
    {
        "source": "Selectively copy bits from the 8-bit immediate `imm8` and `c` (eight unsigned 16-bit integer numbers) into destination vector `a` (eight unsigned 16-bit integer numbers) based on the corresponding bit in `a`:",
        "suggest": "根据 `a` 中的相应位，将 8 位 immediate 数 `imm8` 和 `c` (八个无符号的 16 位整数) 中的位选择性地复制到目标 vector `a` (八个无符号的 16 位整数中)。",
        "translate": ""
    },
    {
        "source": "Vector Bit Set",
        "suggest": "Vector 位设置",
        "translate": ""
    },
    {
        "source": "Set to 1 one bit in each element of vector `a` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "在 vector `a` 的每个元素中将 1 设置为 1 (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Set to 1 one bit in each element of vector `a` (eight unsigned 16-bit integer numbers).",
        "suggest": "在 vector `a` 的每个元素中将 1 设置为 1 (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Set to 1 one bit in each element of vector `a` (four unsigned 32-bit integer numbers).",
        "suggest": "在 vector `a` 的每个元素中将 1 设置为 1 (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Set to 1 one bit in each element of vector `a` (two unsigned 64-bit integer numbers).",
        "suggest": "在 vector `a` 的每个元素中将 1 设置为 1 (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Bit Set",
        "suggest": "Immediate 置位",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm3`.",
        "suggest": "该位的位置由 immediate 数 `imm3` 给出。",
        "translate": ""
    },
    {
        "source": "The result is written to vector `a` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "结果写入 vector `a` (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm4`.",
        "suggest": "该位的位置由 immediate 数 `imm4` 给出。",
        "translate": ""
    },
    {
        "source": "The result is written to vector `a` (eight unsigned 16-bit integer numbers).",
        "suggest": "结果写入 vector `a` (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm5`.",
        "suggest": "该位的位置由 immediate 数 `imm5` 给出。",
        "translate": ""
    },
    {
        "source": "The result is written to vector `a` (four unsigned 32-bit integer numbers).",
        "suggest": "将结果写入 vector `a` (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The bit position is given by immediate `imm6`.",
        "suggest": "该位的位置由 immediate 数 `imm6` 给出。",
        "translate": ""
    },
    {
        "source": "The result is written to vector `a` (two unsigned 64-bit integer numbers).",
        "suggest": "结果写入 vector `a` (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Branch If At Least One Element Is Zero",
        "suggest": "如果至少一个元素为零，则 immediate 分支",
        "translate": ""
    },
    {
        "source": "PC-relative branch if at least one element in `a` (sixteen unsigned 8-bit integer numbers) is zero.",
        "suggest": "如果 `a` 中的至少一个元素 (十六个无符号的 8 位整数) 为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if at least one element in `a` (eight unsigned 16-bit integer numbers) is zero.",
        "suggest": "如果 `a` 中的至少一个元素 (八个无符号 16 位整数) 为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if at least one element in `a` (four unsigned 32-bit integer numbers) is zero.",
        "suggest": "如果 `a` 中的至少一个元素 (四个无符号 32 位整数) 为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "PC-relative branch if at least one element in `a` (two unsigned 64-bit integer numbers) is zero.",
        "suggest": "如果 `a` 中的至少一个元素 (两个无符号的 64 位整数) 为零，则为 PC 相对分支。",
        "translate": ""
    },
    {
        "source": "Immediate Branch If Zero (All Elements of Any Format Are Zero)",
        "suggest": "如果为零则 immediate 分支 (任何格式的所有元素均为零)",
        "translate": ""
    },
    {
        "source": "PC-relative branch if all elements in `a` (sixteen unsigned 8-bit integer numbers) bits are zero, i.e.",
        "suggest": "PC 相对分支，如果 `a` (十六个无符号 8 位整数) 位中的所有元素均为零，即",
        "translate": ""
    },
    {
        "source": "all elements are zero regardless of the data format.",
        "suggest": "无论数据格式如何，所有元素均为零。",
        "translate": ""
    },
    {
        "source": "Vector Compare Equal",
        "suggest": "Vector 比较等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) and `b` (sixteen signed 8-bit integer numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数) 和 `b` (十六个带符号的 8 位整数) 元素相等，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) and `b` (eight signed 16-bit integer numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (八个带符号的 16 位整数) 和 `b` (八个带符号的 16 位整数) 元素相等，则在 vector (八个带符号的 16 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) and `b` (four signed 32-bit integer numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个带符号的 32 位整数) 和 `b` (四个带符号的 32 位整数) 元素相等，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则，将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) and `b` (two signed 64-bit integer numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 和 `b` (两个带符号的 64 位整数) 元素相等，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Immediate Compare Equal",
        "suggest": "Immediate 比较等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) the 5-bit signed immediate imm_s5 are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数)，5 位带符号 immediate 数 imm_s5 相等，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) the 5-bit signed immediate imm_s5 are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (8 个带符号的 16 位整数)，5 位带符号 immediate 数 imm_s5 相等，则将 vector (8 个带符号的 16 位整数) 中的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) the 5-bit signed immediate imm_s5 are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个带符号的 32 位整数) 5 位带符号 immediate 数 imm_s5 相等，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) the 5-bit signed immediate imm_s5 are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 5 位带符号 immediate 数 imm_s5 相等，则将 vector (两个带符号的 64 位整数) 中的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "GPR Copy from MSA Control Register",
        "suggest": "来自 MSA 控制寄存器的 GPR 复制",
        "translate": ""
    },
    {
        "source": "The sign extended content of MSA control register cs is copied to GPR rd.",
        "suggest": "MSA 控制寄存器 cs 的符号扩展内容被复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Can not be tested in user mode",
        "suggest": "无法在用户模式下进行测试",
        "translate": ""
    },
    {
        "source": "Vector Compare Signed Less Than or Equal",
        "suggest": "Vector 比较有符号小于或等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) element are signed less than or equal to `b` (sixteen signed 8-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数) 的元素的符号小于或等于 `b` (十六个带符号的 8 位整数) 的元素，则将 vector (十六个带符号的 8 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Otherwise set all bits to 0.",
        "suggest": "否则，将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) element are signed less than or equal to `b` (eight signed 16-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (八个带符号的 16 位整数) 元素的符号小于或等于 `b` (八个带符号的 16 位整数) 元素，则将 vector (八个带符号的 16 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) element are signed less than or equal to `b` (four signed 32-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (四个带符号的 32 位整数) 元素的符号小于或等于 `b` (四个带符号的 32 位整数) 元素，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) element are signed less than or equal to `b` (two signed 64-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 元素的符号小于或等于 `b` (两个带符号的 64 位整数) 元素，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Vector Compare Unsigned Less Than or Equal",
        "suggest": "Vector 比较无符号小于或等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen unsigned 8-bit integer numbers) element are unsigned less than or equal to `b` (sixteen unsigned 8-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (十六个无符号的 8 位整数) 的无符号数小于或等于 `b` (十六个无符号的 8 位整数) 的元素，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight unsigned 16-bit integer numbers) element are unsigned less than or equal to `b` (eight unsigned 16-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (八个无符号的 16 位整数) 的无符号数小于或等于 `b` (八个无符号的 16 位整数) 的元素，则将 vector (八个有符号的 16 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four unsigned 32-bit integer numbers) element are unsigned less than or equal to `b` (four unsigned 32-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (四个无符号的 32 位整数) 元素的无符号数小于或等于 `b` (四个无符号的 32 位整数) 元素，则将 vector (四个有符号的 32 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two unsigned 64-bit integer numbers) element are unsigned less than or equal to `b` (two unsigned 64-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (两个无符号的 64 位整数) 元素无符号小于或等于 `b` (两个无符号的 64 位整数) 元素，则将 vector (两个有符号的 64 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Immediate Compare Signed Less Than or Equal",
        "suggest": "Immediate 比较有符号小于或等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) element is less than or equal to the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数) 个元素小于或等于 5 位带符号 immediate 数 imm_s5，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) element is less than or equal to the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果对应的 `a` (八个带符号的 16 位整数) 元素小于或等于 5 个带符号 immediate 数 imm_s5，则将 vector (八个带符号的 16 位整数) 元素中的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) element is less than or equal to the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果对应的 `a` (四个带符号的 32 位整数) 元素小于或等于 5 位带符号 immediate 数 imm_s5，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) element is less than or equal to the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 个元素小于或等于 5 个带符号 immediate 数 imm_s5，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Immediate Compare Unsigned Less Than or Equal",
        "suggest": "Immediate 比较无符号小于或等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen unsigned 8-bit integer numbers) element is unsigned less than or equal to the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个无符号的 8 位整数) 的无符号数小于或等于 5 位无符号 immediate 数 `imm5`，则在 vector (十六个带符号的 8 位整数) 的元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight unsigned 16-bit integer numbers) element is unsigned less than or equal to the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (八个无符号的 16 位整数) 的无符号数小于或等于 5 位无符号 immediate 数 `imm5`，则在 vector (八个有符号的 16 位整数) 的元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four unsigned 32-bit integer numbers) element is unsigned less than or equal to the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个无符号的 32 位整数) 的无符号数小于或等于 5 位无符号 immediate 数 `imm5`，则在 vector (四个有符号的 32 位整数) 的元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two unsigned 64-bit integer numbers) element is unsigned less than or equal to the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个无符号的 64 位整数) 元素的无符号数小于或等于 5 位无符号 immediate 数 `imm5`，则在 vector (两个有符号的 64 位整数数字) 元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Vector Compare Signed Less Than",
        "suggest": "Vector 比较有符号小于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) element are signed less than `b` (sixteen signed 8-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数) 的符号小于 `b` (十六个带符号的 8 位整数) 的元素，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) element are signed less than `b` (eight signed 16-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (八个带符号的 16 位整数) 的符号小于 `b` (八个带符号的 16 位整数) 的元素，则将 vector (八个带符号的 16 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) element are signed less than `b` (four signed 32-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (四个带符号的 32 位整数) 元素的符号小于 `b` (四个带符号的 32 位整数) 元素，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) element are signed less than `b` (two signed 64-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 元素的符号小于 `b` (两个带符号的 64 位整数) 元素，则将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Vector Compare Unsigned Less Than",
        "suggest": "Vector 比较无符号小于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen unsigned 8-bit integer numbers) element are unsigned less than `b` (sixteen unsigned 8-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (十六个无符号的 8 位整数) 的元素的无符号数小于 `b` (十六个无符号的 8 位整数) 的元素，则将 vector (十六个带符号的 8 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight unsigned 16-bit integer numbers) element are unsigned less than `b` (eight unsigned 16-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (八个无符号的 16 位整数) 的无符号数小于 `b` (八个无符号的 16 位整数) 的元素，则将 vector (八个有符号的 16 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four unsigned 32-bit integer numbers) element are unsigned less than `b` (four unsigned 32-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (四个无符号 32 位整数) 元素的无符号数小于 `b` (四个无符号 32 位整数) 元素，则将 vector (四个有符号 32 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two unsigned 64-bit integer numbers) element are unsigned less than `b` (two unsigned 64-bit integer numbers) element.",
        "suggest": "如果相应的 `a` (两个无符号的 64 位整数) 元素的无符号数小于 `b` (两个无符号的 64 位整数) 元素，则将 vector (两个有符号的 64 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Immediate Compare Signed Less Than",
        "suggest": "Immediate 比较有符号少于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen signed 8-bit integer numbers) element is less than the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个带符号的 8 位整数) 个元素小于 5 位带符号 immediate 数 imm_s5，则在 vector (十六个带符号的 8 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight signed 16-bit integer numbers) element is less than the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (八个带符号的 16 位整数) 的元素小于 5 个带符号 immediate 数 imm_s5，则将 vector (八个带符号的 16 位整数) 的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four signed 32-bit integer numbers) element is less than the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个带符号的 32 位整数) 个元素小于 5 个带符号的 immediate 数 imm_s5，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two signed 64-bit integer numbers) element is less than the 5-bit signed immediate imm_s5, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个带符号的 64 位整数) 个元素小于 5 个带符号的 immediate 数 imm_s5，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Immediate Compare Unsigned Less Than",
        "suggest": "Immediate 比较无符号数小于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (sixteen signed 8-bit integer numbers) elements if the corresponding `a` (sixteen unsigned 8-bit integer numbers) element is unsigned less than the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (十六个无符号的 8 位整数) 的无符号数小于 5 位无符号 immediate 数 `imm5`，则将 vector (十六个带符号的 8 位整数) 的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (eight signed 16-bit integer numbers) elements if the corresponding `a` (eight unsigned 16-bit integer numbers) element is unsigned less than the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (八个无符号的 16 位整数) 的无符号数小于 5 位无符号 immediate 数 `imm5`，则将 vector (八个有符号的 16 位整数) 的所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four unsigned 32-bit integer numbers) element is unsigned less than the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个无符号的 32 位整数) 个元素的无符号数小于 5 个无符号 immediate 数 `imm5`，则在 vector (四个有符号的 32 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two unsigned 64-bit integer numbers) element is unsigned less than the 5-bit unsigned immediate `imm5`, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个无符号的 64 位整数) 的元素的无符号数小于 5 位无符号 immediate 数 `imm5`，则在 vector (两个有符号的 64 位整数) 的元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Element Copy to GPR Signed",
        "suggest": "元素复制到 GPR 已签名",
        "translate": ""
    },
    {
        "source": "Sign-extend element `imm4` of vector `a` (sixteen signed 8-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的符号扩展元素 `imm4` (十六个带符号的 8 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Sign-extend element `imm3` of vector `a` (eight signed 16-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的符号扩展元素 `imm3` (八个带符号的 16 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Sign-extend element `imm2` of vector `a` (four signed 32-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的符号扩展元素 `imm2` (四个带符号的 32 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Sign-extend element `imm1` of vector `a` (two signed 64-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的符号扩展元素 `imm1` (两个带符号的 64 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Element Copy to GPR Unsigned",
        "suggest": "元素复制到 GPR (未签名)",
        "translate": ""
    },
    {
        "source": "Zero-extend element `imm4` of vector `a` (sixteen signed 8-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的零扩展元素 `imm4` (十六个带符号的 8 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Zero-extend element `imm3` of vector `a` (eight signed 16-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的零扩展元素 `imm3` (八个带符号的 16 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Zero-extend element `imm2` of vector `a` (four signed 32-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的零扩展元素 `imm2` (四个带符号的 32 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "Zero-extend element `imm1` of vector `a` (two signed 64-bit integer numbers) and copy the result to GPR rd.",
        "suggest": "vector `a` 的零扩展元素 `imm1` (两个带符号的 64 位整数) 并将结果复制到 GPR rd。",
        "translate": ""
    },
    {
        "source": "GPR Copy to MSA Control Register",
        "suggest": "GPR 复制到 MSA 控制寄存器",
        "translate": ""
    },
    {
        "source": "The content of the least significant 31 bits of GPR `imm1` is copied to MSA control register cd.",
        "suggest": "GPR `imm1` 的最低有效 31 位的内容被复制到 MSA 控制寄存器 cd。",
        "translate": ""
    },
    {
        "source": "Vector Signed Divide",
        "suggest": "Vector 有符号分隔",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (sixteen signed 8-bit integer numbers) are divided by signed integer elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` (十六个带符号的 8 位整数) 中的有符号整数元素除以 vector `b` (十六个带符号的 8 位整数) 中的有符号整数元素。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (eight signed 16-bit integer numbers) are divided by signed integer elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的有符号整数元素除以 vector `b` (八个带符号的 16 位整数) 中的有符号整数元素。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (four signed 32-bit integer numbers) are divided by signed integer elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个有符号的 32 位整数) 中的有符号整数元素除以 vector `b` (四个有符号的 32 位整数) 中的有符号整数元素。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (two signed 64-bit integer numbers) are divided by signed integer elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "vector `a` (两个有符号的 64 位整数) 中的有符号整数元素除以 vector `b` (两个有符号的 64 位整数) 中的有符号整数元素。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Divide",
        "suggest": "Vector 无符号除法",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (sixteen unsigned 8-bit integer numbers) are divided by unsigned integer elements in vector `b` (sixteen unsigned 8-bit integer numbers).",
        "suggest": "vector `a` 中的无符号整数元素 (十六个无符号 8 位整数) 除以 vector `b` 中的无符号整数元素 (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (eight unsigned 16-bit integer numbers) are divided by unsigned integer elements in vector `b` (eight unsigned 16-bit integer numbers).",
        "suggest": "vector `a` 中的无符号整数元素 (八个无符号 16 位整数) 除以 vector `b` 中的无符号整数元素 (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (four unsigned 32-bit integer numbers) are divided by unsigned integer elements in vector `b` (four unsigned 32-bit integer numbers).",
        "suggest": "vector `a` 中的无符号整数元素 (四个无符号 32 位整数) 除以 vector `b` 中的无符号整数元素 (四个无符号 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (two unsigned 64-bit integer numbers) are divided by unsigned integer elements in vector `b` (two unsigned 64-bit integer numbers).",
        "suggest": "vector `a` (两个无符号的 64 位整数) 中的无符号整数元素除以 vector `b` (两个无符号的 64 位整数) 中的无符号整数元素。",
        "translate": ""
    },
    {
        "source": "Vector Signed Dot Product",
        "suggest": "Vector 有符号点积",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (sixteen signed 8-bit integer numbers) are multiplied by signed integer elements in vector `b` (sixteen signed 8-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "将 vector `a` (十六个带符号的 8 位整数) 中的有符号整数元素与 vector `b` (十六个带符号的 8 位整数) 中的有符号整数元素相乘，生成结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (eight signed 16-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (eight signed 16-bit integer numbers) are multiplied by signed integer elements in vector `b` (eight signed 16-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的有符号整数元素与 vector `b` (八个带符号的 16 位整数中) 的有符号整数元素相乘，生成结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (four signed 32-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (four signed 32-bit integer numbers) are multiplied by signed integer elements in vector `b` (four signed 32-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "将 vector `a` (四个有符号的 32 位整数) 中的有符号整数元素与 vector `b` (四个有符号的 32 位整数) 中的有符号整数元素相乘，生成结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (two signed 64-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Dot Product",
        "suggest": "Vector 无符号点积",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (sixteen unsigned 8-bit integer numbers) are multiplied by unsigned integer elements in vector `b` (sixteen unsigned 8-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "将 vector `a` 中的无符号整数元素 (十六个无符号 8 位整数) 乘以 vector `b` 中的无符号整数元素 (十六个 8 位无符号整数)，得到结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (eight unsigned 16-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (eight unsigned 16-bit integer numbers) are multiplied by unsigned integer elements in vector `b` (eight unsigned 16-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "将 vector `a` 中的无符号整数元素 (八个无符号 16 位整数) 与 vector `b` 中的无符号整数元素 (八个无符号 16 位整数) 相乘，得出结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (four unsigned 32-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (four unsigned 32-bit integer numbers) are multiplied by unsigned integer elements in vector `b` (four unsigned 32-bit integer numbers) producing a result the size of the input operands.",
        "suggest": "vector `a` (四个无符号的 32 位整数) 中的无符号整数元素与 vector `b` (四个无符号的 32 位整数) 中的无符号整数元素相乘，产生结果为输入操作数的大小。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added and stored to the destination vector (two unsigned 64-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果相加并存储到目标 vector (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Signed Dot Product and Add",
        "suggest": "Vector 有符号点积并添加",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `b` (sixteen signed 8-bit integer numbers) are multiplied by signed integer elements in vector `c` (sixteen signed 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `b` (十六个带符号的 8 位整数) 中的有符号整数元素与 vector `c` (十六个带符号的 8 位整数) 中的有符号整数元素相乘，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果被添加到 vector `a` (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `b` (eight signed 16-bit integer numbers) are multiplied by signed integer elements in vector `c` (eight signed 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (八个带符号的 16 位整数) 中的有符号整数元素与 vector `c` (八个带符号的 16 位整数) 中的有符号整数元素相乘，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (four signed 32-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果被添加到 vector `a` (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `b` (four signed 32-bit integer numbers) are multiplied by signed integer elements in vector `c` (four signed 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (四个有符号的 32 位整数) 中的有符号整数元素与 vector `c` (四个有符号的 32 位整数) 中的有符号整数元素相乘，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (two signed 64-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果被添加到 vector `a` (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Dot Product and Add",
        "suggest": "Vector 无符号点积和加法",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `b` (sixteen unsigned 8-bit integer numbers) are multiplied by unsigned integer elements in vector `c` (sixteen unsigned 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` 中的无符号整数元素 (十六个无符号的 8 位整数) 与 vector `c` 中的无符号整数元素 (十六个无符号 8 位整数) 相乘，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (eight unsigned 16-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的相乘结果加到 vector `a` (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `b` (eight unsigned 16-bit integer numbers) are multiplied by unsigned integer elements in vector `c` (eight unsigned 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` 中的无符号整数元素 (八个无符号 16 位整数) 与 vector `c` 中的无符号整数元素 (八个无符号 16 位整数) 相乘，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (four unsigned 32-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果被添加到 vector `a` (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `b` (four unsigned 32-bit integer numbers) are multiplied by unsigned integer elements in vector `c` (four unsigned 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (四个无符号的 32 位整数) 中的无符号整数元素与 vector `c` (四个无符号的 32 位整数) 中的无符号整数元素相乘，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are added to the vector `a` (two unsigned 64-bit integer numbers).",
        "suggest": "相邻 odd/even 元素的乘法结果被添加到 vector `a` (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are subtracted from the integer elements in vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "从 vector `a` (八个带符号的 16 位整数) 中的整数元素中减去相邻 odd/even 元素的乘法结果。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are subtracted from the integer elements in vector `a` (four signed 32-bit integer numbers).",
        "suggest": "从 vector `a` 中的整数元素 (四个带符号的 32 位整数) 中减去相邻 odd/even 元素的乘法结果。",
        "translate": ""
    },
    {
        "source": "The multiplication results of adjacent odd/even elements are subtracted from the integer elements in vector `a` (two signed 64-bit integer numbers).",
        "suggest": "从 vector `a` 中的整数元素 (两个带符号的 64 位整数) 中减去相邻 odd/even 元素的乘法结果。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Addition",
        "suggest": "Vector 浮点加法",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 32-bit floating point numbers) are added to the floating-point elements in `bc` (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 中的浮点元素被添加到 `bc` (四个 32 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (four 32-bit floating point numbers).",
        "suggest": "将结果写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) are added to the floating-point elements in `bc` (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 中的浮点元素被添加到 `bc` (两个 64 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (two 64-bit floating point numbers).",
        "suggest": "结果写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Always False",
        "suggest": "Vector 浮点静态比较始终为 False",
        "translate": ""
    },
    {
        "source": "Set all bits to 0 in vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector 中的所有位设置为 0 (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Signaling NaN elements in `a` (four 32-bit floating point numbers) or `b` (four 32-bit floating point numbers) signal Invalid Operation exception.",
        "suggest": "在 `a` (四个 32 位浮点数) 或 `b` (四个 32 位浮点数) 中用信号通知 NaN 元素表示无效操作异常。",
        "translate": ""
    },
    {
        "source": "Set all bits to 0 in vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector 中的所有位设置为 0 (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Signaling NaN elements in `a` (two 64-bit floating point numbers) or `b` (two 64-bit floating point numbers) signal Invalid Operation exception.",
        "suggest": "在 `a` (两个 64 位浮点数) 或 `b` (两个 64 位浮点数) 中用信号通知 NaN 元素表示无效操作异常。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Equal",
        "suggest": "Vector 浮点静态等于比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding in `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are ordered and equal, otherwise set all bits to 0.",
        "suggest": "如果 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素中的对应元素已排序且相等，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding in `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are ordered and equal, otherwise set all bits to 0.",
        "suggest": "如果 `a` (两个 64 位浮点数字) 和 `b` (两个 64 位浮点数字) 元素中的对应元素已排序且相等，则将 vector (两个带符号的 64 位整数数字) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Class Mask",
        "suggest": "Vector 浮点类掩码",
        "translate": ""
    },
    {
        "source": "Store in each element of vector (four signed 32-bit integer numbers) a bit mask reflecting the floating-point class of the corresponding element of vector `a` (four 32-bit floating point numbers).",
        "suggest": "在 vector (四个带符号的 32 位整数) 的每个元素中存储一个位掩码，该掩码反映 vector `a` (四个 32 位浮点数) 的相应元素的浮点类。",
        "translate": ""
    },
    {
        "source": "The mask has 10 bits as follows.",
        "suggest": "掩码具有 10 位，如下所示。",
        "translate": ""
    },
    {
        "source": "Bits 0 and 1 indicate NaN values: signaling NaN (bit 0) and quiet NaN (bit 1).",
        "suggest": "位 0 和 1 表示 NaN 值: 发信号通知 NaN (位 0) 和静默 NaN (位 1)。",
        "translate": ""
    },
    {
        "source": "Bits 2, 3, 4, 5 classify negative values: infinity (bit 2), normal (bit 3), subnormal (bit 4), and zero (bit 5).",
        "suggest": "位 2、3、4、5 对负值进行分类: 无限 (位 2)，正常 (位 3)，正常以下 (位 4) 和零 (位 5)。",
        "translate": ""
    },
    {
        "source": "Bits 6, 7, 8, 9 classify positive values: infinity (bit 6), normal (bit 7), subnormal (bit 8), and zero (bit 9).",
        "suggest": "位 6、7、8、9 对正值进行分类: 无穷大 (位 6)，正常 (位 7)，正常以下 (位 8) 和零 (位 9)。",
        "translate": ""
    },
    {
        "source": "Store in each element of vector (two signed 64-bit integer numbers) a bit mask reflecting the floating-point class of the corresponding element of vector `a` (two 64-bit floating point numbers).",
        "suggest": "在 vector (两个带符号的 64 位整数) 的每个元素中存储一个位掩码，该掩码反映 vector `a` (两个 64 位浮点数) 的相应元素的浮点类。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Less or Equal",
        "suggest": "Vector 浮点静态少于或相等比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are ordered and either less than or equal to `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果订购了相应的 `a` (四个 32 位浮点数) 元素且小于或等于 `b` (四个 32 位浮点数)，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1。元素，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are ordered and either less than or equal to `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果订购了相应的 `a` (两个 64 位浮点数) 元素且小于或等于 `b` (两个 64 位浮点数)，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1。元素，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Less Than",
        "suggest": "Vector 浮点静态少于比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are ordered and less than `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果订购了相应的 `a` (四个 32 位浮点数) 元素且小于 `b` (四个 32 位浮点数) 元素，则将 vector (四个带符号的 32 位整数) 元素中的所有位都设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are ordered and less than `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果订购了相应的 `a` (两个 64 位浮点数字) 元素且小于 `b` (两个 64 位浮点数字) 元素，则将 vector (两个带符号的 64 位整数数字) 元素中的所有位设置为 1，否则设置为 `b` (两个 64 位浮点数字) 元素。所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Not Equal",
        "suggest": "Vector 浮点静态比较不等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are ordered and not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素已排序且不相等，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are ordered and not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素是有序且不相等的，则将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Ordered",
        "suggest": "Vector 浮点静态有序比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are ordered, i.e.",
        "suggest": "如果订购了相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，即",
        "translate": ""
    },
    {
        "source": "both elements are not NaN values, otherwise set all bits to 0.",
        "suggest": "这两个元素都不是 NaN 值，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are ordered, i.e.",
        "suggest": "如果订购了相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素，则将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 1，即",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Unordered or Equal",
        "suggest": "Vector 浮点静态无序或相等比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are unordered or equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素无序或相等，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则设置所有位为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are unordered or equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素无序或相等，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则设置所有位为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Unordered or Less or Equal",
        "suggest": "Vector 浮点静态无序或更少或相等比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding elements in `a` (four 32-bit floating point numbers) are unordered or less than or equal to `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果 `a` (四个 32 位浮点数) 中的对应元素无序或小于或等于 `b` (四个 32 位浮点数)，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1。元素，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding elements in `a` (two 64-bit floating point numbers) are unordered or less than or equal to `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果 `a` (两个 64 位浮点数) 中的相应元素无序或小于或等于 `b` (两个 64 位浮点数)，则将 vector (两个有符号的 64 位整数) 元素中的所有位设置为 1。元素，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Unordered or Less Than",
        "suggest": "Vector 浮点静态无序或小于比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding elements in `a` (four 32-bit floating point numbers) are unordered or less than `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果 `a` (四个 32 位浮点数) 中的相应元素是无序的或小于 `b` (四个 32 位浮点数) 元素，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则，将其设置为零。将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding elements in `a` (two 64-bit floating point numbers) are unordered or less than `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果 `a` (两个 64 位浮点数) 中的相应元素是无序的或小于 `b` (两个 64 位浮点数) 元素，则将 vector (两个有符号的 64 位整数) 元素中的所有位设置为 1，否则，将 vector (两个有符号的 64 位整数) 中的所有元素设置为 1。将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Unordered",
        "suggest": "Vector 浮点静态无序比较",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are unordered, i.e.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素是无序的，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "at least one element is a NaN value, otherwise set all bits to 0.",
        "suggest": "至少一个元素为 NaN 值，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are unordered, i.e.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素是无序的，则将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 1。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Quiet Compare Unordered or Not Equal",
        "suggest": "Vector 浮点比较无序或不相等",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are unordered or not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素无序或不相等，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are unordered or not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素无序或不相等，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Division",
        "suggest": "Vector 浮点除法",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 32-bit floating point numbers) are divided by the floating-point elements in vector `b` (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 中的浮点元素除以 vector `b` (四个 32 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) are divided by the floating-point elements in vector `b` (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 中的浮点元素除以 vector `b` (两个 64 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Down-Convert Interchange Format",
        "suggest": "Vector 浮点下转换转换格式",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 64-bit floating point numbers) and vector `b` (four 64-bit floating point numbers) are down-converted to a smaller interchange format, i.e.",
        "suggest": "vector `a` (四个 64 位浮点数) 和 vector `b` (四个 64 位浮点数) 中的浮点元素被下转换为较小的交换格式，即",
        "translate": ""
    },
    {
        "source": "from 64-bit to 32-bit, or from 32-bit to 16-bit.",
        "suggest": "从 64 位到 32 位，或从 32 位到 16 位。",
        "translate": ""
    },
    {
        "source": "The result is written to vector (8 16-bit floating point numbers).",
        "suggest": "将结果写入 vector (8 个 16 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) and vector `b` (two 64-bit floating point numbers) are down-converted to a smaller interchange format, i.e.",
        "suggest": "vector `a` (两个 64 位浮点数) 和 vector `b` (两个 64 位浮点数) 中的浮点元素被下转换为较小的交换格式，即",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 32-bit floating point numbers) are scaled, i.e.",
        "suggest": "vector `a` (四个 32 位浮点数) 中的浮点元素被缩放，即",
        "translate": ""
    },
    {
        "source": "multiplied, by 2 to the power of integer elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "将 vector `b` 中的整数元素的幂乘以 2 (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) are scaled, i.e.",
        "suggest": "vector `a` (两个 64 位浮点数) 中的浮点元素被缩放，即",
        "translate": ""
    },
    {
        "source": "multiplied, by 2 to the power of integer elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "将 vector `b` 中的整数元素的幂乘以 2 (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Up-Convert Interchange Format Left",
        "suggest": "Vector 浮点上转换转换格式左",
        "translate": ""
    },
    {
        "source": "The left half floating-point elements in vector `a` (two 16-bit floating point numbers) are up-converted to a larger interchange format, i.e.",
        "suggest": "vector `a` 中的左半个浮点元素 (两个 16 位浮点数) 被上转换为更大的交换格式，即",
        "translate": ""
    },
    {
        "source": "from 16-bit to 32-bit, or from 32-bit to 64-bit.",
        "suggest": "从 16 位到 32 位，或从 32 位到 64 位。",
        "translate": ""
    },
    {
        "source": "The left half floating-point elements in vector `a` (four 32-bit floating point numbers) are up-converted to a larger interchange format, i.e.",
        "suggest": "vector `a` 中的左半个浮点元素 (四个 32 位浮点数) 被上转换为更大的交换格式，即",
        "translate": ""
    },
    {
        "source": "The right half floating-point elements in vector `a` (two 16-bit floating point numbers) are up-converted to a larger interchange format, i.e.",
        "suggest": "vector `a` 中的右半个浮点元素 (两个 16 位浮点数) 被上转换为更大的交换格式，即",
        "translate": ""
    },
    {
        "source": "The right half floating-point elements in vector `a` (four 32-bit floating point numbers) are up-converted to a larger interchange format, i.e.",
        "suggest": "vector `a` 中的右半个浮点元素 (四个 32 位浮点数) 被上转换为更大的交换格式，即",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Round and Convert from Signed Integer",
        "suggest": "Vector 浮点数舍入并从有符号整数转换",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (four signed 32-bit integer numbers) are converted to floating-point values.",
        "suggest": "vector `a` 中的带符号整数元素 (四个带符号的 32 位整数) 将转换为浮点值。",
        "translate": ""
    },
    {
        "source": "The signed integer elements in vector `a` (two signed 64-bit integer numbers) are converted to floating-point values.",
        "suggest": "vector `a` 中的带符号整数元素 (两个带符号的 64 位整数) 将转换为浮点值。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Round and Convert from Unsigned Integer",
        "suggest": "Vector 浮点数舍入并从无符号整数转换",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (four unsigned 32-bit integer numbers) are converted to floating-point values.",
        "suggest": "vector `a` 中的无符号整数元素 (四个无符号 32 位整数) 将转换为浮点值。",
        "translate": ""
    },
    {
        "source": "The unsigned integer elements in vector `a` (two unsigned 64-bit integer numbers) are converted to floating-point values.",
        "suggest": "vector `a` 中的无符号整数元素 (两个无符号 64 位整数) 将转换为浮点值。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Convert from Fixed-Point Left",
        "suggest": "Vector 浮点数从定点左转换",
        "translate": ""
    },
    {
        "source": "The left half fixed-point elements in vector `a` (eight signed 16-bit integer numbers) are up-converted to floating-point data format.",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的左半个定点元素被上转换为浮点数据格式。",
        "translate": ""
    },
    {
        "source": "from 16-bit Q15 to 32-bit floating-point, or from 32-bit Q31 to 64-bit floating-point.",
        "suggest": "从 16 位 Q15 到 32 位浮点，或从 32 位 Q31 到 64 位浮点。",
        "translate": ""
    },
    {
        "source": "The left half fixed-point elements in vector `a` (four signed 32-bit integer numbers) are up-converted to floating-point data format.",
        "suggest": "vector `a` 的左半个定点元素 (四个带符号的 32 位整数) 被上转换为浮点数据格式。",
        "translate": ""
    },
    {
        "source": "The right half fixed-point elements in vector `a` (eight signed 16-bit integer numbers) are up-converted to floating-point data format.",
        "suggest": "vector `a` 中的右半定点元素 (八个带符号的 16 位整数) 被上转换为浮点数据格式。",
        "translate": ""
    },
    {
        "source": "The right half fixed-point elements in vector `a` (four signed 32-bit integer numbers) are up-converted to floating-point data format.",
        "suggest": "vector `a` 中的右半定点元素 (四个带符号的 32 位整数) 被上转换为浮点数据格式。",
        "translate": ""
    },
    {
        "source": "Vector Fill from GPR",
        "suggest": "Vector 来自 GPR 的填充",
        "translate": ""
    },
    {
        "source": "Replicate GPR rs value to all elements in vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 GPR rs 值复制到 vector 中的所有元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "If the source GPR is wider than the destination data format, the destination's elements will be set to the least significant bits of the GPR.",
        "suggest": "如果源 GPR 比目标数据格式宽，则目标元素将设置为 GPR 的最低有效位。",
        "translate": ""
    },
    {
        "source": "Replicate GPR rs value to all elements in vector (eight signed 16-bit integer numbers).",
        "suggest": "将 GPR rs 值复制到 vector 中的所有元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Replicate GPR rs value to all elements in vector (four signed 32-bit integer numbers).",
        "suggest": "将 GPR rs 值复制到 vector 中的所有元素 (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Replicate GPR rs value to all elements in vector (two signed 64-bit integer numbers).",
        "suggest": "将 GPR rs 值复制到 vector 中的所有元素 (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Base 2 Logarithm",
        "suggest": "Vector 浮点以 2 为底的对数",
        "translate": ""
    },
    {
        "source": "The signed integral base 2 exponents of floating-point elements in vector `a` (four 32-bit floating point numbers) are written as floating-point values to vector elements (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 中带符号的浮点元素的基数为 2 的指数被作为浮点值写入 vector 元素 (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The signed integral base 2 exponents of floating-point elements in vector `a` (two 64-bit floating point numbers) are written as floating-point values to vector elements (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 中带符号的浮点元素的基数为 2 的指数被作为浮点值写入 vector 元素 (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Multiply-Add",
        "suggest": "Vector 浮点乘以相加",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (four 32-bit floating point numbers) multiplied by floating-point elements in vector `c` (four 32-bit floating point numbers) are added to the floating-point elements in vector `a` (four 32-bit floating point numbers).",
        "suggest": "vector `b` (四个 32 位浮点数) 中的浮点元素与 vector `c` (四个 32 位浮点数) 中的浮点元素相乘的值被添加到 vector `a` (四个 32 - 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (two 64-bit floating point numbers) multiplied by floating-point elements in vector `c` (two 64-bit floating point numbers) are added to the floating-point elements in vector `a` (two 64-bit floating point numbers).",
        "suggest": "将 vector `b` (两个 64 位浮点数) 中的浮点元素与 vector `c` (两个 64 位浮点数) 中的浮点元素相乘，再添加到 vector `a` (两个 64 - 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Maximum",
        "suggest": "Vector 浮点最大值",
        "translate": ""
    },
    {
        "source": "The largest values between corresponding floating-point elements in vector `a` (four 32-bit floating point numbers) and vector `b` (four 32-bit floating point numbers) are written to vector (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 和 vector `b` (四个 32 位浮点数) 中相应浮点元素之间的最大值被写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The largest values between corresponding floating-point elements in vector `a` (two 64-bit floating point numbers) and vector `b` (two 64-bit floating point numbers) are written to vector (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 和 vector `b` (两个 64 位浮点数) 中相应浮点元素之间的最大值被写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Maximum Based on Absolute Values",
        "suggest": "Vector 基于绝对值的浮点最大值",
        "translate": ""
    },
    {
        "source": "The value with the largest magnitude, i.e.",
        "suggest": "幅度最大的值，即",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding floating-point elements in vector `a` (four 32-bit floating point numbers) and vector `b` (four 32-bit floating point numbers) are written to vector (four 32-bit floating point numbers).",
        "suggest": "将 vector `a` (四个 32 位浮点数) 和 vector `b` (四个 32 位浮点数) 中相应浮点元素之间的绝对值写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding floating-point elements in vector `a` (two 64-bit floating point numbers) and vector `b` (two 64-bit floating point numbers) are written to vector (two 64-bit floating point numbers).",
        "suggest": "将 vector `a` (两个 64 位浮点数) 和 vector `b` (两个 64 位浮点数) 中相应浮点元素之间的绝对值写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Minimum",
        "suggest": "Vector 最小浮点数",
        "translate": ""
    },
    {
        "source": "The smallest values between corresponding floating-point elements in vector `a` (four 32-bit floating point numbers) and vector `b` (four 32-bit floating point numbers) are written to vector (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 和 vector `b` (四个 32 位浮点数) 中相应浮点元素之间的最小值被写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The smallest values between corresponding floating-point elements in vector `a` (two 64-bit floating point numbers) and vector `b` (two 64-bit floating point numbers) are written to vector (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 和 vector `b` (两个 64 位浮点数) 中相应浮点元素之间的最小值被写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Minimum Based on Absolute Values",
        "suggest": "基于绝对值的 Vector 浮点最小值",
        "translate": ""
    },
    {
        "source": "The value with the smallest magnitude, i.e.",
        "suggest": "幅度最小的值，即",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Multiply-Sub",
        "suggest": "Vector 浮点乘减",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (four 32-bit floating point numbers) multiplied by floating-point elements in vector `c` (four 32-bit floating point numbers) are subtracted from the floating-point elements in vector `a` (four 32-bit floating point numbers).",
        "suggest": "从 vector `a` (四个 32 位浮点数) 中减去 vector `b` (四个 32 位浮点数) 中的浮点元素乘以 vector `c` (四个 32 位浮点数) 中的浮点元素。位浮点数)。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (two 64-bit floating point numbers) multiplied by floating-point elements in vector `c` (two 64-bit floating point numbers) are subtracted from the floating-point elements in vector `a` (two 64-bit floating point numbers).",
        "suggest": "vector `b` (两个 64 位浮点数) 中的浮点元素与 vector `c` (两个 64 位浮点数) 中的浮点元素相乘，则从 vector `a` (两个 64 - 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Multiplication",
        "suggest": "Vector 浮点乘法",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 32-bit floating point numbers) are multiplied by floating-point elements in vector `b` (four 32-bit floating point numbers).",
        "suggest": "vector `a` (四个 32 位浮点数) 中的浮点元素与 vector `b` (四个 32 位浮点数) 中的浮点元素相乘。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) are multiplied by floating-point elements in vector `b` (two 64-bit floating point numbers).",
        "suggest": "vector `a` (两个 64 位浮点数) 中的浮点元素与 vector `b` (两个 64 位浮点数) 中的浮点元素相乘。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Round to Integer",
        "suggest": "Vector 浮点数舍入为整数",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (four 32-bit floating point numbers) are rounded to an integral valued floating-point number in the same format based on the rounding mode bits RM in MSA Control and Status Register MSACSR.",
        "suggest": "基于 MSA 控制和状态寄存器 MSACSR 中的舍入模式位 RM，vector `a` 中的浮点元素 (四个 32 位浮点数) 将以相同格式四舍五入为整数值的浮点数。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `a` (two 64-bit floating point numbers) are rounded to an integral valued floating-point number in the same format based on the rounding mode bits RM in MSA Control and Status Register MSACSR.",
        "suggest": "基于 MSA 控制和状态寄存器 MSACSR 中的舍入模式位 RM，vector `a` 中的浮点元素 (两个 64 位浮点数) 以相同格式舍入为整数值的浮点数。",
        "translate": ""
    },
    {
        "source": "Vector Approximate Floating-Point Reciprocal",
        "suggest": "Vector 近似浮点倒数",
        "translate": ""
    },
    {
        "source": "The reciprocals of floating-point elements in vector `a` (four 32-bit floating point numbers) are calculated and the result is written to vector (four 32-bit floating point numbers).",
        "suggest": "计算 vector `a` (四个 32 位浮点数) 中浮点元素的倒数，并将结果写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The reciprocals of floating-point elements in vector `a` (two 64-bit floating point numbers) are calculated and the result is written to vector (two 64-bit floating point numbers).",
        "suggest": "计算 vector `a` (两个 64 位浮点数) 中浮点元素的倒数，并将结果写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Approximate Floating-Point Reciprocal of Square Root",
        "suggest": "Vector 平方根的近似浮点倒数",
        "translate": ""
    },
    {
        "source": "The reciprocals of the square roots of floating-point elements in vector `a` (four 32-bit floating point numbers) are calculated and the result is written to vector (four 32-bit floating point numbers).",
        "suggest": "计算 vector `a` (四个 32 位浮点数) 中浮点元素的平方根的倒数，并将结果写入 vector (四个 32 位浮点数)。",
        "translate": ""
    },
    {
        "source": "The reciprocals of the square roots of floating-point elements in vector `a` (two 64-bit floating point numbers) are calculated and the result is written to vector (two 64-bit floating point numbers).",
        "suggest": "计算 vector `a` (两个 64 位浮点数) 中浮点元素的平方根的倒数，并将结果写入 vector (两个 64 位浮点数)。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Always False",
        "suggest": "Vector 浮点信号比较始终为假",
        "translate": ""
    },
    {
        "source": "Set all bits to 0 in vector (four signed 32-bit integer numbers) elements.",
        "suggest": "将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Signaling and quiet NaN elements in vector `a` (four 32-bit floating point numbers) or `b` (four 32-bit floating point numbers) signal Invalid Operation exception.",
        "suggest": "vector `a` (四个 32 位浮点数) 或 `b` (四个 32 位浮点数) 中的信号和静态 NaN 元素发出无效操作异常的信号。",
        "translate": ""
    },
    {
        "source": "In case of a floating-point exception, the default result has all bits set to 0.",
        "suggest": "如果出现浮点异常，则默认结果会将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 0 in vector (two signed 64-bit integer numbers) elements.",
        "suggest": "将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Signaling and quiet NaN elements in vector `a` (two 64-bit floating point numbers) or `b` (two 64-bit floating point numbers) signal Invalid Operation exception.",
        "suggest": "vector `a` (两个 64 位浮点数) 或 `b` (两个 64 位浮点数) 中的信号和静态 NaN 元素发出无效操作异常的信号。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Equal",
        "suggest": "Vector 浮点信号比较相等",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素相等，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素相等，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Less or Equal",
        "suggest": "Vector 浮点信号比较小于或等于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are less than or equal to `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 元素小于或等于 `b` (四个 32 位浮点数) 元素，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则，将其设置为 1。将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are less than or equal to `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 元素小于或等于 `b` (两个 64 位浮点数) 元素，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则，将其设置为 1。将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Less Than",
        "suggest": "Vector 浮点信令小于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are less than `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 元素小于 `b` (四个 32 位浮点数) 元素，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are less than `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 元素小于 `b` (两个 64 位浮点数) 元素，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Not Equal",
        "suggest": "Vector 浮点信号比较不相等",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) elements are not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 元素不相等，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1，否则将所有位设置为 1。到 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) elements are not equal, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 元素不相等，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1，否则设置所有位到 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Ordered",
        "suggest": "Vector 浮点信令比较已排序",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Square Root",
        "suggest": "Vector 浮点平方根",
        "translate": ""
    },
    {
        "source": "The square roots of floating-point elements in vector `a` (four 32-bit floating point numbers) are written to vector (four 32-bit floating point numbers) elements are ordered,.",
        "suggest": "将 vector `a` (四个 32 位浮点数) 中的浮点元素的平方根顺序写入 vector (四个 32 位浮点数) 元素。",
        "translate": ""
    },
    {
        "source": "The square roots of floating-point elements in vector `a` (two 64-bit floating point numbers) are written to vector (two 64-bit floating point numbers) elements are ordered,.",
        "suggest": "将 vector `a` (两个 64 位浮点数) 中的浮点元素的平方根顺序写入 vector (两个 64 位浮点数) 元素。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Subtraction",
        "suggest": "Vector 浮点减法",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (four 32-bit floating point numbers) are subtracted from the floating-point elements in vector `a` (four 32-bit floating point numbers).",
        "suggest": "从 vector `a` (四个 32 位浮点数) 中的浮点元素减去 vector `b` (四个 32 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "The floating-point elements in vector `b` (two 64-bit floating point numbers) are subtracted from the floating-point elements in vector `a` (two 64-bit floating point numbers).",
        "suggest": "从 vector `a` (两个 64 位浮点数) 中的浮点元素减去 vector `b` (两个 64 位浮点数) 中的浮点元素。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Unordered or Less or Equal",
        "suggest": "Vector 浮点信号比较无序或更少或相等",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are unordered or less than or equal to `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 元素是无序的或小于或等于 `b` (四个 32 位浮点数) 元素，则在 vector (四个带符号的 32 位整数) 元素中将所有位设置为 1。，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are unordered or less than or equal to `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 元素是无序的或小于或等于 `b` (两个 64 位浮点数) 元素，则在 vector (两个带符号的 64 位整数) 元素中将所有位设置为 1。，否则将所有位设置为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Unordered or Less Than",
        "suggest": "Vector 浮点信号比较无序或少于",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (four signed 32-bit integer numbers) elements if the corresponding `a` (four 32-bit floating point numbers) elements are unordered or less than `b` (four 32-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (四个 32 位浮点数) 元素是无序的或小于 `b` (四个 32 位浮点数) 元素，则将 vector (四个带符号的 32 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Set all bits to 1 in vector (two signed 64-bit integer numbers) elements if the corresponding `a` (two 64-bit floating point numbers) elements are unordered or less than `b` (two 64-bit floating point numbers) elements, otherwise set all bits to 0.",
        "suggest": "如果相应的 `a` (两个 64 位浮点数) 元素是无序的或小于 `b` (两个 64 位浮点数) 元素，则将 vector (两个带符号的 64 位整数) 元素中的所有位设置为 1，否则进行设置所有位都为 0。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Unordered",
        "suggest": "Vector 浮点信号比较无序",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Signaling Compare Unordered or Not Equal",
        "suggest": "Vector 浮点信号比较无序或不相等",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Convert to Signed Integer",
        "suggest": "Vector 浮点转换为有符号整数",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four 32-bit floating point numbers) are rounded and converted to signed integer values based on the rounding mode bits RM in MSA Control and Status Register MSACSR.",
        "suggest": "vector `a` 中的元素 (四个 32 位浮点数) 被四舍五入，并根据 MSA 控制和状态寄存器 MSACSR 中的舍入模式位 RM 转换为带符号整数值。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two 64-bit floating point numbers) are rounded and converted to signed integer values based on the rounding mode bits RM in MSA Control and Status Register MSACSR.",
        "suggest": "vector `a` 中的元素 (两个 64 位浮点数) 被四舍五入，并根据 MSA 控制和状态寄存器 MSACSR 中的舍入模式位 RM 转换为有符号整数值。",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Convert to Unsigned Integer",
        "suggest": "Vector 浮点转换为无符号整数",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Convert to Fixed-Point",
        "suggest": "Vector 浮点转换为定点",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four 32-bit floating point numbers) and `b` (four 32-bit floating point numbers) are down-converted to a fixed-point representation, i.e.",
        "suggest": "vector `a` (四个 32 位浮点数) 和 `b` (四个 32 位浮点数) 中的元素被下转换为定点表示，即",
        "translate": ""
    },
    {
        "source": "from 64-bit floating-point to 32-bit Q31 fixed-point representation, or from 32-bit floating-point to 16-bit Q15 fixed-point representation.",
        "suggest": "从 64 位浮点到 32 位 Q31 定点表示，或者从 32 位浮点到 16 位 Q15 定点表示。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two 64-bit floating point numbers) and `b` (two 64-bit floating point numbers) are down-converted to a fixed-point representation, i.e.",
        "suggest": "vector `a` (两个 64 位浮点数) 和 `b` (两个 64 位浮点数) 中的元素被下转换为定点表示，即",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Truncate and Convert to Signed Integer",
        "suggest": "Vector 浮点截断并转换为有符号整数",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four 32-bit floating point numbers) are truncated, i.e.",
        "suggest": "vector `a` (四个 32 位浮点数) 中的元素被截断，即",
        "translate": ""
    },
    {
        "source": "rounded toward zero, to signed integer values.",
        "suggest": "四舍五入为有符号整数值。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two 64-bit floating point numbers) are truncated, i.e.",
        "suggest": "vector `a` (两个 64 位浮点数) 中的元素被截断，即",
        "translate": ""
    },
    {
        "source": "Vector Floating-Point Truncate and Convert to Unsigned Integer",
        "suggest": "Vector 浮点截断并转换为无符号整数",
        "translate": ""
    },
    {
        "source": "rounded toward zero, to unsigned integer values.",
        "suggest": "四舍五入为无符号整数值。",
        "translate": ""
    },
    {
        "source": "Vector Signed Horizontal Add",
        "suggest": "Vector 有符号的水平添加",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `a` (sixteen signed 8-bit integer numbers) are added to the sign-extended even elements in vector `b` (sixteen signed 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的符号扩展的奇数元素 (十六个带符号的 8 位整数) 添加到 vector `b` 中的符号扩展的偶数元素 (十六个 8 位符号整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `a` (eight signed 16-bit integer numbers) are added to the sign-extended even elements in vector `b` (eight signed 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的符号扩展的奇数元素 (八个有符号的 16 位整数) 添加到 vector `b` 中的符号扩展的偶数元素 (八个有符号 16 位整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `a` (four signed 32-bit integer numbers) are added to the sign-extended even elements in vector `b` (four signed 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的符号扩展的奇数元素 (四个有符号的 32 位整数) 添加到 vector `b` 中的符号扩展的偶数元素 (四个有符号 32 位整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Horizontal Add",
        "suggest": "Vector 无符号水平加法",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `a` (sixteen unsigned 8-bit integer numbers) are added to the zero-extended even elements in vector `b` (sixteen unsigned 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的零扩展奇数元素 (十六个无符号的 8 位整数) 添加到 vector `b` 中的零扩展偶数元素 (十六个无符号 8 位整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `a` (eight unsigned 16-bit integer numbers) are added to the zero-extended even elements in vector `b` (eight unsigned 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的零扩展奇数元素 (八个无符号 16 位整数) 添加到 vector `b` 中的零扩展偶数元素 (八个无符号 16 位整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `a` (four unsigned 32-bit integer numbers) are added to the zero-extended even elements in vector `b` (four unsigned 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `a` 中的零扩展奇数元素 (四个无符号 32 位整数) 添加到 vector `b` 中的零扩展偶数元素 (四个无符号 32 位整数)，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "Vector Signed Horizontal Subtract",
        "suggest": "Vector 有符号水平相减",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `b` (sixteen signed 8-bit integer numbers) are subtracted from the sign-extended elements in vector `a` (sixteen signed 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "从 vector `a` (十六个带符号的 8 位整数) 的符号扩展元素中减去 vector `b` (十六个带符号的 8 位整数) 的符号扩展的奇数元素，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `b` (eight signed 16-bit integer numbers) are subtracted from the sign-extended elements in vector `a` (eight signed 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "将 vector `b` (八个带符号的 16 位整数) 中的符号扩展的奇数元素减去 vector `a` (八个带符号的 16 位整数) 中的符号扩展元素，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The sign-extended odd elements in vector `b` (four signed 32-bit integer numbers) are subtracted from the sign-extended elements in vector `a` (four signed 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (四个带符号的 32 位整数) 中的符号扩展的奇数元素从 vector `a` (四个带符号的 32 位整数) 中的符号扩展的元素中减去，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Horizontal Subtract",
        "suggest": "Vector 无符号水平减法",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `b` (sixteen unsigned 8-bit integer numbers) are subtracted from the zero-extended elements in vector `a` (sixteen unsigned 8-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (十六个无符号的 8 位整数) 中的零扩展奇数元素被从 vector `a` (十六个无符号的 8 位整数) 中的零扩展元素减去，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `b` (eight unsigned 16-bit integer numbers) are subtracted from the zero-extended elements in vector `a` (eight unsigned 16-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "从 vector `a` (八个无符号 16 位整数) 的零扩展元素中减去 vector `b` (八个无符号 16 位整数) 的零扩展奇数元素，其结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "The zero-extended odd elements in vector `b` (four unsigned 32-bit integer numbers) are subtracted from the zero-extended elements in vector `a` (four unsigned 32-bit integer numbers) producing a result twice the size of the input operands.",
        "suggest": "vector `b` (四个无符号的 32 位整数) 中的零扩展奇数元素被从 vector `a` (四个无符号的 32 位整数) 中的零扩展元素中减去，产生的结果是输入操作数大小的两倍。",
        "translate": ""
    },
    {
        "source": "Vector Interleave Even",
        "suggest": "Vector 交错偶数",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (sixteen signed 8-bit integer numbers) and vector `b` (sixteen signed 8-bit integer numbers) are copied to the result (sixteen signed 8-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (十六个带符号的 8 位整数) 和 vector `b` (十六个带符号的 8 位整数) 中的偶数元素复制到结果 (十六个带符号的 8 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (eight signed 16-bit integer numbers) and vector `b` (eight signed 16-bit integer numbers) are copied to the result (eight signed 16-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (八个带符号的 16 位整数) 和 vector `b` (八个带符号的 16 位整数) 中的偶数元素复制到结果 (八个带符号的 16 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (four signed 32-bit integer numbers) and vector `b` (four signed 32-bit integer numbers) are copied to the result (four signed 32-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (四个带符号的 32 位整数) 和 vector `b` (四个带符号的 32 位整数) 中的偶数元素复制到结果 (四个带符号的 32 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (two signed 64-bit integer numbers) and vector `b` (two signed 64-bit integer numbers) are copied to the result (two signed 64-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (两个带符号的 64 位整数) 和 vector `b` (两个带符号的 64 位整数) 中的偶数元素复制到结果 (两个带符号的 64 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Vector Interleave Left",
        "suggest": "Vector 向左交织",
        "translate": ""
    },
    {
        "source": "The left half elements in vectors `a` (sixteen signed 8-bit integer numbers) and vector `b` (sixteen signed 8-bit integer numbers) are copied to the result (sixteen signed 8-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (十六个带符号的 8 位整数) 和 vector `b` (十六个带符号的 8 位整数) 中的左半部分元素复制到结果 (十六个带符号的 8 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The left half elements in vectors `a` (eight signed 16-bit integer numbers) and vector `b` (eight signed 16-bit integer numbers) are copied to the result (eight signed 16-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (八个带符号的 16 位整数) 和 vector `b` (八个带符号的 16 位整数) 中的左半元素复制到结果 (八个带符号的 16 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The left half elements in vectors `a` (four signed 32-bit integer numbers) and vector `b` (four signed 32-bit integer numbers) are copied to the result (four signed 32-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (四个带符号的 32 位整数) 和 vector `b` (四个带符号的 32 位整数) 中的左半部分元素复制到结果 (四个带符号的 32 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The left half elements in vectors `a` (two signed 64-bit integer numbers) and vector `b` (two signed 64-bit integer numbers) are copied to the result (two signed 64-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (两个带符号的 64 位整数) 和 vector `b` (两个带符号的 64 位整数) 中的左半部分元素复制到结果 (两个带符号的 64 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "Vector Interleave Odd",
        "suggest": "Vector 交错奇数",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (sixteen signed 8-bit integer numbers) and vector `b` (sixteen signed 8-bit integer numbers) are copied to the result (sixteen signed 8-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (十六个带符号的 8 位整数) 和 vector `b` (十六个带符号的 8 位整数) 中的奇数元素复制到结果 (十六个带符号的 8 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (eight signed 16-bit integer numbers) and vector `b` (eight signed 16-bit integer numbers) are copied to the result (eight signed 16-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (八个带符号的 16 位整数) 和 vector `b` (八个带符号的 16 位整数) 中的奇数元素复制到结果 (八个带符号的 16 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (four signed 32-bit integer numbers) and vector `b` (four signed 32-bit integer numbers) are copied to the result (four signed 32-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (四个带符号的 32 位整数) 和 vector `b` (四个带符号的 32 位整数) 中的奇数元素复制到结果 (四个带符号的 32 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (two signed 64-bit integer numbers) and vector `b` (two signed 64-bit integer numbers) are copied to the result (two signed 64-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (两个带符号的 64 位整数) 和 vector `b` (两个带符号的 64 位整数) 中的奇数元素复制到结果 (两个带符号的 64 位整数) 中，将 `a` 中的一个元素与 `b` 中的一个元素交替。",
        "translate": ""
    },
    {
        "source": "Vector Interleave Right",
        "suggest": "Vector 右交错",
        "translate": ""
    },
    {
        "source": "The right half elements in vectors `a` (sixteen signed 8-bit integer numbers) and vector `b` (sixteen signed 8-bit integer numbers) are copied to the result (sixteen signed 8-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (十六个带符号的 8 位整数) 和 vector `b` (十六个带符号的 8 位整数) 中的右半元素复制到结果 (十六个带符号的 8 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The right half elements in vectors `a` (eight signed 16-bit integer numbers) and vector `b` (eight signed 16-bit integer numbers) are copied to the result (eight signed 16-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (八个带符号的 16 位整数) 和 vector `b` (八个带符号的 16 位整数) 中的右半元素复制到结果 (八个带符号的 16 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The right half elements in vectors `a` (four signed 32-bit integer numbers) and vector `b` (four signed 32-bit integer numbers) are copied to the result (four signed 32-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (四个带符号的 32 位整数) 和 vector `b` (四个带符号的 32 位整数) 中的右半元素复制到结果 (四个带符号的 32 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "The right half elements in vectors `a` (two signed 64-bit integer numbers) and vector `b` (two signed 64-bit integer numbers) are copied to the result (two signed 64-bit integer numbers) alternating one element from `a` with one element from `b`.",
        "suggest": "将 vectors `a` (两个带符号的 64 位整数) 和 vector `b` (两个带符号的 64 位整数) 中的右半元素复制到结果 (两个带符号的 64 位整数) 中，将 `a` 中的一个元素替换为一个元素从 `b`。",
        "translate": ""
    },
    {
        "source": "GPR Insert Element",
        "suggest": "GPR 插入元素",
        "translate": ""
    },
    {
        "source": "Set element `imm4` in vector `a` (sixteen signed 8-bit integer numbers) to GPR `c` value.",
        "suggest": "将 vector `a` 中的元素 `imm4` (十六个带符号的 8 位整数) 设置为 GPR `c` 值。",
        "translate": ""
    },
    {
        "source": "All other elements in vector `a` are unchanged.",
        "suggest": "vector `a` 中的所有其他元素均未更改。",
        "translate": ""
    },
    {
        "source": "Set element `imm3` in vector `a` (eight signed 16-bit integer numbers) to GPR `c` value.",
        "suggest": "将 vector `a` 中的元素 `imm3` (八个带符号的 16 位整数) 设置为 GPR `c` 值。",
        "translate": ""
    },
    {
        "source": "Set element `imm2` in vector `a` (four signed 32-bit integer numbers) to GPR `c` value.",
        "suggest": "将 vector `a` 中的元素 `imm2` (四个带符号的 32 位整数) 设置为 GPR `c` 值。",
        "translate": ""
    },
    {
        "source": "Set element `imm1` in vector `a` (two signed 64-bit integer numbers) to GPR `c` value.",
        "suggest": "将 vector `a` 中的元素 `imm1` (两个带符号的 64 位整数) 设置为 GPR `c` 值。",
        "translate": ""
    },
    {
        "source": "Element Insert Element",
        "suggest": "元素插入元素",
        "translate": ""
    },
    {
        "source": "Set element `imm1` in the result vector `a` (sixteen signed 8-bit integer numbers) to element 0 in vector `c` (sixteen signed 8-bit integer numbers) value.",
        "suggest": "将结果 vector `a` (十六个带符号的 8 位整数) 中的元素 `imm1` 设置为 vector `c` (十六个带符号的 8 位整数) 值中的元素 0。",
        "translate": ""
    },
    {
        "source": "Set element `imm1` in the result vector `a` (eight signed 16-bit integer numbers) to element 0 in vector `c` (eight signed 16-bit integer numbers) value.",
        "suggest": "将结果 vector `a` (八个带符号的 16 位整数) 中的元素 `imm1` 设置为 vector `c` (八个带符号的 16 位整数) 值中的元素 0。",
        "translate": ""
    },
    {
        "source": "Set element `imm1` in the result vector `a` (four signed 32-bit integer numbers) to element 0 in vector `c` (four signed 32-bit integer numbers) value.",
        "suggest": "将结果 vector `a` (四个带符号的 32 位整数) 中的元素 `imm1` 设置为 vector `c` (四个带符号的 32 位整数) 值中的元素 0。",
        "translate": ""
    },
    {
        "source": "Set element `imm1` in the result vector `a` (two signed 64-bit integer numbers) to element 0 in vector `c` (two signed 64-bit integer numbers) value.",
        "suggest": "将结果 vector `a` (两个带符号的 64 位整数) 中的元素 `imm1` 设置为 vector `c` (两个带符号的 64 位整数) 值中的元素 0。",
        "translate": ""
    },
    {
        "source": "Vector Load",
        "suggest": "Vector 加载",
        "translate": ""
    },
    {
        "source": "The WRLEN / 8 bytes at the effective memory location addressed by the base `mem_addr` and the 10-bit signed immediate offset `imm_s10` are fetched and placed in the vector (sixteen signed 8-bit integer numbers) value.",
        "suggest": "将获取由基本 `mem_addr` 和 10 位带符号 immediate 数偏移量 `imm_s10` 寻址的有效存储位置中的 WRLEN/8 字节，并将其放入 vector (十六个带符号的 8 位整数) 中。",
        "translate": ""
    },
    {
        "source": "The WRLEN / 8 bytes at the effective memory location addressed by the base `mem_addr` and the 10-bit signed immediate offset `imm_s11` are fetched and placed in the vector (eight signed 16-bit integer numbers) value.",
        "suggest": "将获取由基本 `mem_addr` 和 10 位带符号 immediate 数偏移量 `imm_s11` 寻址的有效存储位置中的 WRLEN/8 字节，并将其放入 vector (八个带符号的 16 位整数) 中。",
        "translate": ""
    },
    {
        "source": "The WRLEN / 8 bytes at the effective memory location addressed by the base `mem_addr` and the 10-bit signed immediate offset `imm_s12` are fetched and placed in the vector (four signed 32-bit integer numbers) value.",
        "suggest": "将获取由基本 `mem_addr` 和 10 位带符号 immediate 数偏移量 `imm_s12` 寻址的有效存储位置中的 WRLEN/8 字节，并将其放在 vector (四个带符号的 32 位整数) 中。",
        "translate": ""
    },
    {
        "source": "The WRLEN / 8 bytes at the effective memory location addressed by the base `mem_addr` and the 10-bit signed immediate offset `imm_s13` are fetched and placed in the vector (two signed 64-bit integer numbers) value.",
        "suggest": "将获取由基本 `mem_addr` 和 10 位带符号 immediate 数偏移量 `imm_s13` 寻址的有效内存位置的 WRLEN/8 字节，并将其放在 vector (两个带符号的 64 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Immediate Load",
        "suggest": "Immediate 加载",
        "translate": ""
    },
    {
        "source": "The signed immediate imm_s10 is replicated in all vector (sixteen signed 8-bit integer numbers) elements.",
        "suggest": "带符号的 immediate 数 imm_s10 复制到所有 vector (十六个带符号的 8 位整数) 元素中。",
        "translate": ""
    },
    {
        "source": "For byte elements, only the least significant 8 bits of imm_s10 will be used.",
        "suggest": "对于字节元素，将仅使用 imm_s10 的最低有效 8 位。",
        "translate": ""
    },
    {
        "source": "The signed immediate imm_s10 is replicated in all vector (eight signed 16-bit integer numbers) elements.",
        "suggest": "带符号的 immediate 数 imm_s10 复制到所有 vector (八个带符号的 16 位整数) 元素中。",
        "translate": ""
    },
    {
        "source": "The signed immediate imm_s10 is replicated in all vector (four signed 32-bit integer numbers) elements.",
        "suggest": "带符号的 immediate 数 imm_s10 被复制到所有 vector (四个带符号的 32 位整数) 元素中。",
        "translate": ""
    },
    {
        "source": "The signed immediate imm_s10 is replicated in all vector (two signed 64-bit integer numbers) elements.",
        "suggest": "带符号的 immediate 数 imm_s10 复制到所有 vector (两个带符号的 64 位整数) 元素中。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply and Add",
        "suggest": "Vector 定点乘法和加法",
        "translate": ""
    },
    {
        "source": "The products of fixed-point elements in `b` (eight signed 16-bit integer numbers) by fixed-point elements in vector `c` (eight signed 16-bit integer numbers) are added to the fixed-point elements in vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "将 `b` (八个带符号的 16 位整数) 中的定点元素与 vector `c` (八个带符号的 16 位整数) 中的定点元素的乘积与 vector `a` (八个带符号的 16 位) 中的定点元素相加位整数)。",
        "translate": ""
    },
    {
        "source": "The multiplication result is not saturated, i.e. exact (-1) * (-1) = 1 is added to the destination.",
        "suggest": "乘法结果未达到饱和，即将精确的 (-1) * (-1) =1 添加到目标。",
        "translate": ""
    },
    {
        "source": "The saturated fixed-point results are stored to vector `a`.",
        "suggest": "饱和的定点结果存储到 vector `a`。",
        "translate": ""
    },
    {
        "source": "The products of fixed-point elements in `b` (four signed 32-bit integer numbers) by fixed-point elements in vector `c` (four signed 32-bit integer numbers) are added to the fixed-point elements in vector `a` (four signed 32-bit integer numbers).",
        "suggest": "将 `b` (四个带符号的 32 位整数) 中的定点元素与 vector `c` (四个带符号的 32 位整数) 中的定点元素的乘积与 vector `a` (四个带符号的 32 位) 中的定点元素相加位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply and Add Rounded",
        "suggest": "Vector 定点乘法与加法四舍五入",
        "translate": ""
    },
    {
        "source": "The rounded and saturated fixed-point results are stored to vector `a`.",
        "suggest": "取整和饱和的定点结果存储到 vector `a`。",
        "translate": ""
    },
    {
        "source": "Vector Multiply and Add",
        "suggest": "Vector 相乘和相加",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `b` (sixteen signed 8-bit integer numbers) are multiplied by integer elements in vector `c` (sixteen signed 8-bit integer numbers) and added to the integer elements in vector `a` (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `b` (十六个带符号的 8 位整数) 中的整数元素与 vector `c` (十六个带符号的 8 位整数) 中的整数元素相乘，然后添加到 vector `a` (十六个带符号的 8 位整数中) 的整数元素中。。",
        "translate": ""
    },
    {
        "source": "The most significant half of the multiplication result is discarded.",
        "suggest": "乘法结果中最重要的一半将被丢弃。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `b` (eight signed 16-bit integer numbers) are multiplied by integer elements in vector `c` (eight signed 16-bit integer numbers) and added to the integer elements in vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `b` (八个带符号的 16 位整数) 中的整数元素与 vector `c` (八个带符号的 16 位整数) 中的整数元素相乘，然后将其与 vector `a` (八个带符号的 16 位整数中的整数) 相加。。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `b` (four signed 32-bit integer numbers) are multiplied by integer elements in vector `c` (four signed 32-bit integer numbers) and added to the integer elements in vector `a` (four signed 32-bit integer numbers).",
        "suggest": "vector `b` (四个带符号的 32 位整数) 中的整数元素与 vector `c` (四个带符号的 32 位整数) 中的整数元素相乘，然后加到 vector `a` (四个带符号的 32 位整数中) 的整数元素中。。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `b` (two signed 64-bit integer numbers) are multiplied by integer elements in vector `c` (two signed 64-bit integer numbers) and added to the integer elements in vector `a` (two signed 64-bit integer numbers).",
        "suggest": "将 vector `b` (两个带符号的 64 位整数) 中的整数元素与 vector `c` (两个带符号的 64 位整数) 中的整数元素相乘，然后将其与 vector `a` (两个带符号的 64 位整数中的整数) 相加。。",
        "translate": ""
    },
    {
        "source": "Vector Maximum Based on Absolute Values",
        "suggest": "Vector 基于绝对值的最大值",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding signed elements in vector `a` (sixteen signed 8-bit integer numbers) and `b` (sixteen signed 8-bit integer numbers) are written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector 中的相应带符号元素之间的绝对值 `a` (十六个带符号的 8 位整数) 和 `b` (十六个带符号的 8 位整数) 写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding signed elements in vector `a` (eight signed 16-bit integer numbers) and `b` (eight signed 16-bit integer numbers) are written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector 中的相应带符号元素之间的绝对值 `a` (八个带符号的 16 位整数) 和 `b` (八个带符号的 16 位整数) 写入 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding signed elements in vector `a` (four signed 32-bit integer numbers) and `b` (four signed 32-bit integer numbers) are written to vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector 中的相应带符号元素之间的绝对值 `a` (四个带符号的 32 位整数) 和 `b` (四个带符号的 32 位整数) 之间的绝对值写入 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "absolute value, between corresponding signed elements in vector `a` (two signed 64-bit integer numbers) and `b` (two signed 64-bit integer numbers) are written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector 中的相应带符号元素之间的绝对值 `a` (两个带符号的 64 位整数) 和 `b` (两个带符号的 64 位整数) 之间的绝对值写入 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Signed Maximum",
        "suggest": "Vector 有符号的最大值",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (sixteen signed 8-bit integer numbers) and signed elements in vector `b` (sixteen signed 8-bit integer numbers) are written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` (十六个带符号的 8 位整数) 中的有符号元素和 vector `b` (十六个带符号的 8 位整数) 中的有符号元素之间的最大值被写入 vector (十六个带符号的 8 位整数中)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (eight signed 16-bit integer numbers) and signed elements in vector `b` (eight signed 16-bit integer numbers) are written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的有符号元素和 vector `b` (八个带符号的 16 位整数) 中的有符号元素之间的最大值写入 vector (八个有符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (four signed 32-bit integer numbers) and signed elements in vector `b` (four signed 32-bit integer numbers) are written to vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector `a` (四个带符号的 32 位整数) 中的有符号元素和 vector `b` (四个带符号的 32 位整数) 中的有符号元素之间的最大值写入 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (two signed 64-bit integer numbers) and signed elements in vector `b` (two signed 64-bit integer numbers) are written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个带符号的 64 位整数) 中的有符号元素和 vector `b` (两个带符号的 64 位整数) 中的有符号元素之间的最大值写入 vector (两个有符号的 64 位整数中)。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Maximum",
        "suggest": "Vector 无符号最大值",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) and unsigned elements in vector `b` (sixteen unsigned 8-bit integer numbers) are written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (十六个无符号 8 位整数) 和 vector `b` 中的无符号元素 (十六个无符号 8 位整数) 之间的最大值写入 vector (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) and unsigned elements in vector `b` (eight unsigned 16-bit integer numbers) are written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (八个无符号 16 位整数) 和 vector `b` 中的无符号元素 (八个无符号 16 位整数) 之间的最大值写入 vector (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (four unsigned 32-bit integer numbers) and unsigned elements in vector `b` (four unsigned 32-bit integer numbers) are written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "vector `a` (四个无符号的 32 位整数) 中的无符号元素与 vector `b` (四个无符号的 32 位整数) 中的无符号元素之间的最大值被写入 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (two unsigned 64-bit integer numbers) and unsigned elements in vector `b` (two unsigned 64-bit integer numbers) are written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素 (两个无符号的 64 位整数) 和 vector `b` 中的无符号元素 (两个无符号 64 位整数) 之间的最大值被写入 vector (两个无符号 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Signed Maximum",
        "suggest": "Immediate 有符号的最大值",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (sixteen signed 8-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `a` (十六个带符号的 8 位整数) 和 5 位带符号 immediate 数 imm_s5 之间的有符号元素之间的最大值写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (eight signed 16-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的有符号元素之间的最大值与 5 个带符号的 immediate 数 imm_s5 写入 vector (八个带符号的 16 位整数中)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (four signed 32-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector `a` (四个带符号的 32 位整数) 和 5 位带符号的 immediate 数 imm_s5 中的带符号元素之间的最大值写入 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between signed elements in vector `a` (two signed 64-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个带符号的 64 位整数) 和 5 位带符号 immediate  imm_s5 中的带符号元素之间的最大值写入 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Unsigned Maximum",
        "suggest": "Immediate 无符号最大值",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素之间的最大值 (十六个无符号 8 位整数) 和 5 位无符号 immediate  `imm5` 被写入 vector (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "vector `a` (八个无符号的 16 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最大值被写入 vector (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (four unsigned 32-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "将 vector `a` (四个无符号的 32 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最大值写入 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Maximum values between unsigned elements in vector `a` (two unsigned 64-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个无符号的 64 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最大值写入 vector (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Minimum Based on Absolute Value",
        "suggest": "基于绝对值的 Vector 最小值",
        "translate": ""
    },
    {
        "source": "Vector Signed Minimum",
        "suggest": "Vector 有符号的最小值",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (sixteen signed 8-bit integer numbers) and signed elements in vector `b` (sixteen signed 8-bit integer numbers) are written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` 中的带符号元素 (十六个带符号的 8 位整数) 和 vector `b` 中的带符号元素 (十六个带符号的 8 位整数) 之间的最小值被写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (eight signed 16-bit integer numbers) and signed elements in vector `b` (eight signed 16-bit integer numbers) are written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的有符号元素与 vector `b` (八个带符号的 16 位整数) 中的有符号元素之间的最小值写入 vector (八个有符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (four signed 32-bit integer numbers) and signed elements in vector `b` (four signed 32-bit integer numbers) are written to vector (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个有符号的 32 位整数) 中的有符号元素和 vector `b` (四个有符号的 32 位整数) 中的有符号元素之间的最小值被写入 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (two signed 64-bit integer numbers) and signed elements in vector `b` (two signed 64-bit integer numbers) are written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个带符号的 64 位整数) 中的有符号元素和 vector `b` (两个带符号的 64 位整数) 中的有符号元素之间的最小值写入 vector (两个有符号的 64 位整数中)。",
        "translate": ""
    },
    {
        "source": "Immediate Signed Minimum",
        "suggest": "Immediate 有符号最小值",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (sixteen signed 8-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `a` 中的有符号元素之间的最小值 (十六个有符号的 8 位整数) 和 5 位有符号 immediate  imm_s5 写入 vector (十六个有符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (eight signed 16-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的有符号元素之间的最小值与 5 个带符号的 immediate  imm_s5 写入 vector (八个带符号的 16 位整数中)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (four signed 32-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector `a` 中的有符号元素之间的最小值 (四个有符号的 32 位整数) 和 5 位有符号 immediate  imm_s5 写入 vector (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between signed elements in vector `a` (two signed 64-bit integer numbers) and the 5-bit signed immediate imm_s5 are written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` 中的有符号元素之间的最小值 (两个有符号的 64 位整数) 和 5 位有符号 immediate  imm_s5 写入 vector (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Minimum",
        "suggest": "Vector 无符号最小值",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) and unsigned elements in vector `b` (sixteen unsigned 8-bit integer numbers) are written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (十六个无符号 8 位整数) 和 vector `b` 中的无符号元素 (十六个无符号 8 位整数) 之间的最小值写入 vector (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) and unsigned elements in vector `b` (eight unsigned 16-bit integer numbers) are written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (八个无符号 16 位整数) 和 vector `b` 中的无符号元素 (八个无符号 16 位整数) 之间的最小值写入 vector (八个无符号 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (four unsigned 32-bit integer numbers) and unsigned elements in vector `b` (four unsigned 32-bit integer numbers) are written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (四个无符号 32 位整数) 和 vector `b` 中的无符号元素 (四个无符号 32 位整数) 之间的最小值写入 vector (四个无符号 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (two unsigned 64-bit integer numbers) and unsigned elements in vector `b` (two unsigned 64-bit integer numbers) are written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "将 vector `a` 中的无符号元素 (两个无符号 64 位整数) 和 vector `b` 中的无符号元素 (两个无符号 64 位整数) 之间的最小值写入 vector (两个无符号 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Unsigned Minimum",
        "suggest": "Immediate 无符号最小值",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "vector `a` 中的无符号元素之间的最小值 (十六个无符号 8 位整数) 和 5 位无符号 immediate  `imm5` 被写入 vector (十六个无符号 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "vector `a` (八个无符号的 16 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最小值被写入 vector (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (four unsigned 32-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "将 vector `a` (四个无符号的 32 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最小值写入 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Minimum values between unsigned elements in vector `a` (two unsigned 64-bit integer numbers) and the 5-bit unsigned immediate `imm5` are written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "vector `a` (两个无符号的 64 位整数) 和 5 位无符号 immediate  `imm5` 中的无符号元素之间的最小值被写入 vector (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Signed Modulo",
        "suggest": "Vector 有符号模数",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "If a divisor element vector `b` is zero, the result value is UNPREDICTABLE.",
        "suggest": "如果除数元素 vector `b` 为零，则结果值为 UNPREDICTABLE。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (four signed 32-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (two signed 64-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Unsigned Modulo",
        "suggest": "Vector 无符号模数",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "与除数相同的符号的其余部分写入 vector (十六个无符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (eight unsigned 16-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (八个无符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (four unsigned 32-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (四个无符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The remainder of the same sign as the dividend is written to vector (two unsigned 64-bit integer numbers).",
        "suggest": "与被除数相同符号的其余部分写入 vector (两个无符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Move",
        "suggest": "Vector 移动",
        "translate": ""
    },
    {
        "source": "Copy all WRLEN bits in vector `a` (eight signed 16-bit integer numbers) to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的所有 WRLEN 位复制到 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply and Subtract",
        "suggest": "Vector 定点的乘法和减法",
        "translate": ""
    },
    {
        "source": "The product of fixed-point elements in vector `c` (eight signed 16-bit integer numbers) by fixed-point elements in vector `b` (eight signed 16-bit integer numbers) are subtracted from the fixed-point elements in vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "从 vector `a` (八个符号) 中减去 vector `c` (八个带符号的 16 位整数) 中定点元素与 vector `b` (八个符号的 16 位整数) 中定点元素的乘积。16 位整数)。",
        "translate": ""
    },
    {
        "source": "The multiplication result is not saturated, i.e. exact (-1) * (-1) = 1 is subtracted from the destination.",
        "suggest": "乘法结果未饱和，即从目标中减去精确的 (-1) * (-1) =1。",
        "translate": ""
    },
    {
        "source": "The saturated fixed-point results are stored back to vector `a`.",
        "suggest": "饱和的定点结果将存储回 vector `a`。",
        "translate": ""
    },
    {
        "source": "The product of fixed-point elements in vector `c` (four signed 32-bit integer numbers) by fixed-point elements in vector `b` (four signed 32-bit integer numbers) are subtracted from the fixed-point elements in vector `a` (four signed 32-bit integer numbers).",
        "suggest": "从 vector `a` (四个带符号的整数) 中减去 vector `c` (四个带符号的 32 位整数) 中的定点元素与 vector `b` (四个带符号的 32 位整数) 中的定点元素的乘积。32 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply and Subtract Rounded",
        "suggest": "Vector 定点乘法和减法四舍五入",
        "translate": ""
    },
    {
        "source": "The rounded and saturated fixed-point results are stored back to vector `a`.",
        "suggest": "取整和饱和的定点结果将存储回 vector `a`。",
        "translate": ""
    },
    {
        "source": "Vector Multiply and Subtract",
        "suggest": "Vector 乘法和减法",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `c` (sixteen signed 8-bit integer numbers) are multiplied by integer elements in vector `b` (sixteen signed 8-bit integer numbers) and subtracted from the integer elements in vector `a` (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `c` (十六个带符号的 8 位整数) 中的整数元素与 vector `b` (十六个带符号的 8 位整数) 中的整数元素相乘，然后从 vector `a` (十六个带符号的 8 位整数中) 的整数元素中减去。。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `c` (eight signed 16-bit integer numbers) are multiplied by integer elements in vector `b` (eight signed 16-bit integer numbers) and subtracted from the integer elements in vector `a` (eight signed 16-bit integer numbers).",
        "suggest": "vector `c` (八个带符号的 16 位整数) 中的整数元素与 vector `b` (八个带符号的 16 位整数) 中的整数元素相乘，然后从 vector `a` (八个带符号的 16 位整数中) 的整数元素中减去。。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `c` (four signed 32-bit integer numbers) are multiplied by integer elements in vector `b` (four signed 32-bit integer numbers) and subtracted from the integer elements in vector `a` (four signed 32-bit integer numbers).",
        "suggest": "vector `c` (四个带符号的 32 位整数) 中的整数元素与 vector `b` (四个带符号的 32 位整数) 中的整数元素相乘，然后从 vector `a` (四个带符号的 32 位整数中) 的整数元素中减去。。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `c` (two signed 64-bit integer numbers) are multiplied by integer elements in vector `b` (two signed 64-bit integer numbers) and subtracted from the integer elements in vector `a` (two signed 64-bit integer numbers).",
        "suggest": "vector `c` (两个带符号的 64 位整数) 中的整数元素与 vector `b` (两个带符号的 64 位整数) 中的整数元素相乘，然后从 vector `a` (两个带符号的 64 位整数中) 的整数元素中减去。。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply",
        "suggest": "Vector 定点乘法",
        "translate": ""
    },
    {
        "source": "The fixed-point elements in vector `a` (eight signed 16-bit integer numbers) multiplied by fixed-point elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的定点元素乘以 vector `b` (八个带符号的 16 位整数) 中的定点元素。",
        "translate": ""
    },
    {
        "source": "The fixed-point elements in vector `a` (four signed 32-bit integer numbers) multiplied by fixed-point elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的定点元素乘以 vector `b` (四个带符号的 32 位整数) 中的定点元素。",
        "translate": ""
    },
    {
        "source": "Vector Fixed-Point Multiply Rounded",
        "suggest": "Vector 定点乘法四舍五入",
        "translate": ""
    },
    {
        "source": "The rounded result is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "舍入后的结果将写入 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The rounded result is written to vector (four signed 32-bit integer numbers).",
        "suggest": "舍入后的结果将写入 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Multiply",
        "suggest": "Vector 相乘",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `a` (sixteen signed 8-bit integer numbers) are multiplied by integer elements in vector `b` (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` 中的整数元素 (十六个带符号的 8 位整数) 与 vector `b` 中的整数元素 (十六个带符号 8 位整数) 相乘。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `a` (eight signed 16-bit integer numbers) are multiplied by integer elements in vector `b` (eight signed 16-bit integer numbers).",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的整数元素与 vector `b` (八个带符号的 16 位整数) 中的整数元素相乘。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `a` (four signed 32-bit integer numbers) are multiplied by integer elements in vector `b` (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的整数元素与 vector `b` (四个带符号的 32 位整数) 中的整数元素相乘。",
        "translate": ""
    },
    {
        "source": "The integer elements in vector `a` (two signed 64-bit integer numbers) are multiplied by integer elements in vector `b` (two signed 64-bit integer numbers).",
        "suggest": "vector `a` (两个带符号的 64 位整数) 中的整数元素与 vector `b` (两个带符号的 64 位整数) 中的整数元素相乘。",
        "translate": ""
    },
    {
        "source": "Vector Leading Ones Count",
        "suggest": "Vector 领先的计数",
        "translate": ""
    },
    {
        "source": "The number of leading ones for elements in vector `a` (sixteen signed 8-bit integer numbers) is stored to the elements in vector (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导数字 (十六个带符号的 8 位整数) 存储到 vector 中的元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading ones for elements in vector `a` (eight signed 16-bit integer numbers) is stored to the elements in vector (eight signed 16-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导数字 (八个带符号的 16 位整数) 存储到 vector 中的元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading ones for elements in vector `a` (four signed 32-bit integer numbers) is stored to the elements in vector (four signed 32-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导数字 (四个有符号 32 位整数) 存储到 vector 中的元素 (四个有符号 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading ones for elements in vector `a` (two signed 64-bit integer numbers) is stored to the elements in vector (two signed 64-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导数字 (两个带符号的 64 位整数) 存储到 vector 中的元素 (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Leading Zeros Count",
        "suggest": "Vector 领先的零计数",
        "translate": ""
    },
    {
        "source": "The number of leading zeros for elements in vector `a` (sixteen signed 8-bit integer numbers) is stored to the elements in vector (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导零数目 (十六个带符号的 8 位整数) 存储到 vector 中的元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading zeros for elements in vector `a` (eight signed 16-bit integer numbers) is stored to the elements in vector (eight signed 16-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导零数 (八个带符号的 16 位整数) 存储到 vector 中的元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading zeros for elements in vector `a` (four signed 32-bit integer numbers) is stored to the elements in vector (four signed 32-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导零数 (四个有符号的 32 位整数) 存储到 vector 中的元素 (四个有符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of leading zeros for elements in vector `a` (two signed 64-bit integer numbers) is stored to the elements in vector (two signed 64-bit integer numbers).",
        "suggest": "vector `a` 中的元素的前导零数 (两个有符号的 64 位整数) 存储到 vector 中的元素 (两个有符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Vector Logical Negated Or",
        "suggest": "Vector 逻辑取反或",
        "translate": ""
    },
    {
        "source": "Each bit of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the corresponding bit of vector `b` (sixteen unsigned 8-bit integer numbers) in a bitwise logical NOR operation.",
        "suggest": "vector `a` 的每个位 (十六个无符号的 8 位整数) 与 vector `b` 的对应位 (十六个无符号的 8 位整数) 按位逻辑或运算进行组合。",
        "translate": ""
    },
    {
        "source": "Immediate Logical Negated Or",
        "suggest": "Immediate 逻辑否定或",
        "translate": ""
    },
    {
        "source": "Each bit of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the 8-bit immediate `imm8` in a bitwise logical NOR operation.",
        "suggest": "vector `a` 的每个位 (十六个无符号的 8 位整数) 与 8 位 immediate  `imm8` 进行按位逻辑或运算。",
        "translate": ""
    },
    {
        "source": "Vector Logical Or",
        "suggest": "Vector 逻辑或",
        "translate": ""
    },
    {
        "source": "Each bit of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the corresponding bit of vector `b` (sixteen unsigned 8-bit integer numbers) in a bitwise logical OR operation.",
        "suggest": "vector `a` 的每个位 (十六个无符号的 8 位整数) 与 vector `b` 的对应位 (十六个无符号的 8 位整数) 按位逻辑或运算进行组合。",
        "translate": ""
    },
    {
        "source": "Immediate Logical Or",
        "suggest": "Immediate 逻辑或",
        "translate": ""
    },
    {
        "source": "Each bit of vector `a` (sixteen unsigned 8-bit integer numbers) is combined with the 8-bit immediate `imm8` in a bitwise logical OR operation.",
        "suggest": "vector `a` 的每一位 (十六个无符号的 8 位整数) 与 8 位 immediate  `imm8` 进行按位逻辑或运算。",
        "translate": ""
    },
    {
        "source": "Vector Pack Even ",
        "suggest": "Vector 包 Even ",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (sixteen signed 8-bit integer numbers) are copied to the left half of the result vector and even elements in vector `b` (sixteen signed 8-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "vectors `a` 中的偶数元素 (十六个带符号的 8 位整数) 复制到结果 vector 的左半部分，而 vector `b` 中的偶数元素 (十六个带符号的 8 位整数数字) 被复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (eight signed 16-bit integer numbers) are copied to the left half of the result vector and even elements in vector `b` (eight signed 16-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "vectors `a` 中的偶数元素 (八个带符号的 16 位整数) 被复制到结果 vector 的左半部分，而 vector `b` 中的偶数元素 (八个带符号的 16 位整数) 被复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (four signed 32-bit integer numbers) are copied to the left half of the result vector and even elements in vector `b` (four signed 32-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "vectors `a` 中的偶数元素 (四个带符号的 32 位整数) 被复制到结果 vector 的左半部分，vector `b` 中的偶数元素 (四个带符号的 32 位整数) 被复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Even elements in vectors `a` (two signed 64-bit integer numbers) are copied to the left half of the result vector and even elements in vector `b` (two signed 64-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "vectors `a` 中的偶数元素 (两个有符号的 64 位整数) 复制到结果 vector 的左半部分，而 vector `b` 中的偶数元素 (两个有符号 64 位整数的整数) 复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Vector Pack Odd",
        "suggest": "Vector Pack 奇数",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (sixteen signed 8-bit integer numbers) are copied to the left half of the result vector and odd elements in vector `b` (sixteen signed 8-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "将 vectors `a` 中的奇数元素 (十六个带符号的 8 位整数) 复制到结果 vector 的左半部分，将 vector `b` 中的奇数元素 (十六个带符号的 8 位整数) 复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (eight signed 16-bit integer numbers) are copied to the left half of the result vector and odd elements in vector `b` (eight signed 16-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "将 vectors `a` 中的奇数元素 (八个有符号的 16 位整数) 复制到结果 vector 的左半部分，并将 vector `b` 中的奇数元素 (八个有符号 16 位整数的整数) 复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (four signed 32-bit integer numbers) are copied to the left half of the result vector and odd elements in vector `b` (four signed 32-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "将 vectors `a` 中的奇数元素 (四个有符号的 32 位整数) 复制到结果 vector 的左半部分，并将 vector `b` 中的奇数元素 (四个有符号 32 位整数的整数) 复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Odd elements in vectors `a` (two signed 64-bit integer numbers) are copied to the left half of the result vector and odd elements in vector `b` (two signed 64-bit integer numbers) are copied to the right half of the result vector.",
        "suggest": "将 vectors `a` 中的奇数元素 (两个有符号的 64 位整数) 复制到结果 vector 的左半部分，并将 vector `b` 中的奇数元素 (两个有符号 64 位整数的整数) 复制到结果 vector 的右半部分。",
        "translate": ""
    },
    {
        "source": "Vector Population Count",
        "suggest": "Vector 人口计数",
        "translate": ""
    },
    {
        "source": "The number of bits set to 1 for elements in vector `a` (sixteen signed 8-bit integer numbers) is stored to the elements in the result vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素设置为 1 的位数 (十六个带符号的 8 位整数) 存储到结果 vector 中的元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of bits set to 1 for elements in vector `a` (eight signed 16-bit integer numbers) is stored to the elements in the result vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素设置为 1 的位数 (八个带符号的 16 位整数) 存储到结果 vector 中的元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The number of bits set to 1 for elements in vector `a` (four signed 32-bit integer numbers) is stored to the elements in the result vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素设置为 1 的位数 (四个有符号的 32 位整数) 存储到结果 vector (四个有符号的 32 位整数) 中的元素。",
        "translate": ""
    },
    {
        "source": "The number of bits set to 1 for elements in vector `a` (two signed 64-bit integer numbers) is stored to the elements in the result vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素设置为 1 的位数 (两个带符号的 64 位整数) 存储到结果 vector 中的元素 (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Signed Saturate",
        "suggest": "Immediate 有符号饱和",
        "translate": ""
    },
    {
        "source": "Signed elements in vector `a` (sixteen signed 8-bit integer numbers) are saturated to signed values of `imm3+1` bits without changing the data width.",
        "suggest": "vector `a` 中的带符号元素 (十六个带符号的 8 位整数) 在不更改数据宽度的情况下已饱和为 `imm3+1` 位的带符号值。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (sixteen signed 8-bit integer numbers).",
        "suggest": "结果存储在 vector (十六个带符号的 8 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Signed elements in vector `a` (eight signed 16-bit integer numbers) are saturated to signed values of `imm4+1` bits without changing the data width.",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的带符号元素在不更改数据宽度的情况下已饱和为 `imm4+1` 位的带符号值。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (eight signed 16-bit integer numbers).",
        "suggest": "结果存储在 vector (八个带符号的 16 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Signed elements in vector `a` (four signed 32-bit integer numbers) are saturated to signed values of `imm5+1` bits without changing the data width.",
        "suggest": "vector `a` 中的带符号元素 (四个带符号的 32 位整数) 在不更改数据宽度的情况下已饱和为 `imm5+1` 位的带符号值。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (four signed 32-bit integer numbers).",
        "suggest": "结果存储在 vector (四个带符号的 32 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Signed elements in vector `a` (two signed 64-bit integer numbers) are saturated to signed values of `imm6+1` bits without changing the data width.",
        "suggest": "vector `a` 中的带符号元素 (两个带符号的 64 位整数) 已饱和为 `imm6+1` 位的带符号值，而不会更改数据宽度。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (two signed 64-bit integer numbers).",
        "suggest": "结果存储在 vector (两个带符号的 64 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Immediate Unsigned Saturate",
        "suggest": "Immediate 无符号饱和",
        "translate": ""
    },
    {
        "source": "Unsigned elements in vector `a` (sixteen unsigned 8-bit integer numbers) are saturated to unsigned values of `imm3+1` bits without changing the data width.",
        "suggest": "vector `a` 中的无符号元素 (十六个无符号的 8 位整数) 将饱和为 `imm3+1` 位的无符号值，而不会更改数据宽度。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (sixteen unsigned 8-bit integer numbers).",
        "suggest": "结果存储在 vector (十六个无符号的 8 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Unsigned elements in vector `a` (eight unsigned 16-bit integer numbers) are saturated to unsigned values of `imm4+1` bits without changing the data width.",
        "suggest": "vector `a` 中的无符号元素 (八个无符号的 16 位整数) 将饱和为 `imm4+1` 位的无符号值，而不会更改数据宽度。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (eight unsigned 16-bit integer numbers).",
        "suggest": "结果存储在 vector (八个无符号的 16 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Unsigned elements in vector `a` (four unsigned 32-bit integer numbers) are saturated to unsigned values of `imm5+1` bits without changing the data width.",
        "suggest": "vector `a` 中的无符号元素 (四个无符号的 32 位整数) 将饱和为 `imm5+1` 位的无符号值，而不会更改数据宽度。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (four unsigned 32-bit integer numbers).",
        "suggest": "结果存储在 vector (四个无符号的 32 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Unsigned elements in vector `a` (two unsigned 64-bit integer numbers) are saturated to unsigned values of `imm6+1` bits without changing the data width.",
        "suggest": "vector `a` 中的无符号元素 (两个无符号 64 位整数) 将饱和为 `imm6+1` 位的无符号值，而不会更改数据宽度。",
        "translate": ""
    },
    {
        "source": "The result is stored in the vector (two unsigned 64-bit integer numbers).",
        "suggest": "结果存储在 vector (两个无符号的 64 位整数) 中。",
        "translate": ""
    },
    {
        "source": "Immediate Set Shuffle Elements",
        "suggest": "Immediate 设置随机元素",
        "translate": ""
    },
    {
        "source": "The set shuffle instruction works on 4-element sets.",
        "suggest": "set shuffle 指令适用于 4 元素集。",
        "translate": ""
    },
    {
        "source": "All sets are shuffled in the same way: the element i82i+1..2i in `a` (sixteen signed 8-bit integer numbers) is copied over the element i in result vector (sixteen signed 8-bit integer numbers), where i is 0, 1, 2, 3.",
        "suggest": "所有集合都以相同的方式洗牌: 将 `a` 中的元素 i82i + 1..2i (十六个带符号的 8 位整数) 复制到元素 i 的结果 vector (十六个带符号的 8 位整数) 中，其中 i 为 0、1、2、3。",
        "translate": ""
    },
    {
        "source": "All sets are shuffled in the same way: the element i82i+1..2i in `a` (eight signed 16-bit integer numbers) is copied over the element i in result vector (eight signed 16-bit integer numbers), where i is 0, 1, 2, 3.",
        "suggest": "所有集合都以相同的方式洗牌: `a` 中的元素 i82i + 1..2i (八个带符号的 16 位整数) 复制到元素 i 上，结果为 vector (八个带符号的 16 位整数)，其中 i 为 0、1、2、3。",
        "translate": ""
    },
    {
        "source": "All sets are shuffled in the same way: the element i82i+1..2i in `a` (four signed 32-bit integer numbers) is copied over the element i in result vector (four signed 32-bit integer numbers), where i is 0, 1, 2, 3.",
        "suggest": "所有集合都以相同的方式洗牌: 将 `a` 中的元素 i82i + 1..2i (四个带符号的 32 位整数) 复制到元素 i 的结果 vector (四个带符号的 32 位整数) 中，其中 i 为 0、1、2、3。",
        "translate": ""
    },
    {
        "source": "GPR Columns Slide",
        "suggest": "GPR 列幻灯片",
        "translate": ""
    },
    {
        "source": "Vector registers `a` (sixteen signed 8-bit integer numbers) and `b` (sixteen signed 8-bit integer numbers) contain 2-dimensional byte arrays (rectangles) stored row-wise with as many rows as bytes in integer data format df.",
        "suggest": "Vector 寄存器 `a` (十六个带符号的 8 位整数) 和 `b` (十六个带符号的 8 位整数) 包含二维字节数组 (rectangles)，按行存储，其行数与整数数据格式 df 中的字节数相同。",
        "translate": ""
    },
    {
        "source": "The two source rectangles `b` and `a` are concatenated horizontally in the order they appear in the syntax, i.e. first `a` and then `b`.",
        "suggest": "两个源矩形 `b` 和 `a` 按照它们在语法中出现的顺序水平连接，即，首先是 `a`，然后是 `b`。",
        "translate": ""
    },
    {
        "source": "Place a new destination rectangle over `b` and then slide it to the left over the concatenation of `a` and `b` by the number of columns given in GPR `c`.",
        "suggest": "在 `b` 上放置一个新的目标矩形，然后按 GPR `c` 中给定的列数将其向 `a` 和 `b` 的串联上方的左侧滑动。",
        "translate": ""
    },
    {
        "source": "GPR `c` value is interpreted modulo the number of columns in destination rectangle, or equivalently, the number of data format df elements in the destination vector.",
        "suggest": "GPR `c` 值以目标矩形中的列数为模，或者等效地以目标 vector 中的数据格式 df 元素数来解释。",
        "translate": ""
    },
    {
        "source": "Vector registers `a` (eight signed 16-bit integer numbers) and `b` (eight signed 16-bit integer numbers) contain 2-dimensional byte arrays (rectangles) stored row-wise with as many rows as bytes in integer data format df.",
        "suggest": "Vector 寄存器 `a` (八个带符号的 16 位整数) 和 `b` (八个带符号的 16 位整数) 包含按行存储的二维字节数组 (rectangles)，其行数与整数数据格式 df 中的字节数相同。",
        "translate": ""
    },
    {
        "source": "Vector registers `a` (four signed 32-bit integer numbers) and `b` (four signed 32-bit integer numbers) contain 2-dimensional byte arrays (rectangles) stored row-wise with as many rows as bytes in integer data format df.",
        "suggest": "Vector 寄存器 `a` (四个带符号的 32 位整数) 和 `b` (四个带符号的 32 位整数) 包含二维字节数组 (rectangles)，按行存储，其行数与整数数据格式 df 中的字节数相同。",
        "translate": ""
    },
    {
        "source": "Vector registers `a` (two signed 64-bit integer numbers) and `b` (two signed 64-bit integer numbers) contain 2-dimensional byte arrays (rectangles) stored row-wise with as many rows as bytes in integer data format df.",
        "suggest": "Vector 寄存器 `a` (两个带符号的 64 位整数) 和 `b` (两个带符号的 64 位整数) 包含按行存储的二维字节数组 (rectangles)，其行数与整数数据格式 df 中的字节数相同。",
        "translate": ""
    },
    {
        "source": "Immediate Columns Slide",
        "suggest": "Immediate 列幻灯片",
        "translate": ""
    },
    {
        "source": "Place a new destination rectangle over `b` and then slide it to the left over the concatenation of `a` and `b` by `imm1` columns.",
        "suggest": "在 `b` 上放置一个新的目标矩形，然后将其滑动到 `a` 和 `b` 的 `imm1` 列的串联上方的左侧。",
        "translate": ""
    },
    {
        "source": "Vector Shift Left",
        "suggest": "Vector 左移",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen signed 8-bit integer numbers) are shifted left by the number of bits the elements in vector `b` (sixteen signed 8-bit integer numbers) specify modulo the size of the element in bits.",
        "suggest": "vector `a` (十六个带符号的 8 位整数) 中的元素向左移动 vector `b` (十六个带符号的 8 位整数) 中的元素以位为模的位数。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight signed 16-bit integer numbers) are shifted left by the number of bits the elements in vector `b` (eight signed 16-bit integer numbers) specify modulo the size of the element in bits.",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的元素向左移动 vector `b` (八个带符号的 16 位整数) 中的元素向左移动的位数。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four signed 32-bit integer numbers) are shifted left by the number of bits the elements in vector `b` (four signed 32-bit integer numbers) specify modulo the size of the element in bits.",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的元素向左移动 vector `b` (四个带符号的 32 位整数) 中的元素向左移动的位数。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two signed 64-bit integer numbers) are shifted left by the number of bits the elements in vector `b` (two signed 64-bit integer numbers) specify modulo the size of the element in bits.",
        "suggest": "vector `a` (两个带符号的 64 位整数) 中的元素向左移动 vector `b` (两个带符号的 64 位整数) 中的元素向左移动的位数。",
        "translate": ""
    },
    {
        "source": "Immediate Shift Left",
        "suggest": "Immediate 左移",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen signed 8-bit integer numbers) are shifted left by `imm4` bits.",
        "suggest": "vector `a` 中的元素 (十六个带符号的 8 位整数) 向左移动 `imm4` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight signed 16-bit integer numbers) are shifted left by `imm3` bits.",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的元素向左移动 `imm3` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four signed 32-bit integer numbers) are shifted left by `imm2` bits.",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的元素向左移动 `imm2` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two signed 64-bit integer numbers) are shifted left by `imm1` bits.",
        "suggest": "vector `a` (两个带符号的 64 位整数) 中的元素向左移动 `imm1` 位。",
        "translate": ""
    },
    {
        "source": "GPR Element Splat",
        "suggest": "GPR 元素图示",
        "translate": ""
    },
    {
        "source": "Replicate vector `a` (sixteen signed 8-bit integer numbers) element with index given by GPR `b` to all elements in vector (sixteen signed 8-bit integer numbers) GPR `b` value is interpreted modulo the number of data format df elements in the destination vector.",
        "suggest": "将具有 GPR `b` 给定索引的 vector `a` (十六个带符号的 8 位整数) 元素复制到 vector (十六个带符号的 8 位整数) 中的所有元素 GPR `b` 值以目标 vector 中数据格式 df 元素的数量为模。",
        "translate": ""
    },
    {
        "source": "Replicate vector `a` (eight signed 16-bit integer numbers) element with index given by GPR `b` to all elements in vector (eight signed 16-bit integer numbers) GPR `b` value is interpreted modulo the number of data format df elements in the destination vector.",
        "suggest": "将具有 GPR `b` 给定索引的 vector `a` (八个带符号的 16 位整数) 元素复制到 vector (八个带符号的 16 位整数) 中的所有元素 GPR `b` 值以目标 vector 中的数据格式 df 元素个数为模。",
        "translate": ""
    },
    {
        "source": "Replicate vector `a` (four signed 32-bit integer numbers) element with index given by GPR `b` to all elements in vector (four signed 32-bit integer numbers) GPR `b` value is interpreted modulo the number of data format df elements in the destination vector.",
        "suggest": "将具有 GPR `b` 给定索引的 vector `a` (四个带符号的 32 位整数) 元素复制到 vector (四个带符号的 32 位整数) 中的所有元素 GPR `b` 值以目标 vector 中的数据格式 df 元素个数为模。",
        "translate": ""
    },
    {
        "source": "Replicate vector `a` (two signed 64-bit integer numbers) element with index given by GPR `b` to all elements in vector (two signed 64-bit integer numbers) GPR `b` value is interpreted modulo the number of data format df elements in the destination vector.",
        "suggest": "将具有 GPR `b` 给定索引的 vector `a` (两个带符号的 64 位整数) 元素复制到 vector (两个带符号的 64 位整数) 中的所有元素 GPR `b` 值以目标 vector 中的数据格式 df 元素个数为模。",
        "translate": ""
    },
    {
        "source": "Immediate Element Splat",
        "suggest": "Immediate 元素 Splat",
        "translate": ""
    },
    {
        "source": "Replicate element `imm4` in vector `a` (sixteen signed 8-bit integer numbers) to all elements in vector (sixteen signed 8-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素 `imm4` (十六个带符号的 8 位整数) 复制到 vector 中的所有元素 (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "Replicate element `imm3` in vector `a` (eight signed 16-bit integer numbers) to all elements in vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` 中的元素 `imm3` (八个带符号的 16 位整数) 复制到 vector 中的所有元素 (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "Replicate element `imm2` in vector `a` (four signed 32-bit integer numbers) to all elements in vector (four signed 32-bit integer numbers).",
        "suggest": "将 vector `a` (四个带符号的 32 位整数) 中的元素 `imm2` 复制到 vector (四个带符号的 32 位整数中) 的所有元素。",
        "translate": ""
    },
    {
        "source": "Replicate element `imm1` in vector `a` (two signed 64-bit integer numbers) to all elements in vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个带符号的 64 位整数) 中的元素 `imm1` 复制到 vector (两个带符号的 64 位整数中) 的所有元素。",
        "translate": ""
    },
    {
        "source": "Vector Shift Right Arithmetic",
        "suggest": "Vector 右移算术",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen signed 8-bit integer numbers) are shifted right arithmetic by the number of bits the elements in vector `b` (sixteen signed 8-bit integer numbers) specify modulo the size of the element in bits.The result is written to vector (sixteen signed 8-bit integer numbers).",
        "suggest": "vector `a` (十六个带符号的 8 位整数) 中的元素按 vector `b` (十六个带符号的 8 位整数) 中元素的位数向右算术移位，以模的形式指定将 bits.The 结果中元素的大小写入其中 vector (十六个带符号的 8 位整数)。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight signed 16-bit integer numbers) are shifted right arithmetic by the number of bits the elements in vector `b` (eight signed 16-bit integer numbers) specify modulo the size of the element in bits.The result is written to vector (eight signed 16-bit integer numbers).",
        "suggest": "将 vector `a` (八个带符号的 16 位整数) 中的元素右移算术 vector `b` (八个带符号的 16 位整数) 中的元素的位数，以模数形式指定将 bits.The 结果中的元素的大小写入其中 vector (八个带符号的 16 位整数)。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four signed 32-bit integer numbers) are shifted right arithmetic by the number of bits the elements in vector `b` (four signed 32-bit integer numbers) specify modulo the size of the element in bits.The result is written to vector (four signed 32-bit integer numbers).",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的元素按 vector `b` (四个带符号的 32 位整数) 中元素的位数向右算术移位，以模的形式指定将 bits.The 结果中的元素的大小写入其中 vector (四个带符号的 32 位整数)。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two signed 64-bit integer numbers) are shifted right arithmetic by the number of bits the elements in vector `b` (two signed 64-bit integer numbers) specify modulo the size of the element in bits.The result is written to vector (two signed 64-bit integer numbers).",
        "suggest": "将 vector `a` (两个带符号的 64 位整数) 中的元素右移算术 vector `b` (两个带符号的 64 位整数) 中的元素的位数，以模数形式指定将 bits.The 结果中的元素大小写入 vector (两个带符号的 64 位整数)。",
        "translate": ""
    },
    {
        "source": "Immediate Shift Right Arithmetic",
        "suggest": "Immediate 右移算术",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (sixteen signed 8-bit integer numbers) are shifted right arithmetic by `imm3` bits.",
        "suggest": "vector `a` (十六个带符号的 8 位整数) 中的元素右移 `imm3` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (eight signed 16-bit integer numbers) are shifted right arithmetic by `imm4` bits.",
        "suggest": "vector `a` (八个带符号的 16 位整数) 中的元素右移 `imm4` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (four signed 32-bit integer numbers) are shifted right arithmetic by `imm5` bits.",
        "suggest": "vector `a` (四个带符号的 32 位整数) 中的元素右移 `imm5` 位。",
        "translate": ""
    },
    {
        "source": "The elements in vector `a` (two signed 64-bit integer numbers) are shifted right arithmetic by `imm6` bits.",
        "suggest": "vector `a` (两个带符号的 64 位整数) 中的元素右移 `imm6` 位。",
        "translate": ""
    }
]
