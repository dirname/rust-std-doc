initSidebarItems({"enum":[["ColorConfig","控制台输出是否应为彩色"],["NamePadding",""],["OutputFormat","测试结果输出格式"],["RunIgnored","是否应该运行被忽略的测试"],["ShouldPanic","是否期望对 panic 进行测试"],["TestFn",""],["TestName",""],["TestType","根据 rust 书 约定的测试类型。"]],"fn":[["assert_test_result","单元测试终止时调用。 如果将单元测试视为失败，则应该 panic。 默认情况下，调用 `report()` 并检查 `0` 结果。"],["convert_benchmarks_to_tests",""],["filter_tests",""],["run_test",""],["run_tests",""],["run_tests_console","一个简单的控制台测试运行程序。 运行提供的测试报告过程并将结果发送到 stdout。"],["test_main",""],["test_main_static","为使用静态测试 vector 进行调用而优化的成员。 进行任何动态测试时，这将为 panic (intentionally)。"],["test_main_static_abort","为使用静态测试 vector 进行调用而优化的成员。 进行任何动态测试时，这将为 panic (intentionally)。"]],"mod":[["bench","基准测试模块。"],["stats",""],["test",""]],"struct":[["Options","调用方定义的测试运行的选项 (而不是 CLI 参数)。 如果我们还想添加其他选项，只需将其添加到此结构体中即可。"],["TestDesc",""],["TestDescAndFn",""],["TestId",""],["TestOpts",""]],"trait":[["TDynBenchFn","表示一个基准函数。"]]});