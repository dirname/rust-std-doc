initSidebarItems({"enum":[["Delimiter","描述如何分隔 token 树的序列。"],["Level","代表诊断级别的枚举。"],["Spacing","描述 `Punct` 后面是紧跟另一个 `Punct` ([`Spacing::Joint`]) 还是不同的 token 或空格 ([`Spacing::Alone`])。"],["TokenTree","单个 token 或 token 树的定界序列 (例如 `[1, (), ..]`)。"]],"fn":[["is_available","确定是否已使 proc_macro 可被当前正在运行的程序访问。"],["quote","将 `TokenStream` 引用到 `TokenStream` 中。 这是 `quote!()` proc 宏的实际实现。"],["quote_span","将 `Span` 引用到 `TokenStream` 中。 这是实现自定义引号所需的。"]],"macro":[["quote","`quote!(..)` 接受任意的 tokens 并扩展为描述输入的 `TokenStream`。 例如，`quote!(a + b)` 将产生一个表达式，该表达式在被求值时将构造 `TokenStream` `[Ident(\"a\"), Punct('+', Alone), Ident(\"b\")]`。"]],"mod":[["token_stream","`TokenStream` 类型的公共实现详细信息，例如迭代器。"],["tracked_env","跟踪对环境变量的访问。"],["tracked_path","跟踪对其他文件的访问。"]],"struct":[["Diagnostic","表示诊断消息和关联的子消息的结构体。"],["Group","分隔的 token 流。"],["Ident","标识符 (`ident`)。"],["LexError","`TokenStream::from_str` 返回错误。"],["LineColumn","代表 `Span` 开头或结尾的行 - 列对。"],["Literal","字面量字符串 (`\"hello\"`)，字节字符串 (`b\"hello\"`)，字符 (`'a'`)，字节字符 (`b'a'`)，带或不带后缀 (‘1’，`1u8`，`2.3`，`2.3f32`) 的整数或浮点数。"],["Punct","`Punct` 是单个标点符号，例如 `+`、`-` 或 `#`。"],["SourceFile","给定 `Span` 的源文件。"],["Span","源代码区域以及宏展开信息。"],["TokenStream","此 crate 提供的主要类型，表示 tokens 的抽象流，或更具体地说，表示 token 树的序列。 该类型提供用于迭代这些 token 树的接口，并且相反，将大量 token 树收集到一个流中。"]],"trait":[["MultiSpan","Trait 由可以转换为一组 `Span` 的类型实现。"]]});